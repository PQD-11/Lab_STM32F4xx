
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800671c  0800671c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006724  08006724  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006728  08006728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800672c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a44  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ab8  20004ab8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132c9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d60  00000000  00000000  0003336d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  000360d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e88  00000000  00000000  00037060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000434e  00000000  00000000  00037ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112c9  00000000  00000000  0003c236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c38f9  00000000  00000000  0004d4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110df8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046b0  00000000  00000000  00110e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006530 	.word	0x08006530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006530 	.word	0x08006530

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 300);
 80004dc:	1d39      	adds	r1, r7, #4
 80004de:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80004e2:	2201      	movs	r2, #1
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <__io_putchar+0x20>)
 80004e6:	f001 fd0e 	bl	8001f06 <HAL_UART_Transmit>
  return ch;
 80004ea:	687b      	ldr	r3, [r7, #4]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000090 	.word	0x20000090

080004f8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart3.Instance)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b23      	ldr	r3, [pc, #140]	; (8000594 <HAL_UART_RxCpltCallback+0x9c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	d13e      	bne.n	800058a <HAL_UART_RxCpltCallback+0x92>
	{
		is_timeout = 0;
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <HAL_UART_RxCpltCallback+0xa0>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
		if(data_rx == '\n')
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <HAL_UART_RxCpltCallback+0xa4>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b0a      	cmp	r3, #10
 8000518:	d103      	bne.n	8000522 <HAL_UART_RxCpltCallback+0x2a>
		{
			huart_data.flag = 1;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <HAL_UART_RxCpltCallback+0xa8>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e02e      	b.n	8000580 <HAL_UART_RxCpltCallback+0x88>
		}
		else
		{
			if(is_timeout == 1)
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_UART_RxCpltCallback+0xa0>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d113      	bne.n	8000552 <HAL_UART_RxCpltCallback+0x5a>
			{
				HAL_UART_Transmit(&huart3, "Timeout Errors\n", 15, 300);
 800052a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800052e:	220f      	movs	r2, #15
 8000530:	491c      	ldr	r1, [pc, #112]	; (80005a4 <HAL_UART_RxCpltCallback+0xac>)
 8000532:	4818      	ldr	r0, [pc, #96]	; (8000594 <HAL_UART_RxCpltCallback+0x9c>)
 8000534:	f001 fce7 	bl	8001f06 <HAL_UART_Transmit>
				memset(huart_data.buff, 0, MAX_BUFFER_SIZE);
 8000538:	2264      	movs	r2, #100	; 0x64
 800053a:	2100      	movs	r1, #0
 800053c:	481a      	ldr	r0, [pc, #104]	; (80005a8 <HAL_UART_RxCpltCallback+0xb0>)
 800053e:	f005 facd 	bl	8005adc <memset>
				huart_data.index = 0;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_UART_RxCpltCallback+0xa8>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
				cntr = 0;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_UART_RxCpltCallback+0xb4>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	e016      	b.n	8000580 <HAL_UART_RxCpltCallback+0x88>
			}
			else
			{
				huart_data.buff[huart_data.index++] = data_rx;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <HAL_UART_RxCpltCallback+0xa8>)
 8000554:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	b2d1      	uxtb	r1, r2
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <HAL_UART_RxCpltCallback+0xa8>)
 800055e:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
 8000562:	4619      	mov	r1, r3
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <HAL_UART_RxCpltCallback+0xa4>)
 8000566:	781a      	ldrb	r2, [r3, #0]
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <HAL_UART_RxCpltCallback+0xa8>)
 800056a:	440b      	add	r3, r1
 800056c:	705a      	strb	r2, [r3, #1]
				if(huart_data.index > 100)
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_UART_RxCpltCallback+0xa8>)
 8000570:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000574:	2b64      	cmp	r3, #100	; 0x64
 8000576:	d903      	bls.n	8000580 <HAL_UART_RxCpltCallback+0x88>
				{
					huart_data.index = 0;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_UART_RxCpltCallback+0xa8>)
 800057a:	2200      	movs	r2, #0
 800057c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
				}
			}
		}
		HAL_UART_Receive_IT(&huart3, &data_rx, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	4906      	ldr	r1, [pc, #24]	; (800059c <HAL_UART_RxCpltCallback+0xa4>)
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <HAL_UART_RxCpltCallback+0x9c>)
 8000586:	f001 fd50 	bl	800202a <HAL_UART_Receive_IT>
	}
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000090 	.word	0x20000090
 8000598:	200000e4 	.word	0x200000e4
 800059c:	200000dc 	.word	0x200000dc
 80005a0:	200000e8 	.word	0x200000e8
 80005a4:	0800655c 	.word	0x0800655c
 80005a8:	200000e9 	.word	0x200000e9
 80005ac:	200000e0 	.word	0x200000e0

080005b0 <Init_Blink>:

void Init_Blink()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <Init_Blink+0x60>)
 80005ba:	f000 ffa5 	bl	8001508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2102      	movs	r1, #2
 80005c2:	4813      	ldr	r0, [pc, #76]	; (8000610 <Init_Blink+0x60>)
 80005c4:	f000 ffa0 	bl	8001508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	4810      	ldr	r0, [pc, #64]	; (8000610 <Init_Blink+0x60>)
 80005ce:	f000 ff9b 	bl	8001508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2108      	movs	r1, #8
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <Init_Blink+0x60>)
 80005d8:	f000 ff96 	bl	8001508 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e0:	f000 fc2e 	bl	8000e40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <Init_Blink+0x60>)
 80005ea:	f000 ff8d 	bl	8001508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2102      	movs	r1, #2
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <Init_Blink+0x60>)
 80005f4:	f000 ff88 	bl	8001508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2104      	movs	r1, #4
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <Init_Blink+0x60>)
 80005fe:	f000 ff83 	bl	8001508 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2108      	movs	r1, #8
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <Init_Blink+0x60>)
 8000608:	f000 ff7e 	bl	8001508 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020400 	.word	0x40020400

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fba0 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f830 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f8c2 	bl	80007a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000624:	f000 f896 	bl	8000754 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &data_rx, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	490d      	ldr	r1, [pc, #52]	; (8000660 <main+0x4c>)
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <main+0x50>)
 800062e:	f001 fcfc 	bl	800202a <HAL_UART_Receive_IT>
  Init_Blink();
 8000632:	f7ff ffbd 	bl	80005b0 <Init_Blink>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000636:	f002 fcc5 	bl	8002fc4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Blink01 */
  Blink01Handle = osThreadNew(StartDefaultTask, NULL, &Blink01_attributes);
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <main+0x54>)
 800063c:	2100      	movs	r1, #0
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x58>)
 8000640:	f002 fd0a 	bl	8003058 <osThreadNew>
 8000644:	4603      	mov	r3, r0
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <main+0x5c>)
 8000648:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartTask02, NULL, &Printing_attributes);
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <main+0x60>)
 800064c:	2100      	movs	r1, #0
 800064e:	480a      	ldr	r0, [pc, #40]	; (8000678 <main+0x64>)
 8000650:	f002 fd02 	bl	8003058 <osThreadNew>
 8000654:	4603      	mov	r3, r0
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <main+0x68>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f002 fcd7 	bl	800300c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x4a>
 8000660:	200000dc 	.word	0x200000dc
 8000664:	20000090 	.word	0x20000090
 8000668:	08006658 	.word	0x08006658
 800066c:	08000865 	.word	0x08000865
 8000670:	200000d4 	.word	0x200000d4
 8000674:	0800667c 	.word	0x0800667c
 8000678:	08000881 	.word	0x08000881
 800067c:	200000d8 	.word	0x200000d8

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fa24 	bl	8005adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f4:	23a8      	movs	r3, #168	; 0xa8
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 ff19 	bl	800153c <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 f994 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000720:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f97a 	bl	8001a2c <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073e:	f000 f97d 	bl	8000a3c <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART3_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART3_UART_Init+0x4c>)
 800078c:	f001 fb6e 	bl	8001e6c <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f951 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <MX_GPIO_Init+0xb4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a25      	ldr	r2, [pc, #148]	; (800085c <MX_GPIO_Init+0xb4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <MX_GPIO_Init+0xb4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_GPIO_Init+0xb4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <MX_GPIO_Init+0xb4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_GPIO_Init+0xb4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_GPIO_Init+0xb4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_GPIO_Init+0xb4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_GPIO_Init+0xb4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_GPIO_Init+0xb4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <MX_GPIO_Init+0xb4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_GPIO_Init+0xb4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0xb8>)
 8000834:	f000 fe68 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000838:	230f      	movs	r3, #15
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0xb8>)
 8000850:	f000 fcbe 	bl	80011d0 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020400 	.word	0x40020400

08000864 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
		printf("Program running...\n");
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <StartDefaultTask+0x18>)
 800086e:	f005 f9ab 	bl	8005bc8 <puts>
	    osDelay(500);
 8000872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000876:	f002 fc81 	bl	800317c <osDelay>
		printf("Program running...\n");
 800087a:	e7f7      	b.n	800086c <StartDefaultTask+0x8>
 800087c:	0800656c 	.word	0x0800656c

08000880 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  	{
  	if(huart_data.flag == 1)
 8000888:	4b5d      	ldr	r3, [pc, #372]	; (8000a00 <StartTask02+0x180>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d1fb      	bne.n	8000888 <StartTask02+0x8>
  		  {
  			  if(strstr((char *)huart_data.buff, "Led ON"))
 8000890:	495c      	ldr	r1, [pc, #368]	; (8000a04 <StartTask02+0x184>)
 8000892:	485d      	ldr	r0, [pc, #372]	; (8000a08 <StartTask02+0x188>)
 8000894:	f005 f9ad 	bl	8005bf2 <strstr>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d04c      	beq.n	8000938 <StartTask02+0xb8>
  			  {
  				  if(strstr((char *)huart_data.buff, "1"))
 800089e:	2131      	movs	r1, #49	; 0x31
 80008a0:	4859      	ldr	r0, [pc, #356]	; (8000a08 <StartTask02+0x188>)
 80008a2:	f005 f999 	bl	8005bd8 <strchr>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00b      	beq.n	80008c4 <StartTask02+0x44>
  				  {
  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2101      	movs	r1, #1
 80008b0:	4856      	ldr	r0, [pc, #344]	; (8000a0c <StartTask02+0x18c>)
 80008b2:	f000 fe29 	bl	8001508 <HAL_GPIO_WritePin>
  					  HAL_UART_Transmit(&huart3, "LED 1 ON ALREADY\n", 17, 300);
 80008b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008ba:	2211      	movs	r2, #17
 80008bc:	4954      	ldr	r1, [pc, #336]	; (8000a10 <StartTask02+0x190>)
 80008be:	4855      	ldr	r0, [pc, #340]	; (8000a14 <StartTask02+0x194>)
 80008c0:	f001 fb21 	bl	8001f06 <HAL_UART_Transmit>
  				  }
  				  if(strstr((char *)huart_data.buff, "2"))
 80008c4:	2132      	movs	r1, #50	; 0x32
 80008c6:	4850      	ldr	r0, [pc, #320]	; (8000a08 <StartTask02+0x188>)
 80008c8:	f005 f986 	bl	8005bd8 <strchr>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00b      	beq.n	80008ea <StartTask02+0x6a>
  				  {
  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2102      	movs	r1, #2
 80008d6:	484d      	ldr	r0, [pc, #308]	; (8000a0c <StartTask02+0x18c>)
 80008d8:	f000 fe16 	bl	8001508 <HAL_GPIO_WritePin>
  					  HAL_UART_Transmit(&huart3, "LED 2 ON ALREADY\n", 17, 300);
 80008dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008e0:	2211      	movs	r2, #17
 80008e2:	494d      	ldr	r1, [pc, #308]	; (8000a18 <StartTask02+0x198>)
 80008e4:	484b      	ldr	r0, [pc, #300]	; (8000a14 <StartTask02+0x194>)
 80008e6:	f001 fb0e 	bl	8001f06 <HAL_UART_Transmit>
  				  }
  				  if(strstr((char *)huart_data.buff, "3"))
 80008ea:	2133      	movs	r1, #51	; 0x33
 80008ec:	4846      	ldr	r0, [pc, #280]	; (8000a08 <StartTask02+0x188>)
 80008ee:	f005 f973 	bl	8005bd8 <strchr>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00b      	beq.n	8000910 <StartTask02+0x90>
  				  {
  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2104      	movs	r1, #4
 80008fc:	4843      	ldr	r0, [pc, #268]	; (8000a0c <StartTask02+0x18c>)
 80008fe:	f000 fe03 	bl	8001508 <HAL_GPIO_WritePin>
  					  HAL_UART_Transmit(&huart3, "LED 3 ON ALREADY\n", 17, 300);
 8000902:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000906:	2211      	movs	r2, #17
 8000908:	4944      	ldr	r1, [pc, #272]	; (8000a1c <StartTask02+0x19c>)
 800090a:	4842      	ldr	r0, [pc, #264]	; (8000a14 <StartTask02+0x194>)
 800090c:	f001 fafb 	bl	8001f06 <HAL_UART_Transmit>
  				  }
  				  if(strstr((char *)huart_data.buff, "4"))
 8000910:	2134      	movs	r1, #52	; 0x34
 8000912:	483d      	ldr	r0, [pc, #244]	; (8000a08 <StartTask02+0x188>)
 8000914:	f005 f960 	bl	8005bd8 <strchr>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d063      	beq.n	80009e6 <StartTask02+0x166>
  				  {
  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2108      	movs	r1, #8
 8000922:	483a      	ldr	r0, [pc, #232]	; (8000a0c <StartTask02+0x18c>)
 8000924:	f000 fdf0 	bl	8001508 <HAL_GPIO_WritePin>
  					  HAL_UART_Transmit(&huart3, "LED 4 ON ALREADY\n", 17, 300);
 8000928:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800092c:	2211      	movs	r2, #17
 800092e:	493c      	ldr	r1, [pc, #240]	; (8000a20 <StartTask02+0x1a0>)
 8000930:	4838      	ldr	r0, [pc, #224]	; (8000a14 <StartTask02+0x194>)
 8000932:	f001 fae8 	bl	8001f06 <HAL_UART_Transmit>
 8000936:	e056      	b.n	80009e6 <StartTask02+0x166>
  				  }
  			  }
  			  else if(strstr((char *)huart_data.buff, "Led OFF"))
 8000938:	493a      	ldr	r1, [pc, #232]	; (8000a24 <StartTask02+0x1a4>)
 800093a:	4833      	ldr	r0, [pc, #204]	; (8000a08 <StartTask02+0x188>)
 800093c:	f005 f959 	bl	8005bf2 <strstr>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d04c      	beq.n	80009e0 <StartTask02+0x160>
  			  {
  				  if(strstr((char *)huart_data.buff, "1"))
 8000946:	2131      	movs	r1, #49	; 0x31
 8000948:	482f      	ldr	r0, [pc, #188]	; (8000a08 <StartTask02+0x188>)
 800094a:	f005 f945 	bl	8005bd8 <strchr>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00b      	beq.n	800096c <StartTask02+0xec>
  				  {
  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2101      	movs	r1, #1
 8000958:	482c      	ldr	r0, [pc, #176]	; (8000a0c <StartTask02+0x18c>)
 800095a:	f000 fdd5 	bl	8001508 <HAL_GPIO_WritePin>
  					  HAL_UART_Transmit(&huart3, "LED 1 OFF ALREADY\n", 18, 300);
 800095e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000962:	2212      	movs	r2, #18
 8000964:	4930      	ldr	r1, [pc, #192]	; (8000a28 <StartTask02+0x1a8>)
 8000966:	482b      	ldr	r0, [pc, #172]	; (8000a14 <StartTask02+0x194>)
 8000968:	f001 facd 	bl	8001f06 <HAL_UART_Transmit>
  				  }
  				  if(strstr((char *)huart_data.buff, "2"))
 800096c:	2132      	movs	r1, #50	; 0x32
 800096e:	4826      	ldr	r0, [pc, #152]	; (8000a08 <StartTask02+0x188>)
 8000970:	f005 f932 	bl	8005bd8 <strchr>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00b      	beq.n	8000992 <StartTask02+0x112>
  				  {
  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	4823      	ldr	r0, [pc, #140]	; (8000a0c <StartTask02+0x18c>)
 8000980:	f000 fdc2 	bl	8001508 <HAL_GPIO_WritePin>
  					  HAL_UART_Transmit(&huart3, "LED 2 OFF ALREADY\n", 18, 300);
 8000984:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000988:	2212      	movs	r2, #18
 800098a:	4928      	ldr	r1, [pc, #160]	; (8000a2c <StartTask02+0x1ac>)
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <StartTask02+0x194>)
 800098e:	f001 faba 	bl	8001f06 <HAL_UART_Transmit>
  				  }
  				  if(strstr((char *)huart_data.buff, "3"))
 8000992:	2133      	movs	r1, #51	; 0x33
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <StartTask02+0x188>)
 8000996:	f005 f91f 	bl	8005bd8 <strchr>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00b      	beq.n	80009b8 <StartTask02+0x138>
  				  {
  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4819      	ldr	r0, [pc, #100]	; (8000a0c <StartTask02+0x18c>)
 80009a6:	f000 fdaf 	bl	8001508 <HAL_GPIO_WritePin>
  					  HAL_UART_Transmit(&huart3, "LED 3 OFF ALREADY\n", 18, 300);
 80009aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80009ae:	2212      	movs	r2, #18
 80009b0:	491f      	ldr	r1, [pc, #124]	; (8000a30 <StartTask02+0x1b0>)
 80009b2:	4818      	ldr	r0, [pc, #96]	; (8000a14 <StartTask02+0x194>)
 80009b4:	f001 faa7 	bl	8001f06 <HAL_UART_Transmit>
  				  }
  				  if(strstr((char *)huart_data.buff, "4"))
 80009b8:	2134      	movs	r1, #52	; 0x34
 80009ba:	4813      	ldr	r0, [pc, #76]	; (8000a08 <StartTask02+0x188>)
 80009bc:	f005 f90c 	bl	8005bd8 <strchr>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00f      	beq.n	80009e6 <StartTask02+0x166>
  				  {
  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	4810      	ldr	r0, [pc, #64]	; (8000a0c <StartTask02+0x18c>)
 80009cc:	f000 fd9c 	bl	8001508 <HAL_GPIO_WritePin>
  					  HAL_UART_Transmit(&huart3, "LED 4 OFF ALREADY\n", 18, 300);
 80009d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80009d4:	2212      	movs	r2, #18
 80009d6:	4917      	ldr	r1, [pc, #92]	; (8000a34 <StartTask02+0x1b4>)
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <StartTask02+0x194>)
 80009da:	f001 fa94 	bl	8001f06 <HAL_UART_Transmit>
 80009de:	e002      	b.n	80009e6 <StartTask02+0x166>
  				  }
  			  }
  			  else
  				  printf("Wrong Message\n");
 80009e0:	4815      	ldr	r0, [pc, #84]	; (8000a38 <StartTask02+0x1b8>)
 80009e2:	f005 f8f1 	bl	8005bc8 <puts>
  			  //HAL_UART_Transmit(&huart1, huart_data.buff, huart_data.index, 100);
  			  memset(huart_data.buff, 0, MAX_BUFFER_SIZE);
 80009e6:	2264      	movs	r2, #100	; 0x64
 80009e8:	2100      	movs	r1, #0
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <StartTask02+0x188>)
 80009ec:	f005 f876 	bl	8005adc <memset>
  			  huart_data.index = 0;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <StartTask02+0x180>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  			  huart_data.flag = 0;
 80009f8:	4b01      	ldr	r3, [pc, #4]	; (8000a00 <StartTask02+0x180>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
  	if(huart_data.flag == 1)
 80009fe:	e743      	b.n	8000888 <StartTask02+0x8>
 8000a00:	200000e8 	.word	0x200000e8
 8000a04:	08006580 	.word	0x08006580
 8000a08:	200000e9 	.word	0x200000e9
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	08006588 	.word	0x08006588
 8000a14:	20000090 	.word	0x20000090
 8000a18:	0800659c 	.word	0x0800659c
 8000a1c:	080065b0 	.word	0x080065b0
 8000a20:	080065c4 	.word	0x080065c4
 8000a24:	080065d8 	.word	0x080065d8
 8000a28:	080065e0 	.word	0x080065e0
 8000a2c:	080065f4 	.word	0x080065f4
 8000a30:	08006608 	.word	0x08006608
 8000a34:	0800661c 	.word	0x0800661c
 8000a38:	08006630 	.word	0x08006630

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_MspInit+0x54>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <HAL_MspInit+0x54>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_MspInit+0x54>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_MspInit+0x54>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	210f      	movs	r1, #15
 8000a8a:	f06f 0001 	mvn.w	r0, #1
 8000a8e:	f000 fad6 	bl	800103e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <HAL_UART_MspInit+0x94>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d134      	bne.n	8000b2c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_UART_MspInit+0x98>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0x98>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_UART_MspInit+0x98>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x98>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0x98>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_UART_MspInit+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000afa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <HAL_UART_MspInit+0x9c>)
 8000b18:	f000 fb5a 	bl	80011d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2105      	movs	r1, #5
 8000b20:	2027      	movs	r0, #39	; 0x27
 8000b22:	f000 fa8c 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b26:	2027      	movs	r0, #39	; 0x27
 8000b28:	f000 faa5 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40004800 	.word	0x40004800
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020800 	.word	0x40020800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */

void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 f946 	bl	8000e00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b74:	f003 ff10 	bl	8004998 <xTaskGetSchedulerState>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d001      	beq.n	8000b82 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b7e:	f004 fcfb 	bl	8005578 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <USART3_IRQHandler+0x10>)
 8000b8e:	f001 fa7d 	bl	800208c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000090 	.word	0x20000090

08000b9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e00a      	b.n	8000bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bae:	f3af 8000 	nop.w
 8000bb2:	4601      	mov	r1, r0
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	60ba      	str	r2, [r7, #8]
 8000bba:	b2ca      	uxtb	r2, r1
 8000bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf0      	blt.n	8000bae <_read+0x12>
	}

return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	e009      	b.n	8000bfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	60ba      	str	r2, [r7, #8]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fc6f 	bl	80004d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbf1      	blt.n	8000be8 <_write+0x12>
	}
	return len;
 8000c04:	687b      	ldr	r3, [r7, #4]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_close>:

int _close(int file)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	return -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c36:	605a      	str	r2, [r3, #4]
	return 0;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_isatty>:

int _isatty(int file)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f004 fee0 	bl	8005a6c <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	20000150 	.word	0x20000150
 8000ce0:	20004ab8 	.word	0x20004ab8

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0e:	490e      	ldr	r1, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d24:	4c0b      	ldr	r4, [pc, #44]	; (8000d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d32:	f7ff ffd7 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 fe9f 	bl	8005a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fc6b 	bl	8000614 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d4c:	0800672c 	.word	0x0800672c
  ldr r2, =_sbss
 8000d50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d54:	20004ab8 	.word	0x20004ab8

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f94f 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe5a 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f967 	bl	8001092 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 f92f 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000154 	.word	0x20000154

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000154 	.word	0x20000154

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff29 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff3e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff31 	bl	8000eec <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffa2 	bl	8000fe4 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff feb6 	bl	8000e28 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d008      	beq.n	80010dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e052      	b.n	8001182 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0216 	bic.w	r2, r2, #22
 80010ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	2b00      	cmp	r3, #0
 8001102:	d103      	bne.n	800110c <HAL_DMA_Abort+0x62>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0208 	bic.w	r2, r2, #8
 800111a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800112c:	e013      	b.n	8001156 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800112e:	f7ff fe7b 	bl	8000e28 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b05      	cmp	r3, #5
 800113a:	d90c      	bls.n	8001156 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2220      	movs	r2, #32
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e015      	b.n	8001182 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e4      	bne.n	800112e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	223f      	movs	r2, #63	; 0x3f
 800116a:	409a      	lsls	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d004      	beq.n	80011a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e00c      	b.n	80011c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2205      	movs	r2, #5
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e16b      	b.n	80014c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 815a 	bne.w	80014be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d005      	beq.n	8001222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	2b02      	cmp	r3, #2
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80b4 	beq.w	80014be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b60      	ldr	r3, [pc, #384]	; (80014dc <HAL_GPIO_Init+0x30c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a5f      	ldr	r2, [pc, #380]	; (80014dc <HAL_GPIO_Init+0x30c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_GPIO_Init+0x30c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_GPIO_Init+0x310>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x314>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d02b      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_GPIO_Init+0x318>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_GPIO_Init+0x31c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x320>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x324>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x328>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x32c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x330>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x20a>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00e      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013da:	2308      	movs	r3, #8
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013de:	2306      	movs	r3, #6
 80013e0:	e00a      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_GPIO_Init+0x310>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_GPIO_Init+0x334>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_GPIO_Init+0x334>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_GPIO_Init+0x334>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f ae90 	bls.w	80011ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40021400 	.word	0x40021400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40021c00 	.word	0x40021c00
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e267      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d075      	beq.n	8001646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155a:	4b88      	ldr	r3, [pc, #544]	; (800177c <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b04      	cmp	r3, #4
 8001564:	d00c      	beq.n	8001580 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001566:	4b85      	ldr	r3, [pc, #532]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156e:	2b08      	cmp	r3, #8
 8001570:	d112      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	4b82      	ldr	r3, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157e:	d10b      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4b7e      	ldr	r3, [pc, #504]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d05b      	beq.n	8001644 <HAL_RCC_OscConfig+0x108>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d157      	bne.n	8001644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e242      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x74>
 80015a2:	4b76      	ldr	r3, [pc, #472]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a75      	ldr	r2, [pc, #468]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01d      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b70      	ldr	r3, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6f      	ldr	r2, [pc, #444]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b6d      	ldr	r3, [pc, #436]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6c      	ldr	r2, [pc, #432]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015d4:	4b69      	ldr	r3, [pc, #420]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a68      	ldr	r2, [pc, #416]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a65      	ldr	r2, [pc, #404]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc18 	bl	8000e28 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fc14 	bl	8000e28 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e207      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b5b      	ldr	r3, [pc, #364]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xc0>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fc04 	bl	8000e28 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fc00 	bl	8000e28 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1f3      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0xe8>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d063      	beq.n	800171a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166a:	4b44      	ldr	r3, [pc, #272]	; (800177c <HAL_RCC_OscConfig+0x240>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x152>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e1c7      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4937      	ldr	r1, [pc, #220]	; (800177c <HAL_RCC_OscConfig+0x240>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	e03a      	b.n	800171a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_RCC_OscConfig+0x244>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff fbb9 	bl	8000e28 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ba:	f7ff fbb5 	bl	8000e28 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1a8      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4925      	ldr	r1, [pc, #148]	; (800177c <HAL_RCC_OscConfig+0x240>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_RCC_OscConfig+0x244>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb98 	bl	8000e28 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fb94 	bl	8000e28 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e187      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d036      	beq.n	8001794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d016      	beq.n	800175c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_RCC_OscConfig+0x248>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fb78 	bl	8000e28 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fb74 	bl	8000e28 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e167      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x240>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x200>
 800175a:	e01b      	b.n	8001794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_OscConfig+0x248>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fb61 	bl	8000e28 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	e00e      	b.n	8001788 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fb5d 	bl	8000e28 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d907      	bls.n	8001788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e150      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
 800177c:	40023800 	.word	0x40023800
 8001780:	42470000 	.word	0x42470000
 8001784:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	4b88      	ldr	r3, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800178a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ea      	bne.n	800176a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8097 	beq.w	80018d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b7d      	ldr	r3, [pc, #500]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a7c      	ldr	r2, [pc, #496]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b7a      	ldr	r3, [pc, #488]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b77      	ldr	r3, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4b74      	ldr	r3, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a73      	ldr	r2, [pc, #460]	; (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb1d 	bl	8000e28 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f2:	f7ff fb19 	bl	8000e28 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e10c      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x474>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x2ea>
 8001818:	4b64      	ldr	r3, [pc, #400]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	4a63      	ldr	r2, [pc, #396]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	; 0x70
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x324>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x30c>
 800182e:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a5e      	ldr	r2, [pc, #376]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
 800183a:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a5b      	ldr	r2, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0x324>
 8001848:	4b58      	ldr	r3, [pc, #352]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6713      	str	r3, [r2, #112]	; 0x70
 8001854:	4b55      	ldr	r3, [pc, #340]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a54      	ldr	r2, [pc, #336]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d015      	beq.n	8001894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fade 	bl	8000e28 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff fada 	bl	8000e28 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0cb      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0ee      	beq.n	8001870 <HAL_RCC_OscConfig+0x334>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fac8 	bl	8000e28 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fac4 	bl	8000e28 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0b5      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b2:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ee      	bne.n	800189c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a1 	beq.w	8001a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d05c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d141      	bne.n	8001972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_OscConfig+0x478>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fa98 	bl	8000e28 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fa94 	bl	8000e28 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e087      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	491b      	ldr	r1, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x478>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fa6d 	bl	8000e28 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff fa69 	bl	8000e28 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e05c      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x416>
 8001970:	e054      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x478>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fa56 	bl	8000e28 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff fa52 	bl	8000e28 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e045      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x470>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x444>
 800199e:	e03d      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e038      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000
 80019b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x4ec>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d028      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d121      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d11a      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0cc      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d90c      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d044      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d119      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e06f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e067      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4934      	ldr	r1, [pc, #208]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff f984 	bl	8000e28 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff f980 	bl	8000e28 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d20c      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8e4 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	080066a0 	.word	0x080066a0
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b094      	sub	sp, #80	; 0x50
 8001bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	647b      	str	r3, [r7, #68]	; 0x44
 8001c04:	2300      	movs	r3, #0
 8001c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c08:	2300      	movs	r3, #0
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c10:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d00d      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	f200 80e1 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x34>
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2a:	e0db      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c30:	e0db      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c36:	e0d8      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c38:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c42:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	2200      	movs	r2, #0
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
 8001c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	0159      	lsls	r1, r3, #5
 8001c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7c:	0150      	lsls	r0, r2, #5
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4621      	mov	r1, r4
 8001c84:	1a51      	subs	r1, r2, r1
 8001c86:	6139      	str	r1, [r7, #16]
 8001c88:	4629      	mov	r1, r5
 8001c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	018b      	lsls	r3, r1, #6
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	018a      	lsls	r2, r1, #6
 8001caa:	4651      	mov	r1, sl
 8001cac:	ebb2 0801 	subs.w	r8, r2, r1
 8001cb0:	4659      	mov	r1, fp
 8001cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cca:	4690      	mov	r8, r2
 8001ccc:	4699      	mov	r9, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	eb18 0303 	adds.w	r3, r8, r3
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	462b      	mov	r3, r5
 8001cd8:	eb49 0303 	adc.w	r3, r9, r3
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cea:	4629      	mov	r1, r5
 8001cec:	024b      	lsls	r3, r1, #9
 8001cee:	4621      	mov	r1, r4
 8001cf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	024a      	lsls	r2, r1, #9
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfe:	2200      	movs	r2, #0
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d08:	f7fe fa62 	bl	80001d0 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d14:	e058      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4611      	mov	r1, r2
 8001d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d30:	4642      	mov	r2, r8
 8001d32:	464b      	mov	r3, r9
 8001d34:	f04f 0000 	mov.w	r0, #0
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	0159      	lsls	r1, r3, #5
 8001d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d42:	0150      	lsls	r0, r2, #5
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4641      	mov	r1, r8
 8001d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d68:	ebb2 040a 	subs.w	r4, r2, sl
 8001d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	00eb      	lsls	r3, r5, #3
 8001d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7e:	00e2      	lsls	r2, r4, #3
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	18e3      	adds	r3, r4, r3
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	eb45 0303 	adc.w	r3, r5, r3
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	028b      	lsls	r3, r1, #10
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da8:	4621      	mov	r1, r4
 8001daa:	028a      	lsls	r2, r1, #10
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db2:	2200      	movs	r2, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	61fa      	str	r2, [r7, #28]
 8001db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dbc:	f7fe fa08 	bl	80001d0 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3750      	adds	r7, #80	; 0x50
 8001df0:	46bd      	mov	sp, r7
 8001df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	007a1200 	.word	0x007a1200

08001e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	080066b0 	.word	0x080066b0

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e48:	f7ff ffdc 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0b5b      	lsrs	r3, r3, #13
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	080066b0 	.word	0x080066b0

08001e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e03f      	b.n	8001efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fe04 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fddf 	bl	8002a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b08a      	sub	sp, #40	; 0x28
 8001f0a:	af02      	add	r7, sp, #8
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d17c      	bne.n	8002020 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_UART_Transmit+0x2c>
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e075      	b.n	8002022 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_UART_Transmit+0x3e>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e06e      	b.n	8002022 <HAL_UART_Transmit+0x11c>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2221      	movs	r2, #33	; 0x21
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f5a:	f7fe ff65 	bl	8000e28 <HAL_GetTick>
 8001f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	88fa      	ldrh	r2, [r7, #6]
 8001f64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	88fa      	ldrh	r2, [r7, #6]
 8001f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f74:	d108      	bne.n	8001f88 <HAL_UART_Transmit+0x82>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d104      	bne.n	8001f88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	e003      	b.n	8001f90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f98:	e02a      	b.n	8001ff0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fb1f 	bl	80025e8 <UART_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e036      	b.n	8002022 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	3302      	adds	r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	e007      	b.n	8001fe2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1cf      	bne.n	8001f9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 faef 	bl	80025e8 <UART_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e006      	b.n	8002022 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
  }
}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	4613      	mov	r3, r2
 8002036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b20      	cmp	r3, #32
 8002042:	d11d      	bne.n	8002080 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_UART_Receive_IT+0x26>
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e016      	b.n	8002082 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_UART_Receive_IT+0x38>
 800205e:	2302      	movs	r3, #2
 8002060:	e00f      	b.n	8002082 <HAL_UART_Receive_IT+0x58>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	461a      	mov	r2, r3
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fb24 	bl	80026c4 <UART_Start_Receive_IT>
 800207c:	4603      	mov	r3, r0
 800207e:	e000      	b.n	8002082 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0ba      	sub	sp, #232	; 0xe8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80020ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_UART_IRQHandler+0x66>
 80020de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fc07 	bl	80028fe <UART_Receive_IT>
      return;
 80020f0:	e256      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80de 	beq.w	80022b8 <HAL_UART_IRQHandler+0x22c>
 80020fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d106      	bne.n	8002116 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800210c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80d1 	beq.w	80022b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0xae>
 8002122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_UART_IRQHandler+0xd2>
 8002146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f043 0202 	orr.w	r2, r3, #2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_UART_IRQHandler+0xf6>
 800216a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f043 0204 	orr.w	r2, r3, #4
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <HAL_UART_IRQHandler+0x126>
 800218e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800219a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0208 	orr.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 81ed 	beq.w	8002596 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_UART_IRQHandler+0x14e>
 80021c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fb92 	bl	80028fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_UART_IRQHandler+0x17a>
 80021fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d04f      	beq.n	80022a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa9a 	bl	8002740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	2b40      	cmp	r3, #64	; 0x40
 8002218:	d141      	bne.n	800229e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3314      	adds	r3, #20
 8002220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002228:	e853 3f00 	ldrex	r3, [r3]
 800222c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3314      	adds	r3, #20
 8002242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002246:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800225e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1d9      	bne.n	800221a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	2b00      	cmp	r3, #0
 800226c:	d013      	beq.n	8002296 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	4a7d      	ldr	r2, [pc, #500]	; (8002468 <HAL_UART_IRQHandler+0x3dc>)
 8002274:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe ff85 	bl	800118a <HAL_DMA_Abort_IT>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d016      	beq.n	80022b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002290:	4610      	mov	r0, r2
 8002292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002294:	e00e      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f990 	bl	80025bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229c:	e00a      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f98c 	bl	80025bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a4:	e006      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f988 	bl	80025bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80022b2:	e170      	b.n	8002596 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b4:	bf00      	nop
    return;
 80022b6:	e16e      	b.n	8002596 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f040 814a 	bne.w	8002556 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8143 	beq.w	8002556 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 813c 	beq.w	8002556 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	f040 80b4 	bne.w	800246c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8140 	beq.w	800259a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800231e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002322:	429a      	cmp	r2, r3
 8002324:	f080 8139 	bcs.w	800259a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800232e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233a:	f000 8088 	beq.w	800244e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800236a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800236e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002372:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002376:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800237a:	e841 2300 	strex	r3, r2, [r1]
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1d9      	bne.n	800233e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800239a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3314      	adds	r3, #20
 80023aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80023b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80023b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80023ba:	e841 2300 	strex	r3, r2, [r1]
 80023be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80023c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e1      	bne.n	800238a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3314      	adds	r3, #20
 80023cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023d0:	e853 3f00 	ldrex	r3, [r3]
 80023d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80023d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3314      	adds	r3, #20
 80023e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023f2:	e841 2300 	strex	r3, r2, [r1]
 80023f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80023f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e3      	bne.n	80023c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800241c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241e:	f023 0310 	bic.w	r3, r3, #16
 8002422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002430:	65ba      	str	r2, [r7, #88]	; 0x58
 8002432:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002434:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002438:	e841 2300 	strex	r3, r2, [r1]
 800243c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800243e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e3      	bne.n	800240c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe2e 	bl	80010aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002456:	b29b      	uxth	r3, r3
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b29b      	uxth	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8b6 	bl	80025d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002464:	e099      	b.n	800259a <HAL_UART_IRQHandler+0x50e>
 8002466:	bf00      	nop
 8002468:	08002807 	.word	0x08002807
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002474:	b29b      	uxth	r3, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 808b 	beq.w	800259e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8086 	beq.w	800259e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	e853 3f00 	ldrex	r3, [r3]
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	330c      	adds	r3, #12
 80024b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80024b6:	647a      	str	r2, [r7, #68]	; 0x44
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024be:	e841 2300 	strex	r3, r2, [r1]
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80024c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e3      	bne.n	8002492 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3314      	adds	r3, #20
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	e853 3f00 	ldrex	r3, [r3]
 80024d8:	623b      	str	r3, [r7, #32]
   return(result);
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3314      	adds	r3, #20
 80024ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024ee:	633a      	str	r2, [r7, #48]	; 0x30
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1e3      	bne.n	80024ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	e853 3f00 	ldrex	r3, [r3]
 800251e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0310 	bic.w	r3, r3, #16
 8002526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002534:	61fa      	str	r2, [r7, #28]
 8002536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002538:	69b9      	ldr	r1, [r7, #24]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	e841 2300 	strex	r3, r2, [r1]
 8002540:	617b      	str	r3, [r7, #20]
   return(result);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e3      	bne.n	8002510 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f83e 	bl	80025d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002554:	e023      	b.n	800259e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_UART_IRQHandler+0x4ea>
 8002562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f95d 	bl	800282e <UART_Transmit_IT>
    return;
 8002574:	e014      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00e      	beq.n	80025a0 <HAL_UART_IRQHandler+0x514>
 8002582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f99d 	bl	80028ce <UART_EndTransmit_IT>
    return;
 8002594:	e004      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
    return;
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
      return;
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
      return;
 800259e:	bf00      	nop
  }
}
 80025a0:	37e8      	adds	r7, #232	; 0xe8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop

080025a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b090      	sub	sp, #64	; 0x40
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f8:	e050      	b.n	800269c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d04c      	beq.n	800269c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0x30>
 8002608:	f7fe fc0e 	bl	8000e28 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002614:	429a      	cmp	r2, r3
 8002616:	d241      	bcs.n	800269c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002638:	637a      	str	r2, [r7, #52]	; 0x34
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800263e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002640:	e841 2300 	strex	r3, r2, [r1]
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e5      	bne.n	8002618 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3314      	adds	r3, #20
 8002652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	613b      	str	r3, [r7, #16]
   return(result);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800266c:	623a      	str	r2, [r7, #32]
 800266e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	69f9      	ldr	r1, [r7, #28]
 8002672:	6a3a      	ldr	r2, [r7, #32]
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	61bb      	str	r3, [r7, #24]
   return(result);
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e5      	bne.n	800264c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e00f      	b.n	80026bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d09f      	beq.n	80025fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3740      	adds	r7, #64	; 0x40
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2222      	movs	r2, #34	; 0x22
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002740:	b480      	push	{r7}
 8002742:	b095      	sub	sp, #84	; 0x54
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	e853 3f00 	ldrex	r3, [r3]
 8002756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002768:	643a      	str	r2, [r7, #64]	; 0x40
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800276e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002770:	e841 2300 	strex	r3, r2, [r1]
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e5      	bne.n	8002748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3314      	adds	r3, #20
 8002782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	61fb      	str	r3, [r7, #28]
   return(result);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3314      	adds	r3, #20
 800279a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800279c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e5      	bne.n	800277c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d119      	bne.n	80027ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	330c      	adds	r3, #12
 80027d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027d8:	61ba      	str	r2, [r7, #24]
 80027da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027dc:	6979      	ldr	r1, [r7, #20]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	e841 2300 	strex	r3, r2, [r1]
 80027e4:	613b      	str	r3, [r7, #16]
   return(result);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e5      	bne.n	80027b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027fa:	bf00      	nop
 80027fc:	3754      	adds	r7, #84	; 0x54
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff fecb 	bl	80025bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b21      	cmp	r3, #33	; 0x21
 8002840:	d13e      	bne.n	80028c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	d114      	bne.n	8002876 <UART_Transmit_IT+0x48>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d110      	bne.n	8002876 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002868:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	1c9a      	adds	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	621a      	str	r2, [r3, #32]
 8002874:	e008      	b.n	8002888 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6211      	str	r1, [r2, #32]
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29b      	uxth	r3, r3
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4619      	mov	r1, r3
 8002896:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10f      	bne.n	80028bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fe5a 	bl	80025a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b08c      	sub	sp, #48	; 0x30
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b22      	cmp	r3, #34	; 0x22
 8002910:	f040 80ab 	bne.w	8002a6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291c:	d117      	bne.n	800294e <UART_Receive_IT+0x50>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d113      	bne.n	800294e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800293c:	b29a      	uxth	r2, r3
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	1c9a      	adds	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
 800294c:	e026      	b.n	800299c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002960:	d007      	beq.n	8002972 <UART_Receive_IT+0x74>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <UART_Receive_IT+0x82>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e008      	b.n	8002992 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800298c:	b2da      	uxtb	r2, r3
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4619      	mov	r1, r3
 80029aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d15a      	bne.n	8002a66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0220 	bic.w	r2, r2, #32
 80029be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d135      	bne.n	8002a5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	613b      	str	r3, [r7, #16]
   return(result);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f023 0310 	bic.w	r3, r3, #16
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a16:	623a      	str	r2, [r7, #32]
 8002a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	69f9      	ldr	r1, [r7, #28]
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e5      	bne.n	80029f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d10a      	bne.n	8002a4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff fdbb 	bl	80025d0 <HAL_UARTEx_RxEventCallback>
 8002a5a:	e002      	b.n	8002a62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fd fd4b 	bl	80004f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e002      	b.n	8002a6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3730      	adds	r7, #48	; 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b0c0      	sub	sp, #256	; 0x100
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	ea40 0301 	orr.w	r3, r0, r1
 8002a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002acc:	f021 010c 	bic.w	r1, r1, #12
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ada:	430b      	orrs	r3, r1
 8002adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	6999      	ldr	r1, [r3, #24]
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	ea40 0301 	orr.w	r3, r0, r1
 8002afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b8f      	ldr	r3, [pc, #572]	; (8002d40 <UART_SetConfig+0x2cc>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d005      	beq.n	8002b14 <UART_SetConfig+0xa0>
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b8d      	ldr	r3, [pc, #564]	; (8002d44 <UART_SetConfig+0x2d0>)
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d104      	bne.n	8002b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff f996 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8002b18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b1c:	e003      	b.n	8002b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b1e:	f7ff f97d 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8002b22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	f040 810c 	bne.w	8002d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	1891      	adds	r1, r2, r2
 8002b4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b4e:	415b      	adcs	r3, r3
 8002b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b56:	4621      	mov	r1, r4
 8002b58:	eb12 0801 	adds.w	r8, r2, r1
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb43 0901 	adc.w	r9, r3, r1
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b76:	4690      	mov	r8, r2
 8002b78:	4699      	mov	r9, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	eb18 0303 	adds.w	r3, r8, r3
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b84:	462b      	mov	r3, r5
 8002b86:	eb49 0303 	adc.w	r3, r9, r3
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	18db      	adds	r3, r3, r3
 8002ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ba8:	4613      	mov	r3, r2
 8002baa:	eb42 0303 	adc.w	r3, r2, r3
 8002bae:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bb8:	f7fd fb0a 	bl	80001d0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	011c      	lsls	r4, r3, #4
 8002bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	1891      	adds	r1, r2, r2
 8002be2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002be4:	415b      	adcs	r3, r3
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bec:	4641      	mov	r1, r8
 8002bee:	eb12 0a01 	adds.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0c:	4692      	mov	sl, r2
 8002c0e:	469b      	mov	fp, r3
 8002c10:	4643      	mov	r3, r8
 8002c12:	eb1a 0303 	adds.w	r3, sl, r3
 8002c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	18db      	adds	r3, r3, r3
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3e:	4613      	mov	r3, r2
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
 8002c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c4e:	f7fd fabf 	bl	80001d0 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2264      	movs	r2, #100	; 0x64
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	1acb      	subs	r3, r1, r3
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002c70:	fba3 2302 	umull	r2, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c7c:	441c      	add	r4, r3
 8002c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	1891      	adds	r1, r2, r2
 8002c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	1851      	adds	r1, r2, r1
 8002ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	414b      	adcs	r3, r1
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cb8:	4659      	mov	r1, fp
 8002cba:	00cb      	lsls	r3, r1, #3
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	00ca      	lsls	r2, r1, #3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4642      	mov	r2, r8
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	eb42 0303 	adc.w	r3, r2, r3
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	18db      	adds	r3, r3, r3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d0a:	f7fd fa61 	bl	80001d0 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 0207 	and.w	r2, r3, #7
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d3c:	e105      	b.n	8002f4a <UART_SetConfig+0x4d6>
 8002d3e:	bf00      	nop
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40011400 	.word	0x40011400
 8002d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d5e:	4642      	mov	r2, r8
 8002d60:	464b      	mov	r3, r9
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	6239      	str	r1, [r7, #32]
 8002d66:	415b      	adcs	r3, r3
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d6e:	4641      	mov	r1, r8
 8002d70:	1854      	adds	r4, r2, r1
 8002d72:	4649      	mov	r1, r9
 8002d74:	eb43 0501 	adc.w	r5, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	00eb      	lsls	r3, r5, #3
 8002d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d86:	00e2      	lsls	r2, r4, #3
 8002d88:	4614      	mov	r4, r2
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	18e3      	adds	r3, r4, r3
 8002d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d94:	464b      	mov	r3, r9
 8002d96:	eb45 0303 	adc.w	r3, r5, r3
 8002d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002daa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dba:	4629      	mov	r1, r5
 8002dbc:	008b      	lsls	r3, r1, #2
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	008a      	lsls	r2, r1, #2
 8002dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dcc:	f7fd fa00 	bl	80001d0 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	011c      	lsls	r4, r3, #4
 8002dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	1891      	adds	r1, r2, r2
 8002df6:	61b9      	str	r1, [r7, #24]
 8002df8:	415b      	adcs	r3, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e00:	4641      	mov	r1, r8
 8002e02:	1851      	adds	r1, r2, r1
 8002e04:	6139      	str	r1, [r7, #16]
 8002e06:	4649      	mov	r1, r9
 8002e08:	414b      	adcs	r3, r1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e18:	4659      	mov	r1, fp
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e22:	4651      	mov	r1, sl
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e34:	464b      	mov	r3, r9
 8002e36:	460a      	mov	r2, r1
 8002e38:	eb42 0303 	adc.w	r3, r2, r3
 8002e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e58:	4649      	mov	r1, r9
 8002e5a:	008b      	lsls	r3, r1, #2
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e62:	4641      	mov	r1, r8
 8002e64:	008a      	lsls	r2, r1, #2
 8002e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e6a:	f7fd f9b1 	bl	80001d0 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002e74:	fba3 1302 	umull	r1, r3, r3, r2
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	2164      	movs	r1, #100	; 0x64
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	3332      	adds	r3, #50	; 0x32
 8002e86:	4a34      	ldr	r2, [pc, #208]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e92:	441c      	add	r4, r3
 8002e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e98:	2200      	movs	r2, #0
 8002e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e9c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	1891      	adds	r1, r2, r2
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	415b      	adcs	r3, r3
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	1851      	adds	r1, r2, r1
 8002eb6:	6039      	str	r1, [r7, #0]
 8002eb8:	4649      	mov	r1, r9
 8002eba:	414b      	adcs	r3, r1
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eca:	4659      	mov	r1, fp
 8002ecc:	00cb      	lsls	r3, r1, #3
 8002ece:	4651      	mov	r1, sl
 8002ed0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	00ca      	lsls	r2, r1, #3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	4603      	mov	r3, r0
 8002ede:	4642      	mov	r2, r8
 8002ee0:	189b      	adds	r3, r3, r2
 8002ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef8:	667a      	str	r2, [r7, #100]	; 0x64
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f06:	4649      	mov	r1, r9
 8002f08:	008b      	lsls	r3, r1, #2
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f10:	4641      	mov	r1, r8
 8002f12:	008a      	lsls	r2, r1, #2
 8002f14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f18:	f7fd f95a 	bl	80001d0 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002f22:	fba3 1302 	umull	r1, r3, r3, r2
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2164      	movs	r1, #100	; 0x64
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	3332      	adds	r3, #50	; 0x32
 8002f34:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	f003 020f 	and.w	r2, r3, #15
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4422      	add	r2, r4
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f50:	46bd      	mov	sp, r7
 8002f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f56:	bf00      	nop
 8002f58:	51eb851f 	.word	0x51eb851f

08002f5c <__NVIC_SetPriority>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	; (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	; (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f06f 0004 	mvn.w	r0, #4
 8002fba:	f7ff ffcf 	bl	8002f5c <__NVIC_SetPriority>
#endif
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fca:	f3ef 8305 	mrs	r3, IPSR
 8002fce:	603b      	str	r3, [r7, #0]
  return(result);
 8002fd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002fd6:	f06f 0305 	mvn.w	r3, #5
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	e00c      	b.n	8002ff8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <osKernelInitialize+0x44>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <osKernelInitialize+0x44>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	e002      	b.n	8002ff8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ff8:	687b      	ldr	r3, [r7, #4]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000158 	.word	0x20000158

0800300c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003012:	f3ef 8305 	mrs	r3, IPSR
 8003016:	603b      	str	r3, [r7, #0]
  return(result);
 8003018:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <osKernelStart+0x1a>
    stat = osErrorISR;
 800301e:	f06f 0305 	mvn.w	r3, #5
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	e010      	b.n	8003048 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <osKernelStart+0x48>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d109      	bne.n	8003042 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800302e:	f7ff ffbf 	bl	8002fb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <osKernelStart+0x48>)
 8003034:	2202      	movs	r2, #2
 8003036:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003038:	f001 f866 	bl	8004108 <vTaskStartScheduler>
      stat = osOK;
 800303c:	2300      	movs	r3, #0
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	e002      	b.n	8003048 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003048:	687b      	ldr	r3, [r7, #4]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000158 	.word	0x20000158

08003058 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	; 0x38
 800305c:	af04      	add	r7, sp, #16
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003068:	f3ef 8305 	mrs	r3, IPSR
 800306c:	617b      	str	r3, [r7, #20]
  return(result);
 800306e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003070:	2b00      	cmp	r3, #0
 8003072:	d17e      	bne.n	8003172 <osThreadNew+0x11a>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d07b      	beq.n	8003172 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800307e:	2318      	movs	r3, #24
 8003080:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d045      	beq.n	800311e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <osThreadNew+0x48>
        name = attr->name;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <osThreadNew+0x6e>
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b38      	cmp	r3, #56	; 0x38
 80030b8:	d805      	bhi.n	80030c6 <osThreadNew+0x6e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <osThreadNew+0x72>
        return (NULL);
 80030c6:	2300      	movs	r3, #0
 80030c8:	e054      	b.n	8003174 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00e      	beq.n	8003100 <osThreadNew+0xa8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b5b      	cmp	r3, #91	; 0x5b
 80030e8:	d90a      	bls.n	8003100 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <osThreadNew+0xa8>
        mem = 1;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e010      	b.n	8003122 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10c      	bne.n	8003122 <osThreadNew+0xca>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d108      	bne.n	8003122 <osThreadNew+0xca>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <osThreadNew+0xca>
          mem = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	e001      	b.n	8003122 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d110      	bne.n	800314a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003130:	9202      	str	r2, [sp, #8]
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6a3a      	ldr	r2, [r7, #32]
 800313c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fe0c 	bl	8003d5c <xTaskCreateStatic>
 8003144:	4603      	mov	r3, r0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	e013      	b.n	8003172 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d110      	bne.n	8003172 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	b29a      	uxth	r2, r3
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fe57 	bl	8003e16 <xTaskCreate>
 8003168:	4603      	mov	r3, r0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <osThreadNew+0x11a>
            hTask = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003172:	693b      	ldr	r3, [r7, #16]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3728      	adds	r7, #40	; 0x28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003184:	f3ef 8305 	mrs	r3, IPSR
 8003188:	60bb      	str	r3, [r7, #8]
  return(result);
 800318a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <osDelay+0x1c>
    stat = osErrorISR;
 8003190:	f06f 0305 	mvn.w	r3, #5
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e007      	b.n	80031a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 ff7c 	bl	80040a0 <vTaskDelay>
    }
  }

  return (stat);
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80031c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4a06      	ldr	r2, [pc, #24]	; (80031e4 <vApplicationGetIdleTaskMemory+0x30>)
 80031ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	601a      	str	r2, [r3, #0]
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	2000015c 	.word	0x2000015c
 80031e4:	200001b8 	.word	0x200001b8

080031e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a07      	ldr	r2, [pc, #28]	; (8003214 <vApplicationGetTimerTaskMemory+0x2c>)
 80031f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4a06      	ldr	r2, [pc, #24]	; (8003218 <vApplicationGetTimerTaskMemory+0x30>)
 80031fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003206:	601a      	str	r2, [r3, #0]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	200003b8 	.word	0x200003b8
 8003218:	20000414 	.word	0x20000414

0800321c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f103 0208 	add.w	r2, r3, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f103 0208 	add.w	r2, r3, #8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f103 0208 	add.w	r2, r3, #8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d103      	bne.n	80032de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e00c      	b.n	80032f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3308      	adds	r3, #8
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e002      	b.n	80032ec <vListInsert+0x2e>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d2f6      	bcs.n	80032e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	601a      	str	r2, [r3, #0]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6892      	ldr	r2, [r2, #8]
 8003346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6852      	ldr	r2, [r2, #4]
 8003350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d103      	bne.n	8003364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033ae:	f002 f851 	bl	8005454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	441a      	add	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	3b01      	subs	r3, #1
 80033e0:	68f9      	ldr	r1, [r7, #12]
 80033e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	441a      	add	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	22ff      	movs	r2, #255	; 0xff
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d114      	bne.n	800342e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01a      	beq.n	8003442 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3310      	adds	r3, #16
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f903 	bl	800461c <xTaskRemoveFromEventList>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d012      	beq.n	8003442 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <xQueueGenericReset+0xcc>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	e009      	b.n	8003442 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3310      	adds	r3, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fef2 	bl	800321c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff feed 	bl	800321c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003442:	f002 f837 	bl	80054b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	e000ed04 	.word	0xe000ed04

08003454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08e      	sub	sp, #56	; 0x38
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <xQueueGenericCreateStatic+0x52>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <xQueueGenericCreateStatic+0x56>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <xQueueGenericCreateStatic+0x58>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	623b      	str	r3, [r7, #32]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <xQueueGenericCreateStatic+0x7e>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <xQueueGenericCreateStatic+0x82>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <xQueueGenericCreateStatic+0x84>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	61fb      	str	r3, [r7, #28]
}
 80034ee:	bf00      	nop
 80034f0:	e7fe      	b.n	80034f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034f2:	2350      	movs	r3, #80	; 0x50
 80034f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b50      	cmp	r3, #80	; 0x50
 80034fa:	d00a      	beq.n	8003512 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	61bb      	str	r3, [r7, #24]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003512:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003526:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f805 	bl	8003544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800353c:	4618      	mov	r0, r3
 800353e:	3730      	adds	r7, #48	; 0x30
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e002      	b.n	8003566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003572:	2101      	movs	r1, #1
 8003574:	69b8      	ldr	r0, [r7, #24]
 8003576:	f7ff ff05 	bl	8003384 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08e      	sub	sp, #56	; 0x38
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800359a:	2300      	movs	r3, #0
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xQueueGenericSend+0x32>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <xQueueGenericSend+0x40>
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <xQueueGenericSend+0x44>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <xQueueGenericSend+0x46>
 80035d0:	2300      	movs	r3, #0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <xQueueGenericSend+0x60>
	__asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSend+0x6e>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSend+0x72>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSend+0x74>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericSend+0x8e>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	623b      	str	r3, [r7, #32]
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800361a:	f001 f9bd 	bl	8004998 <xTaskGetSchedulerState>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <xQueueGenericSend+0x9e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <xQueueGenericSend+0xa2>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xQueueGenericSend+0xa4>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xQueueGenericSend+0xbe>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	61fb      	str	r3, [r7, #28]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800364a:	f001 ff03 	bl	8005454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <xQueueGenericSend+0xd4>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d129      	bne.n	80036b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003666:	f000 fa0b 	bl	8003a80 <prvCopyDataToQueue>
 800366a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	3324      	adds	r3, #36	; 0x24
 8003678:	4618      	mov	r0, r3
 800367a:	f000 ffcf 	bl	800461c <xTaskRemoveFromEventList>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003684:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <xQueueGenericSend+0x1f8>)
 8003686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	e00a      	b.n	80036ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <xQueueGenericSend+0x1f8>)
 800369e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036ac:	f001 ff02 	bl	80054b4 <vPortExitCritical>
				return pdPASS;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e063      	b.n	800377c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036ba:	f001 fefb 	bl	80054b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	e05c      	b.n	800377c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 f809 	bl	80046e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036d6:	f001 feed 	bl	80054b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036da:	f000 fd7b 	bl	80041d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036de:	f001 feb9 	bl	8005454 <vPortEnterCritical>
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e8:	b25b      	sxtb	r3, r3
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d103      	bne.n	80036f8 <xQueueGenericSend+0x16c>
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036fe:	b25b      	sxtb	r3, r3
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d103      	bne.n	800370e <xQueueGenericSend+0x182>
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800370e:	f001 fed1 	bl	80054b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003712:	1d3a      	adds	r2, r7, #4
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fff8 	bl	8004710 <xTaskCheckForTimeOut>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d124      	bne.n	8003770 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003728:	f000 faa2 	bl	8003c70 <prvIsQueueFull>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d018      	beq.n	8003764 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	3310      	adds	r3, #16
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 ff1e 	bl	800457c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003742:	f000 fa2d 	bl	8003ba0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003746:	f000 fd53 	bl	80041f0 <xTaskResumeAll>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	f47f af7c 	bne.w	800364a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003752:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <xQueueGenericSend+0x1f8>)
 8003754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	e772      	b.n	800364a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003766:	f000 fa1b 	bl	8003ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800376a:	f000 fd41 	bl	80041f0 <xTaskResumeAll>
 800376e:	e76c      	b.n	800364a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003772:	f000 fa15 	bl	8003ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003776:	f000 fd3b 	bl	80041f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800377a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800377c:	4618      	mov	r0, r3
 800377e:	3738      	adds	r7, #56	; 0x38
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b090      	sub	sp, #64	; 0x40
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <xQueueGenericSendFromISR+0x3c>
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <xQueueGenericSendFromISR+0x40>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <xQueueGenericSendFromISR+0x42>
 80037c8:	2300      	movs	r3, #0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d103      	bne.n	80037f2 <xQueueGenericSendFromISR+0x6a>
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <xQueueGenericSendFromISR+0x6e>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <xQueueGenericSendFromISR+0x70>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	623b      	str	r3, [r7, #32]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003812:	f001 ff01 	bl	8005618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003816:	f3ef 8211 	mrs	r2, BASEPRI
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	61fa      	str	r2, [r7, #28]
 800382c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800382e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <xQueueGenericSendFromISR+0xbc>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d12f      	bne.n	80038a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800384a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800385a:	f000 f911 	bl	8003a80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800385e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d112      	bne.n	800388e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	2b00      	cmp	r3, #0
 800386e:	d016      	beq.n	800389e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	3324      	adds	r3, #36	; 0x24
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fed1 	bl	800461c <xTaskRemoveFromEventList>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e007      	b.n	800389e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800388e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003892:	3301      	adds	r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	b25a      	sxtb	r2, r3
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800389e:	2301      	movs	r3, #1
 80038a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80038a2:	e001      	b.n	80038a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3740      	adds	r7, #64	; 0x40
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	; 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <xQueueReceive+0x30>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	623b      	str	r3, [r7, #32]
}
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <xQueueReceive+0x3e>
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <xQueueReceive+0x42>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <xQueueReceive+0x44>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <xQueueReceive+0x5e>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	61fb      	str	r3, [r7, #28]
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800391e:	f001 f83b 	bl	8004998 <xTaskGetSchedulerState>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <xQueueReceive+0x6e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <xQueueReceive+0x72>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <xQueueReceive+0x74>
 8003932:	2300      	movs	r3, #0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <xQueueReceive+0x8e>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	61bb      	str	r3, [r7, #24]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800394e:	f001 fd81 	bl	8005454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01f      	beq.n	800399e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003962:	f000 f8f7 	bl	8003b54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	1e5a      	subs	r2, r3, #1
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00f      	beq.n	8003996 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	3310      	adds	r3, #16
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fe4e 	bl	800461c <xTaskRemoveFromEventList>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <xQueueReceive+0x1bc>)
 8003988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003996:	f001 fd8d 	bl	80054b4 <vPortExitCritical>
				return pdPASS;
 800399a:	2301      	movs	r3, #1
 800399c:	e069      	b.n	8003a72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039a4:	f001 fd86 	bl	80054b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e062      	b.n	8003a72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039b2:	f107 0310 	add.w	r3, r7, #16
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fe94 	bl	80046e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039c0:	f001 fd78 	bl	80054b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039c4:	f000 fc06 	bl	80041d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039c8:	f001 fd44 	bl	8005454 <vPortEnterCritical>
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d2:	b25b      	sxtb	r3, r3
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d103      	bne.n	80039e2 <xQueueReceive+0x122>
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d103      	bne.n	80039f8 <xQueueReceive+0x138>
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f8:	f001 fd5c 	bl	80054b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039fc:	1d3a      	adds	r2, r7, #4
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fe83 	bl	8004710 <xTaskCheckForTimeOut>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d123      	bne.n	8003a58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a12:	f000 f917 	bl	8003c44 <prvIsQueueEmpty>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d017      	beq.n	8003a4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	3324      	adds	r3, #36	; 0x24
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fda9 	bl	800457c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a2c:	f000 f8b8 	bl	8003ba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a30:	f000 fbde 	bl	80041f0 <xTaskResumeAll>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d189      	bne.n	800394e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <xQueueReceive+0x1bc>)
 8003a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	e780      	b.n	800394e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a4e:	f000 f8a7 	bl	8003ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a52:	f000 fbcd 	bl	80041f0 <xTaskResumeAll>
 8003a56:	e77a      	b.n	800394e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a5a:	f000 f8a1 	bl	8003ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a5e:	f000 fbc7 	bl	80041f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a64:	f000 f8ee 	bl	8003c44 <prvIsQueueEmpty>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f43f af6f 	beq.w	800394e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3730      	adds	r7, #48	; 0x30
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000ed04 	.word	0xe000ed04

08003a80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d14d      	bne.n	8003b42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff92 	bl	80049d4 <xTaskPriorityDisinherit>
 8003ab0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	e043      	b.n	8003b42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d119      	bne.n	8003af4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6858      	ldr	r0, [r3, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	f001 fff8 	bl	8005ac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d32b      	bcc.n	8003b42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e026      	b.n	8003b42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68d8      	ldr	r0, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	461a      	mov	r2, r3
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	f001 ffde 	bl	8005ac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	425b      	negs	r3, r3
 8003b0e:	441a      	add	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d207      	bcs.n	8003b30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	425b      	negs	r3, r3
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d105      	bne.n	8003b42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b4a:	697b      	ldr	r3, [r7, #20]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d018      	beq.n	8003b98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	441a      	add	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d303      	bcc.n	8003b88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68d9      	ldr	r1, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	461a      	mov	r2, r3
 8003b92:	6838      	ldr	r0, [r7, #0]
 8003b94:	f001 ff94 	bl	8005ac0 <memcpy>
	}
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ba8:	f001 fc54 	bl	8005454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bb4:	e011      	b.n	8003bda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d012      	beq.n	8003be4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3324      	adds	r3, #36	; 0x24
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fd2a 	bl	800461c <xTaskRemoveFromEventList>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bce:	f000 fe01 	bl	80047d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	dce9      	bgt.n	8003bb6 <prvUnlockQueue+0x16>
 8003be2:	e000      	b.n	8003be6 <prvUnlockQueue+0x46>
					break;
 8003be4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	22ff      	movs	r2, #255	; 0xff
 8003bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bee:	f001 fc61 	bl	80054b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bf2:	f001 fc2f 	bl	8005454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bfe:	e011      	b.n	8003c24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d012      	beq.n	8003c2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3310      	adds	r3, #16
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fd05 	bl	800461c <xTaskRemoveFromEventList>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c18:	f000 fddc 	bl	80047d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c1c:	7bbb      	ldrb	r3, [r7, #14]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	dce9      	bgt.n	8003c00 <prvUnlockQueue+0x60>
 8003c2c:	e000      	b.n	8003c30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	22ff      	movs	r2, #255	; 0xff
 8003c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c38:	f001 fc3c 	bl	80054b4 <vPortExitCritical>
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c4c:	f001 fc02 	bl	8005454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e001      	b.n	8003c62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c62:	f001 fc27 	bl	80054b4 <vPortExitCritical>

	return xReturn;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c78:	f001 fbec 	bl	8005454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d102      	bne.n	8003c8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e001      	b.n	8003c92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c92:	f001 fc0f 	bl	80054b4 <vPortExitCritical>

	return xReturn;
 8003c96:	68fb      	ldr	r3, [r7, #12]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e014      	b.n	8003cda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cb0:	4a0f      	ldr	r2, [pc, #60]	; (8003cf0 <vQueueAddToRegistry+0x50>)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cbc:	490c      	ldr	r1, [pc, #48]	; (8003cf0 <vQueueAddToRegistry+0x50>)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <vQueueAddToRegistry+0x50>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cd2:	e006      	b.n	8003ce2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b07      	cmp	r3, #7
 8003cde:	d9e7      	bls.n	8003cb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000814 	.word	0x20000814

08003cf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d04:	f001 fba6 	bl	8005454 <vPortEnterCritical>
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d0e:	b25b      	sxtb	r3, r3
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d103      	bne.n	8003d1e <vQueueWaitForMessageRestricted+0x2a>
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d24:	b25b      	sxtb	r3, r3
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d103      	bne.n	8003d34 <vQueueWaitForMessageRestricted+0x40>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d34:	f001 fbbe 	bl	80054b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	3324      	adds	r3, #36	; 0x24
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fc3b 	bl	80045c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d4e:	6978      	ldr	r0, [r7, #20]
 8003d50:	f7ff ff26 	bl	8003ba0 <prvUnlockQueue>
	}
 8003d54:	bf00      	nop
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08e      	sub	sp, #56	; 0x38
 8003d60:	af04      	add	r7, sp, #16
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	623b      	str	r3, [r7, #32]
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	61fb      	str	r3, [r7, #28]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003da2:	235c      	movs	r3, #92	; 0x5c
 8003da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b5c      	cmp	r3, #92	; 0x5c
 8003daa:	d00a      	beq.n	8003dc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	61bb      	str	r3, [r7, #24]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003dc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01e      	beq.n	8003e08 <xTaskCreateStatic+0xac>
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003de2:	2300      	movs	r3, #0
 8003de4:	9303      	str	r3, [sp, #12]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	9302      	str	r3, [sp, #8]
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f850 	bl	8003ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e02:	f000 f8dd 	bl	8003fc0 <prvAddNewTaskToReadyList>
 8003e06:	e001      	b.n	8003e0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e0c:	697b      	ldr	r3, [r7, #20]
	}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3728      	adds	r7, #40	; 0x28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b08c      	sub	sp, #48	; 0x30
 8003e1a:	af04      	add	r7, sp, #16
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 fc34 	bl	8005698 <pvPortMalloc>
 8003e30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e38:	205c      	movs	r0, #92	; 0x5c
 8003e3a:	f001 fc2d 	bl	8005698 <pvPortMalloc>
 8003e3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e4c:	e005      	b.n	8003e5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e4e:	6978      	ldr	r0, [r7, #20]
 8003e50:	f001 fcee 	bl	8005830 <vPortFree>
 8003e54:	e001      	b.n	8003e5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d017      	beq.n	8003e90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e68:	88fa      	ldrh	r2, [r7, #6]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	9303      	str	r3, [sp, #12]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	9302      	str	r3, [sp, #8]
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f80e 	bl	8003ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e84:	69f8      	ldr	r0, [r7, #28]
 8003e86:	f000 f89b 	bl	8003fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	e002      	b.n	8003e96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295
 8003e94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e96:	69bb      	ldr	r3, [r7, #24]
	}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	21a5      	movs	r1, #165	; 0xa5
 8003eba:	f001 fe0f 	bl	8005adc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	617b      	str	r3, [r7, #20]
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01f      	beq.n	8003f3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e012      	b.n	8003f2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	7819      	ldrb	r1, [r3, #0]
 8003f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	4413      	add	r3, r2
 8003f12:	3334      	adds	r3, #52	; 0x34
 8003f14:	460a      	mov	r2, r1
 8003f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2b0f      	cmp	r3, #15
 8003f2e:	d9e9      	bls.n	8003f04 <prvInitialiseNewTask+0x64>
 8003f30:	e000      	b.n	8003f34 <prvInitialiseNewTask+0x94>
			{
				break;
 8003f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f3c:	e003      	b.n	8003f46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	2b37      	cmp	r3, #55	; 0x37
 8003f4a:	d901      	bls.n	8003f50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f4c:	2337      	movs	r3, #55	; 0x37
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	2200      	movs	r2, #0
 8003f60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f978 	bl	800325c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	3318      	adds	r3, #24
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff f973 	bl	800325c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	2200      	movs	r2, #0
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	68f9      	ldr	r1, [r7, #12]
 8003f9e:	69b8      	ldr	r0, [r7, #24]
 8003fa0:	f001 f928 	bl	80051f4 <pxPortInitialiseStack>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fb6:	bf00      	nop
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fc8:	f001 fa44 	bl	8005454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <prvAddNewTaskToReadyList+0xc4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	4a2c      	ldr	r2, [pc, #176]	; (8004084 <prvAddNewTaskToReadyList+0xc4>)
 8003fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <prvAddNewTaskToReadyList+0xc8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fde:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <prvAddNewTaskToReadyList+0xc8>)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fe4:	4b27      	ldr	r3, [pc, #156]	; (8004084 <prvAddNewTaskToReadyList+0xc4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d110      	bne.n	800400e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fec:	f000 fc16 	bl	800481c <prvInitialiseTaskLists>
 8003ff0:	e00d      	b.n	800400e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <prvAddNewTaskToReadyList+0xcc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ffa:	4b23      	ldr	r3, [pc, #140]	; (8004088 <prvAddNewTaskToReadyList+0xc8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	429a      	cmp	r2, r3
 8004006:	d802      	bhi.n	800400e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <prvAddNewTaskToReadyList+0xc8>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <prvAddNewTaskToReadyList+0xd0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <prvAddNewTaskToReadyList+0xd0>)
 8004016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <prvAddNewTaskToReadyList+0xd0>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <prvAddNewTaskToReadyList+0xd4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d903      	bls.n	8004034 <prvAddNewTaskToReadyList+0x74>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <prvAddNewTaskToReadyList+0xd4>)
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <prvAddNewTaskToReadyList+0xd8>)
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f7ff f913 	bl	8003276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004050:	f001 fa30 	bl	80054b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004054:	4b0d      	ldr	r3, [pc, #52]	; (800408c <prvAddNewTaskToReadyList+0xcc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00e      	beq.n	800407a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <prvAddNewTaskToReadyList+0xc8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	429a      	cmp	r2, r3
 8004068:	d207      	bcs.n	800407a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <prvAddNewTaskToReadyList+0xdc>)
 800406c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000d28 	.word	0x20000d28
 8004088:	20000854 	.word	0x20000854
 800408c:	20000d34 	.word	0x20000d34
 8004090:	20000d44 	.word	0x20000d44
 8004094:	20000d30 	.word	0x20000d30
 8004098:	20000858 	.word	0x20000858
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d017      	beq.n	80040e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <vTaskDelay+0x60>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <vTaskDelay+0x30>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	60bb      	str	r3, [r7, #8]
}
 80040cc:	bf00      	nop
 80040ce:	e7fe      	b.n	80040ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040d0:	f000 f880 	bl	80041d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040d4:	2100      	movs	r1, #0
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fcea 	bl	8004ab0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040dc:	f000 f888 	bl	80041f0 <xTaskResumeAll>
 80040e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <vTaskDelay+0x64>)
 80040ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000d50 	.word	0x20000d50
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004116:	463a      	mov	r2, r7
 8004118:	1d39      	adds	r1, r7, #4
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff f848 	bl	80031b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	9202      	str	r2, [sp, #8]
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	2300      	movs	r3, #0
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	2300      	movs	r3, #0
 8004134:	460a      	mov	r2, r1
 8004136:	4921      	ldr	r1, [pc, #132]	; (80041bc <vTaskStartScheduler+0xb4>)
 8004138:	4821      	ldr	r0, [pc, #132]	; (80041c0 <vTaskStartScheduler+0xb8>)
 800413a:	f7ff fe0f 	bl	8003d5c <xTaskCreateStatic>
 800413e:	4603      	mov	r3, r0
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <vTaskStartScheduler+0xbc>)
 8004142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <vTaskStartScheduler+0xbc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800414c:	2301      	movs	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	e001      	b.n	8004156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d102      	bne.n	8004162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800415c:	f000 fcfc 	bl	8004b58 <xTimerCreateTimerTask>
 8004160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d116      	bne.n	8004196 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	613b      	str	r3, [r7, #16]
}
 800417a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <vTaskStartScheduler+0xc0>)
 800417e:	f04f 32ff 	mov.w	r2, #4294967295
 8004182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <vTaskStartScheduler+0xc4>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800418a:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <vTaskStartScheduler+0xc8>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004190:	f001 f8be 	bl	8005310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004194:	e00e      	b.n	80041b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d10a      	bne.n	80041b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	60fb      	str	r3, [r7, #12]
}
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <vTaskStartScheduler+0xaa>
}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	08006640 	.word	0x08006640
 80041c0:	080047ed 	.word	0x080047ed
 80041c4:	20000d4c 	.word	0x20000d4c
 80041c8:	20000d48 	.word	0x20000d48
 80041cc:	20000d34 	.word	0x20000d34
 80041d0:	20000d2c 	.word	0x20000d2c

080041d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <vTaskSuspendAll+0x18>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	4a03      	ldr	r2, [pc, #12]	; (80041ec <vTaskSuspendAll+0x18>)
 80041e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	20000d50 	.word	0x20000d50

080041f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041fe:	4b42      	ldr	r3, [pc, #264]	; (8004308 <xTaskResumeAll+0x118>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <xTaskResumeAll+0x2c>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	603b      	str	r3, [r7, #0]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800421c:	f001 f91a 	bl	8005454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004220:	4b39      	ldr	r3, [pc, #228]	; (8004308 <xTaskResumeAll+0x118>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3b01      	subs	r3, #1
 8004226:	4a38      	ldr	r2, [pc, #224]	; (8004308 <xTaskResumeAll+0x118>)
 8004228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800422a:	4b37      	ldr	r3, [pc, #220]	; (8004308 <xTaskResumeAll+0x118>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d162      	bne.n	80042f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004232:	4b36      	ldr	r3, [pc, #216]	; (800430c <xTaskResumeAll+0x11c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d05e      	beq.n	80042f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800423a:	e02f      	b.n	800429c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423c:	4b34      	ldr	r3, [pc, #208]	; (8004310 <xTaskResumeAll+0x120>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3318      	adds	r3, #24
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff f871 	bl	8003330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3304      	adds	r3, #4
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff f86c 	bl	8003330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <xTaskResumeAll+0x124>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d903      	bls.n	800426c <xTaskResumeAll+0x7c>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a2a      	ldr	r2, [pc, #168]	; (8004314 <xTaskResumeAll+0x124>)
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4a27      	ldr	r2, [pc, #156]	; (8004318 <xTaskResumeAll+0x128>)
 800427a:	441a      	add	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f7fe fff7 	bl	8003276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4b23      	ldr	r3, [pc, #140]	; (800431c <xTaskResumeAll+0x12c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <xTaskResumeAll+0x130>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800429c:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <xTaskResumeAll+0x120>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1cb      	bne.n	800423c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042aa:	f000 fb55 	bl	8004958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <xTaskResumeAll+0x134>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d010      	beq.n	80042dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042ba:	f000 f847 	bl	800434c <xTaskIncrementTick>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042c4:	4b16      	ldr	r3, [pc, #88]	; (8004320 <xTaskResumeAll+0x130>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f1      	bne.n	80042ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80042d6:	4b13      	ldr	r3, [pc, #76]	; (8004324 <xTaskResumeAll+0x134>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042dc:	4b10      	ldr	r3, [pc, #64]	; (8004320 <xTaskResumeAll+0x130>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <xTaskResumeAll+0x138>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042f8:	f001 f8dc 	bl	80054b4 <vPortExitCritical>

	return xAlreadyYielded;
 80042fc:	68bb      	ldr	r3, [r7, #8]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000d50 	.word	0x20000d50
 800430c:	20000d28 	.word	0x20000d28
 8004310:	20000ce8 	.word	0x20000ce8
 8004314:	20000d30 	.word	0x20000d30
 8004318:	20000858 	.word	0x20000858
 800431c:	20000854 	.word	0x20000854
 8004320:	20000d3c 	.word	0x20000d3c
 8004324:	20000d38 	.word	0x20000d38
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <xTaskGetTickCount+0x1c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004338:	687b      	ldr	r3, [r7, #4]
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000d2c 	.word	0x20000d2c

0800434c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <xTaskIncrementTick+0x148>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 808f 	bne.w	800447e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004360:	4b4d      	ldr	r3, [pc, #308]	; (8004498 <xTaskIncrementTick+0x14c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004368:	4a4b      	ldr	r2, [pc, #300]	; (8004498 <xTaskIncrementTick+0x14c>)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d120      	bne.n	80043b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004374:	4b49      	ldr	r3, [pc, #292]	; (800449c <xTaskIncrementTick+0x150>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <xTaskIncrementTick+0x48>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	603b      	str	r3, [r7, #0]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <xTaskIncrementTick+0x46>
 8004394:	4b41      	ldr	r3, [pc, #260]	; (800449c <xTaskIncrementTick+0x150>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <xTaskIncrementTick+0x154>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a3f      	ldr	r2, [pc, #252]	; (800449c <xTaskIncrementTick+0x150>)
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4a3f      	ldr	r2, [pc, #252]	; (80044a0 <xTaskIncrementTick+0x154>)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <xTaskIncrementTick+0x158>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	4a3d      	ldr	r2, [pc, #244]	; (80044a4 <xTaskIncrementTick+0x158>)
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	f000 fad1 	bl	8004958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043b6:	4b3c      	ldr	r3, [pc, #240]	; (80044a8 <xTaskIncrementTick+0x15c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d349      	bcc.n	8004454 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <xTaskIncrementTick+0x150>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <xTaskIncrementTick+0x15c>)
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	601a      	str	r2, [r3, #0]
					break;
 80043d2:	e03f      	b.n	8004454 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d4:	4b31      	ldr	r3, [pc, #196]	; (800449c <xTaskIncrementTick+0x150>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d203      	bcs.n	80043f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043ec:	4a2e      	ldr	r2, [pc, #184]	; (80044a8 <xTaskIncrementTick+0x15c>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043f2:	e02f      	b.n	8004454 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe ff99 	bl	8003330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	3318      	adds	r3, #24
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe ff90 	bl	8003330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	4b25      	ldr	r3, [pc, #148]	; (80044ac <xTaskIncrementTick+0x160>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d903      	bls.n	8004424 <xTaskIncrementTick+0xd8>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	4a22      	ldr	r2, [pc, #136]	; (80044ac <xTaskIncrementTick+0x160>)
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <xTaskIncrementTick+0x164>)
 8004432:	441a      	add	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f7fe ff1b 	bl	8003276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <xTaskIncrementTick+0x168>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	429a      	cmp	r2, r3
 800444c:	d3b8      	bcc.n	80043c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800444e:	2301      	movs	r3, #1
 8004450:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004452:	e7b5      	b.n	80043c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <xTaskIncrementTick+0x168>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	4915      	ldr	r1, [pc, #84]	; (80044b0 <xTaskIncrementTick+0x164>)
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d901      	bls.n	8004470 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800446c:	2301      	movs	r3, #1
 800446e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <xTaskIncrementTick+0x16c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004478:	2301      	movs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e004      	b.n	8004488 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <xTaskIncrementTick+0x170>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <xTaskIncrementTick+0x170>)
 8004486:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004488:	697b      	ldr	r3, [r7, #20]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000d50 	.word	0x20000d50
 8004498:	20000d2c 	.word	0x20000d2c
 800449c:	20000ce0 	.word	0x20000ce0
 80044a0:	20000ce4 	.word	0x20000ce4
 80044a4:	20000d40 	.word	0x20000d40
 80044a8:	20000d48 	.word	0x20000d48
 80044ac:	20000d30 	.word	0x20000d30
 80044b0:	20000858 	.word	0x20000858
 80044b4:	20000854 	.word	0x20000854
 80044b8:	20000d3c 	.word	0x20000d3c
 80044bc:	20000d38 	.word	0x20000d38

080044c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <vTaskSwitchContext+0xa8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044ce:	4b27      	ldr	r3, [pc, #156]	; (800456c <vTaskSwitchContext+0xac>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044d4:	e041      	b.n	800455a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80044d6:	4b25      	ldr	r3, [pc, #148]	; (800456c <vTaskSwitchContext+0xac>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044dc:	4b24      	ldr	r3, [pc, #144]	; (8004570 <vTaskSwitchContext+0xb0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e010      	b.n	8004506 <vTaskSwitchContext+0x46>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <vTaskSwitchContext+0x40>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	607b      	str	r3, [r7, #4]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <vTaskSwitchContext+0x3e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	491b      	ldr	r1, [pc, #108]	; (8004574 <vTaskSwitchContext+0xb4>)
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0e4      	beq.n	80044e4 <vTaskSwitchContext+0x24>
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4a13      	ldr	r2, [pc, #76]	; (8004574 <vTaskSwitchContext+0xb4>)
 8004526:	4413      	add	r3, r2
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3308      	adds	r3, #8
 800453c:	429a      	cmp	r2, r3
 800453e:	d104      	bne.n	800454a <vTaskSwitchContext+0x8a>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <vTaskSwitchContext+0xb8>)
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4a06      	ldr	r2, [pc, #24]	; (8004570 <vTaskSwitchContext+0xb0>)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6013      	str	r3, [r2, #0]
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000d50 	.word	0x20000d50
 800456c:	20000d3c 	.word	0x20000d3c
 8004570:	20000d30 	.word	0x20000d30
 8004574:	20000858 	.word	0x20000858
 8004578:	20000854 	.word	0x20000854

0800457c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <vTaskPlaceOnEventList+0x44>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3318      	adds	r3, #24
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fe fe87 	bl	80032be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045b0:	2101      	movs	r1, #1
 80045b2:	6838      	ldr	r0, [r7, #0]
 80045b4:	f000 fa7c 	bl	8004ab0 <prvAddCurrentTaskToDelayedList>
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000854 	.word	0x20000854

080045c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	617b      	str	r3, [r7, #20]
}
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <vTaskPlaceOnEventListRestricted+0x54>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3318      	adds	r3, #24
 80045f2:	4619      	mov	r1, r3
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7fe fe3e 	bl	8003276 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004600:	f04f 33ff 	mov.w	r3, #4294967295
 8004604:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	68b8      	ldr	r0, [r7, #8]
 800460a:	f000 fa51 	bl	8004ab0 <prvAddCurrentTaskToDelayedList>
	}
 800460e:	bf00      	nop
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000854 	.word	0x20000854

0800461c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60fb      	str	r3, [r7, #12]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3318      	adds	r3, #24
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fe6f 	bl	8003330 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004652:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <xTaskRemoveFromEventList+0xb0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11d      	bne.n	8004696 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3304      	adds	r3, #4
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fe66 	bl	8003330 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <xTaskRemoveFromEventList+0xb4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d903      	bls.n	8004678 <xTaskRemoveFromEventList+0x5c>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <xTaskRemoveFromEventList+0xb4>)
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <xTaskRemoveFromEventList+0xb8>)
 8004686:	441a      	add	r2, r3
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f7fe fdf1 	bl	8003276 <vListInsertEnd>
 8004694:	e005      	b.n	80046a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3318      	adds	r3, #24
 800469a:	4619      	mov	r1, r3
 800469c:	480e      	ldr	r0, [pc, #56]	; (80046d8 <xTaskRemoveFromEventList+0xbc>)
 800469e:	f7fe fdea 	bl	8003276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <xTaskRemoveFromEventList+0xc0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d905      	bls.n	80046bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <xTaskRemoveFromEventList+0xc4>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e001      	b.n	80046c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046c0:	697b      	ldr	r3, [r7, #20]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000d50 	.word	0x20000d50
 80046d0:	20000d30 	.word	0x20000d30
 80046d4:	20000858 	.word	0x20000858
 80046d8:	20000ce8 	.word	0x20000ce8
 80046dc:	20000854 	.word	0x20000854
 80046e0:	20000d3c 	.word	0x20000d3c

080046e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <vTaskInternalSetTimeOutState+0x24>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <vTaskInternalSetTimeOutState+0x28>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	605a      	str	r2, [r3, #4]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	20000d40 	.word	0x20000d40
 800470c:	20000d2c 	.word	0x20000d2c

08004710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	613b      	str	r3, [r7, #16]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60fb      	str	r3, [r7, #12]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004752:	f000 fe7f 	bl	8005454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <xTaskCheckForTimeOut+0xbc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d102      	bne.n	8004776 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	e023      	b.n	80047be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <xTaskCheckForTimeOut+0xc0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d007      	beq.n	8004792 <xTaskCheckForTimeOut+0x82>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d302      	bcc.n	8004792 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e015      	b.n	80047be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	429a      	cmp	r2, r3
 800479a:	d20b      	bcs.n	80047b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff9b 	bl	80046e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e004      	b.n	80047be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047be:	f000 fe79 	bl	80054b4 <vPortExitCritical>

	return xReturn;
 80047c2:	69fb      	ldr	r3, [r7, #28]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000d2c 	.word	0x20000d2c
 80047d0:	20000d40 	.word	0x20000d40

080047d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <vTaskMissedYield+0x14>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	20000d3c 	.word	0x20000d3c

080047ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047f4:	f000 f852 	bl	800489c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <prvIdleTask+0x28>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d9f9      	bls.n	80047f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <prvIdleTask+0x2c>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004810:	e7f0      	b.n	80047f4 <prvIdleTask+0x8>
 8004812:	bf00      	nop
 8004814:	20000858 	.word	0x20000858
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	e00c      	b.n	8004842 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4a12      	ldr	r2, [pc, #72]	; (800487c <prvInitialiseTaskLists+0x60>)
 8004834:	4413      	add	r3, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fcf0 	bl	800321c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3301      	adds	r3, #1
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b37      	cmp	r3, #55	; 0x37
 8004846:	d9ef      	bls.n	8004828 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004848:	480d      	ldr	r0, [pc, #52]	; (8004880 <prvInitialiseTaskLists+0x64>)
 800484a:	f7fe fce7 	bl	800321c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800484e:	480d      	ldr	r0, [pc, #52]	; (8004884 <prvInitialiseTaskLists+0x68>)
 8004850:	f7fe fce4 	bl	800321c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004854:	480c      	ldr	r0, [pc, #48]	; (8004888 <prvInitialiseTaskLists+0x6c>)
 8004856:	f7fe fce1 	bl	800321c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800485a:	480c      	ldr	r0, [pc, #48]	; (800488c <prvInitialiseTaskLists+0x70>)
 800485c:	f7fe fcde 	bl	800321c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004860:	480b      	ldr	r0, [pc, #44]	; (8004890 <prvInitialiseTaskLists+0x74>)
 8004862:	f7fe fcdb 	bl	800321c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <prvInitialiseTaskLists+0x78>)
 8004868:	4a05      	ldr	r2, [pc, #20]	; (8004880 <prvInitialiseTaskLists+0x64>)
 800486a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <prvInitialiseTaskLists+0x7c>)
 800486e:	4a05      	ldr	r2, [pc, #20]	; (8004884 <prvInitialiseTaskLists+0x68>)
 8004870:	601a      	str	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000858 	.word	0x20000858
 8004880:	20000cb8 	.word	0x20000cb8
 8004884:	20000ccc 	.word	0x20000ccc
 8004888:	20000ce8 	.word	0x20000ce8
 800488c:	20000cfc 	.word	0x20000cfc
 8004890:	20000d14 	.word	0x20000d14
 8004894:	20000ce0 	.word	0x20000ce0
 8004898:	20000ce4 	.word	0x20000ce4

0800489c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048a2:	e019      	b.n	80048d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048a4:	f000 fdd6 	bl	8005454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a8:	4b10      	ldr	r3, [pc, #64]	; (80048ec <prvCheckTasksWaitingTermination+0x50>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fd3b 	bl	8003330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <prvCheckTasksWaitingTermination+0x54>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3b01      	subs	r3, #1
 80048c0:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <prvCheckTasksWaitingTermination+0x54>)
 80048c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <prvCheckTasksWaitingTermination+0x58>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <prvCheckTasksWaitingTermination+0x58>)
 80048cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048ce:	f000 fdf1 	bl	80054b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f810 	bl	80048f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <prvCheckTasksWaitingTermination+0x58>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e1      	bne.n	80048a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000cfc 	.word	0x20000cfc
 80048f0:	20000d28 	.word	0x20000d28
 80048f4:	20000d10 	.word	0x20000d10

080048f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004906:	2b00      	cmp	r3, #0
 8004908:	d108      	bne.n	800491c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	4618      	mov	r0, r3
 8004910:	f000 ff8e 	bl	8005830 <vPortFree>
				vPortFree( pxTCB );
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 ff8b 	bl	8005830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800491a:	e018      	b.n	800494e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004922:	2b01      	cmp	r3, #1
 8004924:	d103      	bne.n	800492e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 ff82 	bl	8005830 <vPortFree>
	}
 800492c:	e00f      	b.n	800494e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004934:	2b02      	cmp	r3, #2
 8004936:	d00a      	beq.n	800494e <prvDeleteTCB+0x56>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	60fb      	str	r3, [r7, #12]
}
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <prvDeleteTCB+0x54>
	}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495e:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <prvResetNextTaskUnblockTime+0x38>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <prvResetNextTaskUnblockTime+0x3c>)
 800496a:	f04f 32ff 	mov.w	r2, #4294967295
 800496e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004970:	e008      	b.n	8004984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004972:	4b07      	ldr	r3, [pc, #28]	; (8004990 <prvResetNextTaskUnblockTime+0x38>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a04      	ldr	r2, [pc, #16]	; (8004994 <prvResetNextTaskUnblockTime+0x3c>)
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	20000ce0 	.word	0x20000ce0
 8004994:	20000d48 	.word	0x20000d48

08004998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <xTaskGetSchedulerState+0x34>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049a6:	2301      	movs	r3, #1
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	e008      	b.n	80049be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <xTaskGetSchedulerState+0x38>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049b4:	2302      	movs	r3, #2
 80049b6:	607b      	str	r3, [r7, #4]
 80049b8:	e001      	b.n	80049be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049ba:	2300      	movs	r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049be:	687b      	ldr	r3, [r7, #4]
	}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	20000d34 	.word	0x20000d34
 80049d0:	20000d50 	.word	0x20000d50

080049d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d056      	beq.n	8004a98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049ea:	4b2e      	ldr	r3, [pc, #184]	; (8004aa4 <xTaskPriorityDisinherit+0xd0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d00a      	beq.n	8004a0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60fb      	str	r3, [r7, #12]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	60bb      	str	r3, [r7, #8]
}
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2c:	1e5a      	subs	r2, r3, #1
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d02c      	beq.n	8004a98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d128      	bne.n	8004a98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fc70 	bl	8003330 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <xTaskPriorityDisinherit+0xd4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d903      	bls.n	8004a78 <xTaskPriorityDisinherit+0xa4>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <xTaskPriorityDisinherit+0xd4>)
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4a09      	ldr	r2, [pc, #36]	; (8004aac <xTaskPriorityDisinherit+0xd8>)
 8004a86:	441a      	add	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f7fe fbf1 	bl	8003276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a98:	697b      	ldr	r3, [r7, #20]
	}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000854 	.word	0x20000854
 8004aa8:	20000d30 	.word	0x20000d30
 8004aac:	20000858 	.word	0x20000858

08004ab0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aba:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <prvAddCurrentTaskToDelayedList+0x90>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac0:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fc32 	bl	8003330 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d10a      	bne.n	8004aea <prvAddCurrentTaskToDelayedList+0x3a>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ada:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4819      	ldr	r0, [pc, #100]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ae4:	f7fe fbc7 	bl	8003276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ae8:	e026      	b.n	8004b38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004af2:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d209      	bcs.n	8004b16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe fbd5 	bl	80032be <vListInsert>
}
 8004b14:	e010      	b.n	8004b38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f7fe fbcb 	bl	80032be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d202      	bcs.n	8004b38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b32:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000d2c 	.word	0x20000d2c
 8004b44:	20000854 	.word	0x20000854
 8004b48:	20000d14 	.word	0x20000d14
 8004b4c:	20000ce4 	.word	0x20000ce4
 8004b50:	20000ce0 	.word	0x20000ce0
 8004b54:	20000d48 	.word	0x20000d48

08004b58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b62:	f000 fb07 	bl	8005174 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b66:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <xTimerCreateTimerTask+0x80>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d021      	beq.n	8004bb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b76:	1d3a      	adds	r2, r7, #4
 8004b78:	f107 0108 	add.w	r1, r7, #8
 8004b7c:	f107 030c 	add.w	r3, r7, #12
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fb31 	bl	80031e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	9202      	str	r2, [sp, #8]
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	2302      	movs	r3, #2
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	460a      	mov	r2, r1
 8004b98:	4910      	ldr	r1, [pc, #64]	; (8004bdc <xTimerCreateTimerTask+0x84>)
 8004b9a:	4811      	ldr	r0, [pc, #68]	; (8004be0 <xTimerCreateTimerTask+0x88>)
 8004b9c:	f7ff f8de 	bl	8003d5c <xTaskCreateStatic>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <xTimerCreateTimerTask+0x8c>)
 8004ba4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <xTimerCreateTimerTask+0x8c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	613b      	str	r3, [r7, #16]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bce:	697b      	ldr	r3, [r7, #20]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000d84 	.word	0x20000d84
 8004bdc:	08006648 	.word	0x08006648
 8004be0:	08004d1d 	.word	0x08004d1d
 8004be4:	20000d88 	.word	0x20000d88

08004be8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	; 0x28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	623b      	str	r3, [r7, #32]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <xTimerGenericCommand+0x98>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02a      	beq.n	8004c74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b05      	cmp	r3, #5
 8004c2e:	dc18      	bgt.n	8004c62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c30:	f7ff feb2 	bl	8004998 <xTaskGetSchedulerState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d109      	bne.n	8004c4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c3a:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <xTimerGenericCommand+0x98>)
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f107 0110 	add.w	r1, r7, #16
 8004c42:	2300      	movs	r3, #0
 8004c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c46:	f7fe fca1 	bl	800358c <xQueueGenericSend>
 8004c4a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c4c:	e012      	b.n	8004c74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <xTimerGenericCommand+0x98>)
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	f107 0110 	add.w	r1, r7, #16
 8004c56:	2300      	movs	r3, #0
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f7fe fc97 	bl	800358c <xQueueGenericSend>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c60:	e008      	b.n	8004c74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c62:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <xTimerGenericCommand+0x98>)
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	f107 0110 	add.w	r1, r7, #16
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	f7fe fd8b 	bl	8003788 <xQueueGenericSendFromISR>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3728      	adds	r7, #40	; 0x28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000d84 	.word	0x20000d84

08004c84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8e:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <prvProcessExpiredTimer+0x94>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fb47 	bl	8003330 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d022      	beq.n	8004cf6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	18d1      	adds	r1, r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	6978      	ldr	r0, [r7, #20]
 8004cbe:	f000 f8d1 	bl	8004e64 <prvInsertTimerInActiveList>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01f      	beq.n	8004d08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	6978      	ldr	r0, [r7, #20]
 8004cd4:	f7ff ff88 	bl	8004be8 <xTimerGenericCommand>
 8004cd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d113      	bne.n	8004d08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60fb      	str	r3, [r7, #12]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	6978      	ldr	r0, [r7, #20]
 8004d0e:	4798      	blx	r3
}
 8004d10:	bf00      	nop
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000d7c 	.word	0x20000d7c

08004d1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d24:	f107 0308 	add.w	r3, r7, #8
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f857 	bl	8004ddc <prvGetNextExpireTime>
 8004d2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4619      	mov	r1, r3
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f803 	bl	8004d40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d3a:	f000 f8d5 	bl	8004ee8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d3e:	e7f1      	b.n	8004d24 <prvTimerTask+0x8>

08004d40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d4a:	f7ff fa43 	bl	80041d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d4e:	f107 0308 	add.w	r3, r7, #8
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f866 	bl	8004e24 <prvSampleTimeNow>
 8004d58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d130      	bne.n	8004dc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <prvProcessTimerOrBlockTask+0x3c>
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d806      	bhi.n	8004d7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d6e:	f7ff fa3f 	bl	80041f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff85 	bl	8004c84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d7a:	e024      	b.n	8004dc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <prvProcessTimerOrBlockTask+0x90>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <prvProcessTimerOrBlockTask+0x50>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <prvProcessTimerOrBlockTask+0x52>
 8004d90:	2300      	movs	r3, #0
 8004d92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <prvProcessTimerOrBlockTask+0x94>)
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	4619      	mov	r1, r3
 8004da2:	f7fe ffa7 	bl	8003cf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004da6:	f7ff fa23 	bl	80041f0 <xTaskResumeAll>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <prvProcessTimerOrBlockTask+0x98>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
}
 8004dc0:	e001      	b.n	8004dc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dc2:	f7ff fa15 	bl	80041f0 <xTaskResumeAll>
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000d80 	.word	0x20000d80
 8004dd4:	20000d84 	.word	0x20000d84
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <prvGetNextExpireTime+0x44>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <prvGetNextExpireTime+0x16>
 8004dee:	2201      	movs	r2, #1
 8004df0:	e000      	b.n	8004df4 <prvGetNextExpireTime+0x18>
 8004df2:	2200      	movs	r2, #0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d105      	bne.n	8004e0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <prvGetNextExpireTime+0x44>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e001      	b.n	8004e10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e10:	68fb      	ldr	r3, [r7, #12]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000d7c 	.word	0x20000d7c

08004e24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e2c:	f7ff fa7e 	bl	800432c <xTaskGetTickCount>
 8004e30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <prvSampleTimeNow+0x3c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d205      	bcs.n	8004e48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e3c:	f000 f936 	bl	80050ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e002      	b.n	8004e4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e4e:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <prvSampleTimeNow+0x3c>)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e54:	68fb      	ldr	r3, [r7, #12]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000d8c 	.word	0x20000d8c

08004e64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d812      	bhi.n	8004eb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d302      	bcc.n	8004e9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e01b      	b.n	8004ed6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <prvInsertTimerInActiveList+0x7c>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7fe fa08 	bl	80032be <vListInsert>
 8004eae:	e012      	b.n	8004ed6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d206      	bcs.n	8004ec6 <prvInsertTimerInActiveList+0x62>
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d302      	bcc.n	8004ec6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e007      	b.n	8004ed6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <prvInsertTimerInActiveList+0x80>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7fe f9f4 	bl	80032be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ed6:	697b      	ldr	r3, [r7, #20]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20000d80 	.word	0x20000d80
 8004ee4:	20000d7c 	.word	0x20000d7c

08004ee8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08e      	sub	sp, #56	; 0x38
 8004eec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eee:	e0ca      	b.n	8005086 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	da18      	bge.n	8004f28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ef6:	1d3b      	adds	r3, r7, #4
 8004ef8:	3304      	adds	r3, #4
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	61fb      	str	r3, [r7, #28]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1e:	6850      	ldr	r0, [r2, #4]
 8004f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f22:	6892      	ldr	r2, [r2, #8]
 8004f24:	4611      	mov	r1, r2
 8004f26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f2c0 80aa 	blt.w	8005084 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe f9f5 	bl	8003330 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f46:	463b      	mov	r3, r7
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ff6b 	bl	8004e24 <prvSampleTimeNow>
 8004f4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b09      	cmp	r3, #9
 8004f54:	f200 8097 	bhi.w	8005086 <prvProcessReceivedCommands+0x19e>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <prvProcessReceivedCommands+0x78>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	08004f89 	.word	0x08004f89
 8004f68:	08004f89 	.word	0x08004f89
 8004f6c:	08004ffd 	.word	0x08004ffd
 8004f70:	08005011 	.word	0x08005011
 8004f74:	0800505b 	.word	0x0800505b
 8004f78:	08004f89 	.word	0x08004f89
 8004f7c:	08004f89 	.word	0x08004f89
 8004f80:	08004ffd 	.word	0x08004ffd
 8004f84:	08005011 	.word	0x08005011
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	18d1      	adds	r1, r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa8:	f7ff ff5c 	bl	8004e64 <prvInsertTimerInActiveList>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d069      	beq.n	8005086 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d05e      	beq.n	8005086 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	441a      	add	r2, r3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fda:	f7ff fe05 	bl	8004be8 <xTimerGenericCommand>
 8004fde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d14f      	bne.n	8005086 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61bb      	str	r3, [r7, #24]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800500e:	e03a      	b.n	8005086 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	617b      	str	r3, [r7, #20]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	18d1      	adds	r1, r2, r3
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005054:	f7ff ff06 	bl	8004e64 <prvInsertTimerInActiveList>
					break;
 8005058:	e015      	b.n	8005086 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d103      	bne.n	8005070 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800506a:	f000 fbe1 	bl	8005830 <vPortFree>
 800506e:	e00a      	b.n	8005086 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005082:	e000      	b.n	8005086 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005084:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005086:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <prvProcessReceivedCommands+0x1c0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1d39      	adds	r1, r7, #4
 800508c:	2200      	movs	r2, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fc16 	bl	80038c0 <xQueueReceive>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f47f af2a 	bne.w	8004ef0 <prvProcessReceivedCommands+0x8>
	}
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	3730      	adds	r7, #48	; 0x30
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000d84 	.word	0x20000d84

080050ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050b2:	e048      	b.n	8005146 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050b4:	4b2d      	ldr	r3, [pc, #180]	; (800516c <prvSwitchTimerLists+0xc0>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050be:	4b2b      	ldr	r3, [pc, #172]	; (800516c <prvSwitchTimerLists+0xc0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe f92f 	bl	8003330 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02e      	beq.n	8005146 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d90e      	bls.n	8005118 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005106:	4b19      	ldr	r3, [pc, #100]	; (800516c <prvSwitchTimerLists+0xc0>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fe f8d4 	bl	80032be <vListInsert>
 8005116:	e016      	b.n	8005146 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005118:	2300      	movs	r3, #0
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	2100      	movs	r1, #0
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff fd60 	bl	8004be8 <xTimerGenericCommand>
 8005128:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	603b      	str	r3, [r7, #0]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <prvSwitchTimerLists+0xc0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1b1      	bne.n	80050b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <prvSwitchTimerLists+0xc0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <prvSwitchTimerLists+0xc4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a04      	ldr	r2, [pc, #16]	; (800516c <prvSwitchTimerLists+0xc0>)
 800515c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800515e:	4a04      	ldr	r2, [pc, #16]	; (8005170 <prvSwitchTimerLists+0xc4>)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000d7c 	.word	0x20000d7c
 8005170:	20000d80 	.word	0x20000d80

08005174 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800517a:	f000 f96b 	bl	8005454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800517e:	4b15      	ldr	r3, [pc, #84]	; (80051d4 <prvCheckForValidListAndQueue+0x60>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d120      	bne.n	80051c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005186:	4814      	ldr	r0, [pc, #80]	; (80051d8 <prvCheckForValidListAndQueue+0x64>)
 8005188:	f7fe f848 	bl	800321c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800518c:	4813      	ldr	r0, [pc, #76]	; (80051dc <prvCheckForValidListAndQueue+0x68>)
 800518e:	f7fe f845 	bl	800321c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <prvCheckForValidListAndQueue+0x6c>)
 8005194:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <prvCheckForValidListAndQueue+0x64>)
 8005196:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005198:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <prvCheckForValidListAndQueue+0x70>)
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <prvCheckForValidListAndQueue+0x68>)
 800519c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800519e:	2300      	movs	r3, #0
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <prvCheckForValidListAndQueue+0x74>)
 80051a4:	4a11      	ldr	r2, [pc, #68]	; (80051ec <prvCheckForValidListAndQueue+0x78>)
 80051a6:	2110      	movs	r1, #16
 80051a8:	200a      	movs	r0, #10
 80051aa:	f7fe f953 	bl	8003454 <xQueueGenericCreateStatic>
 80051ae:	4603      	mov	r3, r0
 80051b0:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <prvCheckForValidListAndQueue+0x60>)
 80051b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <prvCheckForValidListAndQueue+0x60>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <prvCheckForValidListAndQueue+0x60>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	490b      	ldr	r1, [pc, #44]	; (80051f0 <prvCheckForValidListAndQueue+0x7c>)
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe fd6c 	bl	8003ca0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051c8:	f000 f974 	bl	80054b4 <vPortExitCritical>
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000d84 	.word	0x20000d84
 80051d8:	20000d54 	.word	0x20000d54
 80051dc:	20000d68 	.word	0x20000d68
 80051e0:	20000d7c 	.word	0x20000d7c
 80051e4:	20000d80 	.word	0x20000d80
 80051e8:	20000e30 	.word	0x20000e30
 80051ec:	20000d90 	.word	0x20000d90
 80051f0:	08006650 	.word	0x08006650

080051f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3b04      	subs	r3, #4
 8005204:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800520c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3b04      	subs	r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3b04      	subs	r3, #4
 8005222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005224:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <pxPortInitialiseStack+0x64>)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3b14      	subs	r3, #20
 800522e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3b04      	subs	r3, #4
 800523a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f06f 0202 	mvn.w	r2, #2
 8005242:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3b20      	subs	r3, #32
 8005248:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800524a:	68fb      	ldr	r3, [r7, #12]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	0800525d 	.word	0x0800525d

0800525c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <prvTaskExitError+0x54>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d00a      	beq.n	8005286 <prvTaskExitError+0x2a>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	60fb      	str	r3, [r7, #12]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <prvTaskExitError+0x28>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	60bb      	str	r3, [r7, #8]
}
 8005298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800529a:	bf00      	nop
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0fc      	beq.n	800529c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	2000000c 	.word	0x2000000c
	...

080052c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052c0:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <pxCurrentTCBConst2>)
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	6808      	ldr	r0, [r1, #0]
 80052c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	f380 8809 	msr	PSP, r0
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8811 	msr	BASEPRI, r0
 80052da:	4770      	bx	lr
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst2>:
 80052e0:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052e8:	4808      	ldr	r0, [pc, #32]	; (800530c <prvPortStartFirstTask+0x24>)
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f380 8808 	msr	MSP, r0
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8814 	msr	CONTROL, r0
 80052fa:	b662      	cpsie	i
 80052fc:	b661      	cpsie	f
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	df00      	svc	0
 8005308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800530a:	bf00      	nop
 800530c:	e000ed08 	.word	0xe000ed08

08005310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005316:	4b46      	ldr	r3, [pc, #280]	; (8005430 <xPortStartScheduler+0x120>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a46      	ldr	r2, [pc, #280]	; (8005434 <xPortStartScheduler+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10a      	bne.n	8005336 <xPortStartScheduler+0x26>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005336:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <xPortStartScheduler+0x120>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a3f      	ldr	r2, [pc, #252]	; (8005438 <xPortStartScheduler+0x128>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10a      	bne.n	8005356 <xPortStartScheduler+0x46>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005356:	4b39      	ldr	r3, [pc, #228]	; (800543c <xPortStartScheduler+0x12c>)
 8005358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	22ff      	movs	r2, #255	; 0xff
 8005366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4b31      	ldr	r3, [pc, #196]	; (8005440 <xPortStartScheduler+0x130>)
 800537c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800537e:	4b31      	ldr	r3, [pc, #196]	; (8005444 <xPortStartScheduler+0x134>)
 8005380:	2207      	movs	r2, #7
 8005382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005384:	e009      	b.n	800539a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <xPortStartScheduler+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3b01      	subs	r3, #1
 800538c:	4a2d      	ldr	r2, [pc, #180]	; (8005444 <xPortStartScheduler+0x134>)
 800538e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	d0ef      	beq.n	8005386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053a6:	4b27      	ldr	r3, [pc, #156]	; (8005444 <xPortStartScheduler+0x134>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1c3 0307 	rsb	r3, r3, #7
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d00a      	beq.n	80053c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	60bb      	str	r3, [r7, #8]
}
 80053c4:	bf00      	nop
 80053c6:	e7fe      	b.n	80053c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053c8:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <xPortStartScheduler+0x134>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <xPortStartScheduler+0x134>)
 80053d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <xPortStartScheduler+0x134>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053da:	4a1a      	ldr	r2, [pc, #104]	; (8005444 <xPortStartScheduler+0x134>)
 80053dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053e6:	4b18      	ldr	r3, [pc, #96]	; (8005448 <xPortStartScheduler+0x138>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <xPortStartScheduler+0x138>)
 80053ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <xPortStartScheduler+0x138>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a14      	ldr	r2, [pc, #80]	; (8005448 <xPortStartScheduler+0x138>)
 80053f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053fe:	f000 f8dd 	bl	80055bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <xPortStartScheduler+0x13c>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005408:	f000 f8fc 	bl	8005604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800540c:	4b10      	ldr	r3, [pc, #64]	; (8005450 <xPortStartScheduler+0x140>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0f      	ldr	r2, [pc, #60]	; (8005450 <xPortStartScheduler+0x140>)
 8005412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005418:	f7ff ff66 	bl	80052e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800541c:	f7ff f850 	bl	80044c0 <vTaskSwitchContext>
	prvTaskExitError();
 8005420:	f7ff ff1c 	bl	800525c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	e000ed00 	.word	0xe000ed00
 8005434:	410fc271 	.word	0x410fc271
 8005438:	410fc270 	.word	0x410fc270
 800543c:	e000e400 	.word	0xe000e400
 8005440:	20000e80 	.word	0x20000e80
 8005444:	20000e84 	.word	0x20000e84
 8005448:	e000ed20 	.word	0xe000ed20
 800544c:	2000000c 	.word	0x2000000c
 8005450:	e000ef34 	.word	0xe000ef34

08005454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	607b      	str	r3, [r7, #4]
}
 800546c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800546e:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <vPortEnterCritical+0x58>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	4a0d      	ldr	r2, [pc, #52]	; (80054ac <vPortEnterCritical+0x58>)
 8005476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <vPortEnterCritical+0x58>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d10f      	bne.n	80054a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <vPortEnterCritical+0x5c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	603b      	str	r3, [r7, #0]
}
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <vPortEnterCritical+0x4a>
	}
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	2000000c 	.word	0x2000000c
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <vPortExitCritical+0x50>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <vPortExitCritical+0x24>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	607b      	str	r3, [r7, #4]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <vPortExitCritical+0x50>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3b01      	subs	r3, #1
 80054de:	4a09      	ldr	r2, [pc, #36]	; (8005504 <vPortExitCritical+0x50>)
 80054e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <vPortExitCritical+0x50>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <vPortExitCritical+0x42>
 80054ea:	2300      	movs	r3, #0
 80054ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f383 8811 	msr	BASEPRI, r3
}
 80054f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	2000000c 	.word	0x2000000c
	...

08005510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005510:	f3ef 8009 	mrs	r0, PSP
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4b15      	ldr	r3, [pc, #84]	; (8005570 <pxCurrentTCBConst>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f01e 0f10 	tst.w	lr, #16
 8005520:	bf08      	it	eq
 8005522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552a:	6010      	str	r0, [r2, #0]
 800552c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005534:	f380 8811 	msr	BASEPRI, r0
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f7fe ffbe 	bl	80044c0 <vTaskSwitchContext>
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f380 8811 	msr	BASEPRI, r0
 800554c:	bc09      	pop	{r0, r3}
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6808      	ldr	r0, [r1, #0]
 8005552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005556:	f01e 0f10 	tst.w	lr, #16
 800555a:	bf08      	it	eq
 800555c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005560:	f380 8809 	msr	PSP, r0
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst>:
 8005570:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	607b      	str	r3, [r7, #4]
}
 8005590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005592:	f7fe fedb 	bl	800434c <xTaskIncrementTick>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <xPortSysTickHandler+0x40>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <vPortSetupTimerInterrupt+0x38>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <vPortSetupTimerInterrupt+0x3c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <vPortSetupTimerInterrupt+0x40>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <vPortSetupTimerInterrupt+0x44>)
 80055da:	3b01      	subs	r3, #1
 80055dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055de:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	e000e010 	.word	0xe000e010
 80055f4:	e000e018 	.word	0xe000e018
 80055f8:	20000000 	.word	0x20000000
 80055fc:	10624dd3 	.word	0x10624dd3
 8005600:	e000e014 	.word	0xe000e014

08005604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005614 <vPortEnableVFP+0x10>
 8005608:	6801      	ldr	r1, [r0, #0]
 800560a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800560e:	6001      	str	r1, [r0, #0]
 8005610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005612:	bf00      	nop
 8005614:	e000ed88 	.word	0xe000ed88

08005618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800561e:	f3ef 8305 	mrs	r3, IPSR
 8005622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d914      	bls.n	8005654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800562a:	4a17      	ldr	r2, [pc, #92]	; (8005688 <vPortValidateInterruptPriority+0x70>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005634:	4b15      	ldr	r3, [pc, #84]	; (800568c <vPortValidateInterruptPriority+0x74>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	7afa      	ldrb	r2, [r7, #11]
 800563a:	429a      	cmp	r2, r3
 800563c:	d20a      	bcs.n	8005654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <vPortValidateInterruptPriority+0x78>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <vPortValidateInterruptPriority+0x7c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d90a      	bls.n	800567a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	603b      	str	r3, [r7, #0]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <vPortValidateInterruptPriority+0x60>
	}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	e000e3f0 	.word	0xe000e3f0
 800568c:	20000e80 	.word	0x20000e80
 8005690:	e000ed0c 	.word	0xe000ed0c
 8005694:	20000e84 	.word	0x20000e84

08005698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056a4:	f7fe fd96 	bl	80041d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056a8:	4b5b      	ldr	r3, [pc, #364]	; (8005818 <pvPortMalloc+0x180>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056b0:	f000 f920 	bl	80058f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056b4:	4b59      	ldr	r3, [pc, #356]	; (800581c <pvPortMalloc+0x184>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 8093 	bne.w	80057e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01d      	beq.n	8005704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056c8:	2208      	movs	r2, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d014      	beq.n	8005704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f023 0307 	bic.w	r3, r3, #7
 80056e0:	3308      	adds	r3, #8
 80056e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <pvPortMalloc+0x6c>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	617b      	str	r3, [r7, #20]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06e      	beq.n	80057e8 <pvPortMalloc+0x150>
 800570a:	4b45      	ldr	r3, [pc, #276]	; (8005820 <pvPortMalloc+0x188>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d869      	bhi.n	80057e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005714:	4b43      	ldr	r3, [pc, #268]	; (8005824 <pvPortMalloc+0x18c>)
 8005716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005718:	4b42      	ldr	r3, [pc, #264]	; (8005824 <pvPortMalloc+0x18c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800571e:	e004      	b.n	800572a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d903      	bls.n	800573c <pvPortMalloc+0xa4>
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f1      	bne.n	8005720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800573c:	4b36      	ldr	r3, [pc, #216]	; (8005818 <pvPortMalloc+0x180>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005742:	429a      	cmp	r2, r3
 8005744:	d050      	beq.n	80057e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2208      	movs	r2, #8
 800574c:	4413      	add	r3, r2
 800574e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	2308      	movs	r3, #8
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	429a      	cmp	r2, r3
 8005766:	d91f      	bls.n	80057a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <pvPortMalloc+0xf8>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	613b      	str	r3, [r7, #16]
}
 800578c:	bf00      	nop
 800578e:	e7fe      	b.n	800578e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	1ad2      	subs	r2, r2, r3
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057a2:	69b8      	ldr	r0, [r7, #24]
 80057a4:	f000 f908 	bl	80059b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <pvPortMalloc+0x188>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <pvPortMalloc+0x188>)
 80057b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <pvPortMalloc+0x188>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <pvPortMalloc+0x190>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d203      	bcs.n	80057ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057c2:	4b17      	ldr	r3, [pc, #92]	; (8005820 <pvPortMalloc+0x188>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a18      	ldr	r2, [pc, #96]	; (8005828 <pvPortMalloc+0x190>)
 80057c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <pvPortMalloc+0x184>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <pvPortMalloc+0x194>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	4a11      	ldr	r2, [pc, #68]	; (800582c <pvPortMalloc+0x194>)
 80057e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057e8:	f7fe fd02 	bl	80041f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <pvPortMalloc+0x174>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60fb      	str	r3, [r7, #12]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <pvPortMalloc+0x172>
	return pvReturn;
 800580c:	69fb      	ldr	r3, [r7, #28]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3728      	adds	r7, #40	; 0x28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20004a90 	.word	0x20004a90
 800581c:	20004aa4 	.word	0x20004aa4
 8005820:	20004a94 	.word	0x20004a94
 8005824:	20004a88 	.word	0x20004a88
 8005828:	20004a98 	.word	0x20004a98
 800582c:	20004a9c 	.word	0x20004a9c

08005830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d04d      	beq.n	80058de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005842:	2308      	movs	r3, #8
 8005844:	425b      	negs	r3, r3
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <vPortFree+0xb8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4013      	ands	r3, r2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <vPortFree+0x44>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	60fb      	str	r3, [r7, #12]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <vPortFree+0x62>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60bb      	str	r3, [r7, #8]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <vPortFree+0xb8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01e      	beq.n	80058de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d11a      	bne.n	80058de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <vPortFree+0xb8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	401a      	ands	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058b8:	f7fe fc8c 	bl	80041d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <vPortFree+0xbc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4413      	add	r3, r2
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <vPortFree+0xbc>)
 80058c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ca:	6938      	ldr	r0, [r7, #16]
 80058cc:	f000 f874 	bl	80059b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <vPortFree+0xc0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a06      	ldr	r2, [pc, #24]	; (80058f0 <vPortFree+0xc0>)
 80058d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058da:	f7fe fc89 	bl	80041f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20004aa4 	.word	0x20004aa4
 80058ec:	20004a94 	.word	0x20004a94
 80058f0:	20004aa0 	.word	0x20004aa0

080058f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005900:	4b27      	ldr	r3, [pc, #156]	; (80059a0 <prvHeapInit+0xac>)
 8005902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3307      	adds	r3, #7
 8005912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0307 	bic.w	r3, r3, #7
 800591a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	4a1f      	ldr	r2, [pc, #124]	; (80059a0 <prvHeapInit+0xac>)
 8005924:	4413      	add	r3, r2
 8005926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800592c:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <prvHeapInit+0xb0>)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005932:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <prvHeapInit+0xb0>)
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4413      	add	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005940:	2208      	movs	r2, #8
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0307 	bic.w	r3, r3, #7
 800594e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <prvHeapInit+0xb4>)
 8005954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005956:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <prvHeapInit+0xb4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2200      	movs	r2, #0
 800595c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <prvHeapInit+0xb4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <prvHeapInit+0xb4>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a0a      	ldr	r2, [pc, #40]	; (80059ac <prvHeapInit+0xb8>)
 8005982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a09      	ldr	r2, [pc, #36]	; (80059b0 <prvHeapInit+0xbc>)
 800598a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <prvHeapInit+0xc0>)
 800598e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005992:	601a      	str	r2, [r3, #0]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000e88 	.word	0x20000e88
 80059a4:	20004a88 	.word	0x20004a88
 80059a8:	20004a90 	.word	0x20004a90
 80059ac:	20004a98 	.word	0x20004a98
 80059b0:	20004a94 	.word	0x20004a94
 80059b4:	20004aa4 	.word	0x20004aa4

080059b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059c0:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <prvInsertBlockIntoFreeList+0xac>)
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e002      	b.n	80059cc <prvInsertBlockIntoFreeList+0x14>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d8f7      	bhi.n	80059c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	4413      	add	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d108      	bne.n	80059fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	441a      	add	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	441a      	add	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d118      	bne.n	8005a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <prvInsertBlockIntoFreeList+0xb0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d00d      	beq.n	8005a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e008      	b.n	8005a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <prvInsertBlockIntoFreeList+0xb0>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e003      	b.n	8005a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d002      	beq.n	8005a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20004a88 	.word	0x20004a88
 8005a68:	20004a90 	.word	0x20004a90

08005a6c <__errno>:
 8005a6c:	4b01      	ldr	r3, [pc, #4]	; (8005a74 <__errno+0x8>)
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000010 	.word	0x20000010

08005a78 <__libc_init_array>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	4d0d      	ldr	r5, [pc, #52]	; (8005ab0 <__libc_init_array+0x38>)
 8005a7c:	4c0d      	ldr	r4, [pc, #52]	; (8005ab4 <__libc_init_array+0x3c>)
 8005a7e:	1b64      	subs	r4, r4, r5
 8005a80:	10a4      	asrs	r4, r4, #2
 8005a82:	2600      	movs	r6, #0
 8005a84:	42a6      	cmp	r6, r4
 8005a86:	d109      	bne.n	8005a9c <__libc_init_array+0x24>
 8005a88:	4d0b      	ldr	r5, [pc, #44]	; (8005ab8 <__libc_init_array+0x40>)
 8005a8a:	4c0c      	ldr	r4, [pc, #48]	; (8005abc <__libc_init_array+0x44>)
 8005a8c:	f000 fd50 	bl	8006530 <_init>
 8005a90:	1b64      	subs	r4, r4, r5
 8005a92:	10a4      	asrs	r4, r4, #2
 8005a94:	2600      	movs	r6, #0
 8005a96:	42a6      	cmp	r6, r4
 8005a98:	d105      	bne.n	8005aa6 <__libc_init_array+0x2e>
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa0:	4798      	blx	r3
 8005aa2:	3601      	adds	r6, #1
 8005aa4:	e7ee      	b.n	8005a84 <__libc_init_array+0xc>
 8005aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aaa:	4798      	blx	r3
 8005aac:	3601      	adds	r6, #1
 8005aae:	e7f2      	b.n	8005a96 <__libc_init_array+0x1e>
 8005ab0:	08006724 	.word	0x08006724
 8005ab4:	08006724 	.word	0x08006724
 8005ab8:	08006724 	.word	0x08006724
 8005abc:	08006728 	.word	0x08006728

08005ac0 <memcpy>:
 8005ac0:	440a      	add	r2, r1
 8005ac2:	4291      	cmp	r1, r2
 8005ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac8:	d100      	bne.n	8005acc <memcpy+0xc>
 8005aca:	4770      	bx	lr
 8005acc:	b510      	push	{r4, lr}
 8005ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad6:	4291      	cmp	r1, r2
 8005ad8:	d1f9      	bne.n	8005ace <memcpy+0xe>
 8005ada:	bd10      	pop	{r4, pc}

08005adc <memset>:
 8005adc:	4402      	add	r2, r0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d100      	bne.n	8005ae6 <memset+0xa>
 8005ae4:	4770      	bx	lr
 8005ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aea:	e7f9      	b.n	8005ae0 <memset+0x4>

08005aec <_puts_r>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	460e      	mov	r6, r1
 8005af0:	4605      	mov	r5, r0
 8005af2:	b118      	cbz	r0, 8005afc <_puts_r+0x10>
 8005af4:	6983      	ldr	r3, [r0, #24]
 8005af6:	b90b      	cbnz	r3, 8005afc <_puts_r+0x10>
 8005af8:	f000 fa6c 	bl	8005fd4 <__sinit>
 8005afc:	69ab      	ldr	r3, [r5, #24]
 8005afe:	68ac      	ldr	r4, [r5, #8]
 8005b00:	b913      	cbnz	r3, 8005b08 <_puts_r+0x1c>
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 fa66 	bl	8005fd4 <__sinit>
 8005b08:	4b2c      	ldr	r3, [pc, #176]	; (8005bbc <_puts_r+0xd0>)
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	d120      	bne.n	8005b50 <_puts_r+0x64>
 8005b0e:	686c      	ldr	r4, [r5, #4]
 8005b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b12:	07db      	lsls	r3, r3, #31
 8005b14:	d405      	bmi.n	8005b22 <_puts_r+0x36>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	0598      	lsls	r0, r3, #22
 8005b1a:	d402      	bmi.n	8005b22 <_puts_r+0x36>
 8005b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b1e:	f000 faf7 	bl	8006110 <__retarget_lock_acquire_recursive>
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	0719      	lsls	r1, r3, #28
 8005b26:	d51d      	bpl.n	8005b64 <_puts_r+0x78>
 8005b28:	6923      	ldr	r3, [r4, #16]
 8005b2a:	b1db      	cbz	r3, 8005b64 <_puts_r+0x78>
 8005b2c:	3e01      	subs	r6, #1
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b34:	3b01      	subs	r3, #1
 8005b36:	60a3      	str	r3, [r4, #8]
 8005b38:	bb39      	cbnz	r1, 8005b8a <_puts_r+0x9e>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da38      	bge.n	8005bb0 <_puts_r+0xc4>
 8005b3e:	4622      	mov	r2, r4
 8005b40:	210a      	movs	r1, #10
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 f86c 	bl	8005c20 <__swbuf_r>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d011      	beq.n	8005b70 <_puts_r+0x84>
 8005b4c:	250a      	movs	r5, #10
 8005b4e:	e011      	b.n	8005b74 <_puts_r+0x88>
 8005b50:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <_puts_r+0xd4>)
 8005b52:	429c      	cmp	r4, r3
 8005b54:	d101      	bne.n	8005b5a <_puts_r+0x6e>
 8005b56:	68ac      	ldr	r4, [r5, #8]
 8005b58:	e7da      	b.n	8005b10 <_puts_r+0x24>
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	; (8005bc4 <_puts_r+0xd8>)
 8005b5c:	429c      	cmp	r4, r3
 8005b5e:	bf08      	it	eq
 8005b60:	68ec      	ldreq	r4, [r5, #12]
 8005b62:	e7d5      	b.n	8005b10 <_puts_r+0x24>
 8005b64:	4621      	mov	r1, r4
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 f8ac 	bl	8005cc4 <__swsetup_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d0dd      	beq.n	8005b2c <_puts_r+0x40>
 8005b70:	f04f 35ff 	mov.w	r5, #4294967295
 8005b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b76:	07da      	lsls	r2, r3, #31
 8005b78:	d405      	bmi.n	8005b86 <_puts_r+0x9a>
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	059b      	lsls	r3, r3, #22
 8005b7e:	d402      	bmi.n	8005b86 <_puts_r+0x9a>
 8005b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b82:	f000 fac6 	bl	8006112 <__retarget_lock_release_recursive>
 8005b86:	4628      	mov	r0, r5
 8005b88:	bd70      	pop	{r4, r5, r6, pc}
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da04      	bge.n	8005b98 <_puts_r+0xac>
 8005b8e:	69a2      	ldr	r2, [r4, #24]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	dc06      	bgt.n	8005ba2 <_puts_r+0xb6>
 8005b94:	290a      	cmp	r1, #10
 8005b96:	d004      	beq.n	8005ba2 <_puts_r+0xb6>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	6022      	str	r2, [r4, #0]
 8005b9e:	7019      	strb	r1, [r3, #0]
 8005ba0:	e7c5      	b.n	8005b2e <_puts_r+0x42>
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f000 f83b 	bl	8005c20 <__swbuf_r>
 8005baa:	3001      	adds	r0, #1
 8005bac:	d1bf      	bne.n	8005b2e <_puts_r+0x42>
 8005bae:	e7df      	b.n	8005b70 <_puts_r+0x84>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	250a      	movs	r5, #10
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	6022      	str	r2, [r4, #0]
 8005bb8:	701d      	strb	r5, [r3, #0]
 8005bba:	e7db      	b.n	8005b74 <_puts_r+0x88>
 8005bbc:	080066dc 	.word	0x080066dc
 8005bc0:	080066fc 	.word	0x080066fc
 8005bc4:	080066bc 	.word	0x080066bc

08005bc8 <puts>:
 8005bc8:	4b02      	ldr	r3, [pc, #8]	; (8005bd4 <puts+0xc>)
 8005bca:	4601      	mov	r1, r0
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	f7ff bf8d 	b.w	8005aec <_puts_r>
 8005bd2:	bf00      	nop
 8005bd4:	20000010 	.word	0x20000010

08005bd8 <strchr>:
 8005bd8:	b2c9      	uxtb	r1, r1
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005be0:	b11a      	cbz	r2, 8005bea <strchr+0x12>
 8005be2:	428a      	cmp	r2, r1
 8005be4:	d1f9      	bne.n	8005bda <strchr+0x2>
 8005be6:	4618      	mov	r0, r3
 8005be8:	4770      	bx	lr
 8005bea:	2900      	cmp	r1, #0
 8005bec:	bf18      	it	ne
 8005bee:	2300      	movne	r3, #0
 8005bf0:	e7f9      	b.n	8005be6 <strchr+0xe>

08005bf2 <strstr>:
 8005bf2:	780a      	ldrb	r2, [r1, #0]
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	b96a      	cbnz	r2, 8005c14 <strstr+0x22>
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d109      	bne.n	8005c12 <strstr+0x20>
 8005bfe:	460c      	mov	r4, r1
 8005c00:	4605      	mov	r5, r0
 8005c02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f6      	beq.n	8005bf8 <strstr+0x6>
 8005c0a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005c0e:	429e      	cmp	r6, r3
 8005c10:	d0f7      	beq.n	8005c02 <strstr+0x10>
 8005c12:	3001      	adds	r0, #1
 8005c14:	7803      	ldrb	r3, [r0, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1ef      	bne.n	8005bfa <strstr+0x8>
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	e7ec      	b.n	8005bf8 <strstr+0x6>
	...

08005c20 <__swbuf_r>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	460e      	mov	r6, r1
 8005c24:	4614      	mov	r4, r2
 8005c26:	4605      	mov	r5, r0
 8005c28:	b118      	cbz	r0, 8005c32 <__swbuf_r+0x12>
 8005c2a:	6983      	ldr	r3, [r0, #24]
 8005c2c:	b90b      	cbnz	r3, 8005c32 <__swbuf_r+0x12>
 8005c2e:	f000 f9d1 	bl	8005fd4 <__sinit>
 8005c32:	4b21      	ldr	r3, [pc, #132]	; (8005cb8 <__swbuf_r+0x98>)
 8005c34:	429c      	cmp	r4, r3
 8005c36:	d12b      	bne.n	8005c90 <__swbuf_r+0x70>
 8005c38:	686c      	ldr	r4, [r5, #4]
 8005c3a:	69a3      	ldr	r3, [r4, #24]
 8005c3c:	60a3      	str	r3, [r4, #8]
 8005c3e:	89a3      	ldrh	r3, [r4, #12]
 8005c40:	071a      	lsls	r2, r3, #28
 8005c42:	d52f      	bpl.n	8005ca4 <__swbuf_r+0x84>
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	b36b      	cbz	r3, 8005ca4 <__swbuf_r+0x84>
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	1ac0      	subs	r0, r0, r3
 8005c4e:	6963      	ldr	r3, [r4, #20]
 8005c50:	b2f6      	uxtb	r6, r6
 8005c52:	4283      	cmp	r3, r0
 8005c54:	4637      	mov	r7, r6
 8005c56:	dc04      	bgt.n	8005c62 <__swbuf_r+0x42>
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f000 f926 	bl	8005eac <_fflush_r>
 8005c60:	bb30      	cbnz	r0, 8005cb0 <__swbuf_r+0x90>
 8005c62:	68a3      	ldr	r3, [r4, #8]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	60a3      	str	r3, [r4, #8]
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	6022      	str	r2, [r4, #0]
 8005c6e:	701e      	strb	r6, [r3, #0]
 8005c70:	6963      	ldr	r3, [r4, #20]
 8005c72:	3001      	adds	r0, #1
 8005c74:	4283      	cmp	r3, r0
 8005c76:	d004      	beq.n	8005c82 <__swbuf_r+0x62>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	07db      	lsls	r3, r3, #31
 8005c7c:	d506      	bpl.n	8005c8c <__swbuf_r+0x6c>
 8005c7e:	2e0a      	cmp	r6, #10
 8005c80:	d104      	bne.n	8005c8c <__swbuf_r+0x6c>
 8005c82:	4621      	mov	r1, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f000 f911 	bl	8005eac <_fflush_r>
 8005c8a:	b988      	cbnz	r0, 8005cb0 <__swbuf_r+0x90>
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <__swbuf_r+0x9c>)
 8005c92:	429c      	cmp	r4, r3
 8005c94:	d101      	bne.n	8005c9a <__swbuf_r+0x7a>
 8005c96:	68ac      	ldr	r4, [r5, #8]
 8005c98:	e7cf      	b.n	8005c3a <__swbuf_r+0x1a>
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <__swbuf_r+0xa0>)
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	bf08      	it	eq
 8005ca0:	68ec      	ldreq	r4, [r5, #12]
 8005ca2:	e7ca      	b.n	8005c3a <__swbuf_r+0x1a>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f80c 	bl	8005cc4 <__swsetup_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d0cb      	beq.n	8005c48 <__swbuf_r+0x28>
 8005cb0:	f04f 37ff 	mov.w	r7, #4294967295
 8005cb4:	e7ea      	b.n	8005c8c <__swbuf_r+0x6c>
 8005cb6:	bf00      	nop
 8005cb8:	080066dc 	.word	0x080066dc
 8005cbc:	080066fc 	.word	0x080066fc
 8005cc0:	080066bc 	.word	0x080066bc

08005cc4 <__swsetup_r>:
 8005cc4:	4b32      	ldr	r3, [pc, #200]	; (8005d90 <__swsetup_r+0xcc>)
 8005cc6:	b570      	push	{r4, r5, r6, lr}
 8005cc8:	681d      	ldr	r5, [r3, #0]
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	b125      	cbz	r5, 8005cda <__swsetup_r+0x16>
 8005cd0:	69ab      	ldr	r3, [r5, #24]
 8005cd2:	b913      	cbnz	r3, 8005cda <__swsetup_r+0x16>
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 f97d 	bl	8005fd4 <__sinit>
 8005cda:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <__swsetup_r+0xd0>)
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	d10f      	bne.n	8005d00 <__swsetup_r+0x3c>
 8005ce0:	686c      	ldr	r4, [r5, #4]
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ce8:	0719      	lsls	r1, r3, #28
 8005cea:	d42c      	bmi.n	8005d46 <__swsetup_r+0x82>
 8005cec:	06dd      	lsls	r5, r3, #27
 8005cee:	d411      	bmi.n	8005d14 <__swsetup_r+0x50>
 8005cf0:	2309      	movs	r3, #9
 8005cf2:	6033      	str	r3, [r6, #0]
 8005cf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfe:	e03e      	b.n	8005d7e <__swsetup_r+0xba>
 8005d00:	4b25      	ldr	r3, [pc, #148]	; (8005d98 <__swsetup_r+0xd4>)
 8005d02:	429c      	cmp	r4, r3
 8005d04:	d101      	bne.n	8005d0a <__swsetup_r+0x46>
 8005d06:	68ac      	ldr	r4, [r5, #8]
 8005d08:	e7eb      	b.n	8005ce2 <__swsetup_r+0x1e>
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <__swsetup_r+0xd8>)
 8005d0c:	429c      	cmp	r4, r3
 8005d0e:	bf08      	it	eq
 8005d10:	68ec      	ldreq	r4, [r5, #12]
 8005d12:	e7e6      	b.n	8005ce2 <__swsetup_r+0x1e>
 8005d14:	0758      	lsls	r0, r3, #29
 8005d16:	d512      	bpl.n	8005d3e <__swsetup_r+0x7a>
 8005d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d1a:	b141      	cbz	r1, 8005d2e <__swsetup_r+0x6a>
 8005d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d20:	4299      	cmp	r1, r3
 8005d22:	d002      	beq.n	8005d2a <__swsetup_r+0x66>
 8005d24:	4630      	mov	r0, r6
 8005d26:	f000 fa5b 	bl	80061e0 <_free_r>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	2300      	movs	r3, #0
 8005d38:	6063      	str	r3, [r4, #4]
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f043 0308 	orr.w	r3, r3, #8
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	b94b      	cbnz	r3, 8005d5e <__swsetup_r+0x9a>
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d54:	d003      	beq.n	8005d5e <__swsetup_r+0x9a>
 8005d56:	4621      	mov	r1, r4
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f000 fa01 	bl	8006160 <__smakebuf_r>
 8005d5e:	89a0      	ldrh	r0, [r4, #12]
 8005d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d64:	f010 0301 	ands.w	r3, r0, #1
 8005d68:	d00a      	beq.n	8005d80 <__swsetup_r+0xbc>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60a3      	str	r3, [r4, #8]
 8005d6e:	6963      	ldr	r3, [r4, #20]
 8005d70:	425b      	negs	r3, r3
 8005d72:	61a3      	str	r3, [r4, #24]
 8005d74:	6923      	ldr	r3, [r4, #16]
 8005d76:	b943      	cbnz	r3, 8005d8a <__swsetup_r+0xc6>
 8005d78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d7c:	d1ba      	bne.n	8005cf4 <__swsetup_r+0x30>
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	0781      	lsls	r1, r0, #30
 8005d82:	bf58      	it	pl
 8005d84:	6963      	ldrpl	r3, [r4, #20]
 8005d86:	60a3      	str	r3, [r4, #8]
 8005d88:	e7f4      	b.n	8005d74 <__swsetup_r+0xb0>
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e7f7      	b.n	8005d7e <__swsetup_r+0xba>
 8005d8e:	bf00      	nop
 8005d90:	20000010 	.word	0x20000010
 8005d94:	080066dc 	.word	0x080066dc
 8005d98:	080066fc 	.word	0x080066fc
 8005d9c:	080066bc 	.word	0x080066bc

08005da0 <__sflush_r>:
 8005da0:	898a      	ldrh	r2, [r1, #12]
 8005da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da6:	4605      	mov	r5, r0
 8005da8:	0710      	lsls	r0, r2, #28
 8005daa:	460c      	mov	r4, r1
 8005dac:	d458      	bmi.n	8005e60 <__sflush_r+0xc0>
 8005dae:	684b      	ldr	r3, [r1, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	dc05      	bgt.n	8005dc0 <__sflush_r+0x20>
 8005db4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	dc02      	bgt.n	8005dc0 <__sflush_r+0x20>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dc2:	2e00      	cmp	r6, #0
 8005dc4:	d0f9      	beq.n	8005dba <__sflush_r+0x1a>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dcc:	682f      	ldr	r7, [r5, #0]
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	d032      	beq.n	8005e38 <__sflush_r+0x98>
 8005dd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	075a      	lsls	r2, r3, #29
 8005dd8:	d505      	bpl.n	8005de6 <__sflush_r+0x46>
 8005dda:	6863      	ldr	r3, [r4, #4]
 8005ddc:	1ac0      	subs	r0, r0, r3
 8005dde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005de0:	b10b      	cbz	r3, 8005de6 <__sflush_r+0x46>
 8005de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005de4:	1ac0      	subs	r0, r0, r3
 8005de6:	2300      	movs	r3, #0
 8005de8:	4602      	mov	r2, r0
 8005dea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dec:	6a21      	ldr	r1, [r4, #32]
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b0      	blx	r6
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	d106      	bne.n	8005e06 <__sflush_r+0x66>
 8005df8:	6829      	ldr	r1, [r5, #0]
 8005dfa:	291d      	cmp	r1, #29
 8005dfc:	d82c      	bhi.n	8005e58 <__sflush_r+0xb8>
 8005dfe:	4a2a      	ldr	r2, [pc, #168]	; (8005ea8 <__sflush_r+0x108>)
 8005e00:	40ca      	lsrs	r2, r1
 8005e02:	07d6      	lsls	r6, r2, #31
 8005e04:	d528      	bpl.n	8005e58 <__sflush_r+0xb8>
 8005e06:	2200      	movs	r2, #0
 8005e08:	6062      	str	r2, [r4, #4]
 8005e0a:	04d9      	lsls	r1, r3, #19
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	6022      	str	r2, [r4, #0]
 8005e10:	d504      	bpl.n	8005e1c <__sflush_r+0x7c>
 8005e12:	1c42      	adds	r2, r0, #1
 8005e14:	d101      	bne.n	8005e1a <__sflush_r+0x7a>
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	b903      	cbnz	r3, 8005e1c <__sflush_r+0x7c>
 8005e1a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e1e:	602f      	str	r7, [r5, #0]
 8005e20:	2900      	cmp	r1, #0
 8005e22:	d0ca      	beq.n	8005dba <__sflush_r+0x1a>
 8005e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e28:	4299      	cmp	r1, r3
 8005e2a:	d002      	beq.n	8005e32 <__sflush_r+0x92>
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 f9d7 	bl	80061e0 <_free_r>
 8005e32:	2000      	movs	r0, #0
 8005e34:	6360      	str	r0, [r4, #52]	; 0x34
 8005e36:	e7c1      	b.n	8005dbc <__sflush_r+0x1c>
 8005e38:	6a21      	ldr	r1, [r4, #32]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b0      	blx	r6
 8005e40:	1c41      	adds	r1, r0, #1
 8005e42:	d1c7      	bne.n	8005dd4 <__sflush_r+0x34>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0c4      	beq.n	8005dd4 <__sflush_r+0x34>
 8005e4a:	2b1d      	cmp	r3, #29
 8005e4c:	d001      	beq.n	8005e52 <__sflush_r+0xb2>
 8005e4e:	2b16      	cmp	r3, #22
 8005e50:	d101      	bne.n	8005e56 <__sflush_r+0xb6>
 8005e52:	602f      	str	r7, [r5, #0]
 8005e54:	e7b1      	b.n	8005dba <__sflush_r+0x1a>
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e5c:	81a3      	strh	r3, [r4, #12]
 8005e5e:	e7ad      	b.n	8005dbc <__sflush_r+0x1c>
 8005e60:	690f      	ldr	r7, [r1, #16]
 8005e62:	2f00      	cmp	r7, #0
 8005e64:	d0a9      	beq.n	8005dba <__sflush_r+0x1a>
 8005e66:	0793      	lsls	r3, r2, #30
 8005e68:	680e      	ldr	r6, [r1, #0]
 8005e6a:	bf08      	it	eq
 8005e6c:	694b      	ldreq	r3, [r1, #20]
 8005e6e:	600f      	str	r7, [r1, #0]
 8005e70:	bf18      	it	ne
 8005e72:	2300      	movne	r3, #0
 8005e74:	eba6 0807 	sub.w	r8, r6, r7
 8005e78:	608b      	str	r3, [r1, #8]
 8005e7a:	f1b8 0f00 	cmp.w	r8, #0
 8005e7e:	dd9c      	ble.n	8005dba <__sflush_r+0x1a>
 8005e80:	6a21      	ldr	r1, [r4, #32]
 8005e82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e84:	4643      	mov	r3, r8
 8005e86:	463a      	mov	r2, r7
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b0      	blx	r6
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	dc06      	bgt.n	8005e9e <__sflush_r+0xfe>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	e78e      	b.n	8005dbc <__sflush_r+0x1c>
 8005e9e:	4407      	add	r7, r0
 8005ea0:	eba8 0800 	sub.w	r8, r8, r0
 8005ea4:	e7e9      	b.n	8005e7a <__sflush_r+0xda>
 8005ea6:	bf00      	nop
 8005ea8:	20400001 	.word	0x20400001

08005eac <_fflush_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	690b      	ldr	r3, [r1, #16]
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	b913      	cbnz	r3, 8005ebc <_fflush_r+0x10>
 8005eb6:	2500      	movs	r5, #0
 8005eb8:	4628      	mov	r0, r5
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	b118      	cbz	r0, 8005ec6 <_fflush_r+0x1a>
 8005ebe:	6983      	ldr	r3, [r0, #24]
 8005ec0:	b90b      	cbnz	r3, 8005ec6 <_fflush_r+0x1a>
 8005ec2:	f000 f887 	bl	8005fd4 <__sinit>
 8005ec6:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <_fflush_r+0x6c>)
 8005ec8:	429c      	cmp	r4, r3
 8005eca:	d11b      	bne.n	8005f04 <_fflush_r+0x58>
 8005ecc:	686c      	ldr	r4, [r5, #4]
 8005ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0ef      	beq.n	8005eb6 <_fflush_r+0xa>
 8005ed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ed8:	07d0      	lsls	r0, r2, #31
 8005eda:	d404      	bmi.n	8005ee6 <_fflush_r+0x3a>
 8005edc:	0599      	lsls	r1, r3, #22
 8005ede:	d402      	bmi.n	8005ee6 <_fflush_r+0x3a>
 8005ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee2:	f000 f915 	bl	8006110 <__retarget_lock_acquire_recursive>
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	4621      	mov	r1, r4
 8005eea:	f7ff ff59 	bl	8005da0 <__sflush_r>
 8005eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef0:	07da      	lsls	r2, r3, #31
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	d4e0      	bmi.n	8005eb8 <_fflush_r+0xc>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	059b      	lsls	r3, r3, #22
 8005efa:	d4dd      	bmi.n	8005eb8 <_fflush_r+0xc>
 8005efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005efe:	f000 f908 	bl	8006112 <__retarget_lock_release_recursive>
 8005f02:	e7d9      	b.n	8005eb8 <_fflush_r+0xc>
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <_fflush_r+0x70>)
 8005f06:	429c      	cmp	r4, r3
 8005f08:	d101      	bne.n	8005f0e <_fflush_r+0x62>
 8005f0a:	68ac      	ldr	r4, [r5, #8]
 8005f0c:	e7df      	b.n	8005ece <_fflush_r+0x22>
 8005f0e:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <_fflush_r+0x74>)
 8005f10:	429c      	cmp	r4, r3
 8005f12:	bf08      	it	eq
 8005f14:	68ec      	ldreq	r4, [r5, #12]
 8005f16:	e7da      	b.n	8005ece <_fflush_r+0x22>
 8005f18:	080066dc 	.word	0x080066dc
 8005f1c:	080066fc 	.word	0x080066fc
 8005f20:	080066bc 	.word	0x080066bc

08005f24 <std>:
 8005f24:	2300      	movs	r3, #0
 8005f26:	b510      	push	{r4, lr}
 8005f28:	4604      	mov	r4, r0
 8005f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f32:	6083      	str	r3, [r0, #8]
 8005f34:	8181      	strh	r1, [r0, #12]
 8005f36:	6643      	str	r3, [r0, #100]	; 0x64
 8005f38:	81c2      	strh	r2, [r0, #14]
 8005f3a:	6183      	str	r3, [r0, #24]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	2208      	movs	r2, #8
 8005f40:	305c      	adds	r0, #92	; 0x5c
 8005f42:	f7ff fdcb 	bl	8005adc <memset>
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <std+0x38>)
 8005f48:	6263      	str	r3, [r4, #36]	; 0x24
 8005f4a:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <std+0x3c>)
 8005f4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <std+0x40>)
 8005f50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <std+0x44>)
 8005f54:	6224      	str	r4, [r4, #32]
 8005f56:	6323      	str	r3, [r4, #48]	; 0x30
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	bf00      	nop
 8005f5c:	080063c1 	.word	0x080063c1
 8005f60:	080063e3 	.word	0x080063e3
 8005f64:	0800641b 	.word	0x0800641b
 8005f68:	0800643f 	.word	0x0800643f

08005f6c <_cleanup_r>:
 8005f6c:	4901      	ldr	r1, [pc, #4]	; (8005f74 <_cleanup_r+0x8>)
 8005f6e:	f000 b8af 	b.w	80060d0 <_fwalk_reent>
 8005f72:	bf00      	nop
 8005f74:	08005ead 	.word	0x08005ead

08005f78 <__sfmoreglue>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	2268      	movs	r2, #104	; 0x68
 8005f7c:	1e4d      	subs	r5, r1, #1
 8005f7e:	4355      	muls	r5, r2
 8005f80:	460e      	mov	r6, r1
 8005f82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f86:	f000 f997 	bl	80062b8 <_malloc_r>
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	b140      	cbz	r0, 8005fa0 <__sfmoreglue+0x28>
 8005f8e:	2100      	movs	r1, #0
 8005f90:	e9c0 1600 	strd	r1, r6, [r0]
 8005f94:	300c      	adds	r0, #12
 8005f96:	60a0      	str	r0, [r4, #8]
 8005f98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f9c:	f7ff fd9e 	bl	8005adc <memset>
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}

08005fa4 <__sfp_lock_acquire>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__sfp_lock_acquire+0x8>)
 8005fa6:	f000 b8b3 	b.w	8006110 <__retarget_lock_acquire_recursive>
 8005faa:	bf00      	nop
 8005fac:	20004aa9 	.word	0x20004aa9

08005fb0 <__sfp_lock_release>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	; (8005fb8 <__sfp_lock_release+0x8>)
 8005fb2:	f000 b8ae 	b.w	8006112 <__retarget_lock_release_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	20004aa9 	.word	0x20004aa9

08005fbc <__sinit_lock_acquire>:
 8005fbc:	4801      	ldr	r0, [pc, #4]	; (8005fc4 <__sinit_lock_acquire+0x8>)
 8005fbe:	f000 b8a7 	b.w	8006110 <__retarget_lock_acquire_recursive>
 8005fc2:	bf00      	nop
 8005fc4:	20004aaa 	.word	0x20004aaa

08005fc8 <__sinit_lock_release>:
 8005fc8:	4801      	ldr	r0, [pc, #4]	; (8005fd0 <__sinit_lock_release+0x8>)
 8005fca:	f000 b8a2 	b.w	8006112 <__retarget_lock_release_recursive>
 8005fce:	bf00      	nop
 8005fd0:	20004aaa 	.word	0x20004aaa

08005fd4 <__sinit>:
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	f7ff fff0 	bl	8005fbc <__sinit_lock_acquire>
 8005fdc:	69a3      	ldr	r3, [r4, #24]
 8005fde:	b11b      	cbz	r3, 8005fe8 <__sinit+0x14>
 8005fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fe4:	f7ff bff0 	b.w	8005fc8 <__sinit_lock_release>
 8005fe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fec:	6523      	str	r3, [r4, #80]	; 0x50
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <__sinit+0x68>)
 8005ff0:	4a13      	ldr	r2, [pc, #76]	; (8006040 <__sinit+0x6c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ff6:	42a3      	cmp	r3, r4
 8005ff8:	bf04      	itt	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	61a3      	streq	r3, [r4, #24]
 8005ffe:	4620      	mov	r0, r4
 8006000:	f000 f820 	bl	8006044 <__sfp>
 8006004:	6060      	str	r0, [r4, #4]
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f81c 	bl	8006044 <__sfp>
 800600c:	60a0      	str	r0, [r4, #8]
 800600e:	4620      	mov	r0, r4
 8006010:	f000 f818 	bl	8006044 <__sfp>
 8006014:	2200      	movs	r2, #0
 8006016:	60e0      	str	r0, [r4, #12]
 8006018:	2104      	movs	r1, #4
 800601a:	6860      	ldr	r0, [r4, #4]
 800601c:	f7ff ff82 	bl	8005f24 <std>
 8006020:	68a0      	ldr	r0, [r4, #8]
 8006022:	2201      	movs	r2, #1
 8006024:	2109      	movs	r1, #9
 8006026:	f7ff ff7d 	bl	8005f24 <std>
 800602a:	68e0      	ldr	r0, [r4, #12]
 800602c:	2202      	movs	r2, #2
 800602e:	2112      	movs	r1, #18
 8006030:	f7ff ff78 	bl	8005f24 <std>
 8006034:	2301      	movs	r3, #1
 8006036:	61a3      	str	r3, [r4, #24]
 8006038:	e7d2      	b.n	8005fe0 <__sinit+0xc>
 800603a:	bf00      	nop
 800603c:	080066b8 	.word	0x080066b8
 8006040:	08005f6d 	.word	0x08005f6d

08006044 <__sfp>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	4607      	mov	r7, r0
 8006048:	f7ff ffac 	bl	8005fa4 <__sfp_lock_acquire>
 800604c:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <__sfp+0x84>)
 800604e:	681e      	ldr	r6, [r3, #0]
 8006050:	69b3      	ldr	r3, [r6, #24]
 8006052:	b913      	cbnz	r3, 800605a <__sfp+0x16>
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff ffbd 	bl	8005fd4 <__sinit>
 800605a:	3648      	adds	r6, #72	; 0x48
 800605c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006060:	3b01      	subs	r3, #1
 8006062:	d503      	bpl.n	800606c <__sfp+0x28>
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	b30b      	cbz	r3, 80060ac <__sfp+0x68>
 8006068:	6836      	ldr	r6, [r6, #0]
 800606a:	e7f7      	b.n	800605c <__sfp+0x18>
 800606c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006070:	b9d5      	cbnz	r5, 80060a8 <__sfp+0x64>
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <__sfp+0x88>)
 8006074:	60e3      	str	r3, [r4, #12]
 8006076:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800607a:	6665      	str	r5, [r4, #100]	; 0x64
 800607c:	f000 f847 	bl	800610e <__retarget_lock_init_recursive>
 8006080:	f7ff ff96 	bl	8005fb0 <__sfp_lock_release>
 8006084:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006088:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800608c:	6025      	str	r5, [r4, #0]
 800608e:	61a5      	str	r5, [r4, #24]
 8006090:	2208      	movs	r2, #8
 8006092:	4629      	mov	r1, r5
 8006094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006098:	f7ff fd20 	bl	8005adc <memset>
 800609c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060a4:	4620      	mov	r0, r4
 80060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a8:	3468      	adds	r4, #104	; 0x68
 80060aa:	e7d9      	b.n	8006060 <__sfp+0x1c>
 80060ac:	2104      	movs	r1, #4
 80060ae:	4638      	mov	r0, r7
 80060b0:	f7ff ff62 	bl	8005f78 <__sfmoreglue>
 80060b4:	4604      	mov	r4, r0
 80060b6:	6030      	str	r0, [r6, #0]
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d1d5      	bne.n	8006068 <__sfp+0x24>
 80060bc:	f7ff ff78 	bl	8005fb0 <__sfp_lock_release>
 80060c0:	230c      	movs	r3, #12
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	e7ee      	b.n	80060a4 <__sfp+0x60>
 80060c6:	bf00      	nop
 80060c8:	080066b8 	.word	0x080066b8
 80060cc:	ffff0001 	.word	0xffff0001

080060d0 <_fwalk_reent>:
 80060d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	4606      	mov	r6, r0
 80060d6:	4688      	mov	r8, r1
 80060d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060dc:	2700      	movs	r7, #0
 80060de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060e2:	f1b9 0901 	subs.w	r9, r9, #1
 80060e6:	d505      	bpl.n	80060f4 <_fwalk_reent+0x24>
 80060e8:	6824      	ldr	r4, [r4, #0]
 80060ea:	2c00      	cmp	r4, #0
 80060ec:	d1f7      	bne.n	80060de <_fwalk_reent+0xe>
 80060ee:	4638      	mov	r0, r7
 80060f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060f4:	89ab      	ldrh	r3, [r5, #12]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d907      	bls.n	800610a <_fwalk_reent+0x3a>
 80060fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060fe:	3301      	adds	r3, #1
 8006100:	d003      	beq.n	800610a <_fwalk_reent+0x3a>
 8006102:	4629      	mov	r1, r5
 8006104:	4630      	mov	r0, r6
 8006106:	47c0      	blx	r8
 8006108:	4307      	orrs	r7, r0
 800610a:	3568      	adds	r5, #104	; 0x68
 800610c:	e7e9      	b.n	80060e2 <_fwalk_reent+0x12>

0800610e <__retarget_lock_init_recursive>:
 800610e:	4770      	bx	lr

08006110 <__retarget_lock_acquire_recursive>:
 8006110:	4770      	bx	lr

08006112 <__retarget_lock_release_recursive>:
 8006112:	4770      	bx	lr

08006114 <__swhatbuf_r>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	460e      	mov	r6, r1
 8006118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611c:	2900      	cmp	r1, #0
 800611e:	b096      	sub	sp, #88	; 0x58
 8006120:	4614      	mov	r4, r2
 8006122:	461d      	mov	r5, r3
 8006124:	da08      	bge.n	8006138 <__swhatbuf_r+0x24>
 8006126:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	602a      	str	r2, [r5, #0]
 800612e:	061a      	lsls	r2, r3, #24
 8006130:	d410      	bmi.n	8006154 <__swhatbuf_r+0x40>
 8006132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006136:	e00e      	b.n	8006156 <__swhatbuf_r+0x42>
 8006138:	466a      	mov	r2, sp
 800613a:	f000 f9a7 	bl	800648c <_fstat_r>
 800613e:	2800      	cmp	r0, #0
 8006140:	dbf1      	blt.n	8006126 <__swhatbuf_r+0x12>
 8006142:	9a01      	ldr	r2, [sp, #4]
 8006144:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006148:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800614c:	425a      	negs	r2, r3
 800614e:	415a      	adcs	r2, r3
 8006150:	602a      	str	r2, [r5, #0]
 8006152:	e7ee      	b.n	8006132 <__swhatbuf_r+0x1e>
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	2000      	movs	r0, #0
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	b016      	add	sp, #88	; 0x58
 800615c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006160 <__smakebuf_r>:
 8006160:	898b      	ldrh	r3, [r1, #12]
 8006162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006164:	079d      	lsls	r5, r3, #30
 8006166:	4606      	mov	r6, r0
 8006168:	460c      	mov	r4, r1
 800616a:	d507      	bpl.n	800617c <__smakebuf_r+0x1c>
 800616c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	6123      	str	r3, [r4, #16]
 8006174:	2301      	movs	r3, #1
 8006176:	6163      	str	r3, [r4, #20]
 8006178:	b002      	add	sp, #8
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	ab01      	add	r3, sp, #4
 800617e:	466a      	mov	r2, sp
 8006180:	f7ff ffc8 	bl	8006114 <__swhatbuf_r>
 8006184:	9900      	ldr	r1, [sp, #0]
 8006186:	4605      	mov	r5, r0
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f895 	bl	80062b8 <_malloc_r>
 800618e:	b948      	cbnz	r0, 80061a4 <__smakebuf_r+0x44>
 8006190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006194:	059a      	lsls	r2, r3, #22
 8006196:	d4ef      	bmi.n	8006178 <__smakebuf_r+0x18>
 8006198:	f023 0303 	bic.w	r3, r3, #3
 800619c:	f043 0302 	orr.w	r3, r3, #2
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	e7e3      	b.n	800616c <__smakebuf_r+0xc>
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <__smakebuf_r+0x7c>)
 80061a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	6020      	str	r0, [r4, #0]
 80061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	9b00      	ldr	r3, [sp, #0]
 80061b4:	6163      	str	r3, [r4, #20]
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	6120      	str	r0, [r4, #16]
 80061ba:	b15b      	cbz	r3, 80061d4 <__smakebuf_r+0x74>
 80061bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061c0:	4630      	mov	r0, r6
 80061c2:	f000 f975 	bl	80064b0 <_isatty_r>
 80061c6:	b128      	cbz	r0, 80061d4 <__smakebuf_r+0x74>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	89a0      	ldrh	r0, [r4, #12]
 80061d6:	4305      	orrs	r5, r0
 80061d8:	81a5      	strh	r5, [r4, #12]
 80061da:	e7cd      	b.n	8006178 <__smakebuf_r+0x18>
 80061dc:	08005f6d 	.word	0x08005f6d

080061e0 <_free_r>:
 80061e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d044      	beq.n	8006270 <_free_r+0x90>
 80061e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ea:	9001      	str	r0, [sp, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f1a1 0404 	sub.w	r4, r1, #4
 80061f2:	bfb8      	it	lt
 80061f4:	18e4      	addlt	r4, r4, r3
 80061f6:	f000 f97d 	bl	80064f4 <__malloc_lock>
 80061fa:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <_free_r+0x94>)
 80061fc:	9801      	ldr	r0, [sp, #4]
 80061fe:	6813      	ldr	r3, [r2, #0]
 8006200:	b933      	cbnz	r3, 8006210 <_free_r+0x30>
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	6014      	str	r4, [r2, #0]
 8006206:	b003      	add	sp, #12
 8006208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800620c:	f000 b978 	b.w	8006500 <__malloc_unlock>
 8006210:	42a3      	cmp	r3, r4
 8006212:	d908      	bls.n	8006226 <_free_r+0x46>
 8006214:	6825      	ldr	r5, [r4, #0]
 8006216:	1961      	adds	r1, r4, r5
 8006218:	428b      	cmp	r3, r1
 800621a:	bf01      	itttt	eq
 800621c:	6819      	ldreq	r1, [r3, #0]
 800621e:	685b      	ldreq	r3, [r3, #4]
 8006220:	1949      	addeq	r1, r1, r5
 8006222:	6021      	streq	r1, [r4, #0]
 8006224:	e7ed      	b.n	8006202 <_free_r+0x22>
 8006226:	461a      	mov	r2, r3
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b10b      	cbz	r3, 8006230 <_free_r+0x50>
 800622c:	42a3      	cmp	r3, r4
 800622e:	d9fa      	bls.n	8006226 <_free_r+0x46>
 8006230:	6811      	ldr	r1, [r2, #0]
 8006232:	1855      	adds	r5, r2, r1
 8006234:	42a5      	cmp	r5, r4
 8006236:	d10b      	bne.n	8006250 <_free_r+0x70>
 8006238:	6824      	ldr	r4, [r4, #0]
 800623a:	4421      	add	r1, r4
 800623c:	1854      	adds	r4, r2, r1
 800623e:	42a3      	cmp	r3, r4
 8006240:	6011      	str	r1, [r2, #0]
 8006242:	d1e0      	bne.n	8006206 <_free_r+0x26>
 8006244:	681c      	ldr	r4, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	6053      	str	r3, [r2, #4]
 800624a:	4421      	add	r1, r4
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	e7da      	b.n	8006206 <_free_r+0x26>
 8006250:	d902      	bls.n	8006258 <_free_r+0x78>
 8006252:	230c      	movs	r3, #12
 8006254:	6003      	str	r3, [r0, #0]
 8006256:	e7d6      	b.n	8006206 <_free_r+0x26>
 8006258:	6825      	ldr	r5, [r4, #0]
 800625a:	1961      	adds	r1, r4, r5
 800625c:	428b      	cmp	r3, r1
 800625e:	bf04      	itt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	6063      	str	r3, [r4, #4]
 8006266:	bf04      	itt	eq
 8006268:	1949      	addeq	r1, r1, r5
 800626a:	6021      	streq	r1, [r4, #0]
 800626c:	6054      	str	r4, [r2, #4]
 800626e:	e7ca      	b.n	8006206 <_free_r+0x26>
 8006270:	b003      	add	sp, #12
 8006272:	bd30      	pop	{r4, r5, pc}
 8006274:	20004aac 	.word	0x20004aac

08006278 <sbrk_aligned>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	4e0e      	ldr	r6, [pc, #56]	; (80062b4 <sbrk_aligned+0x3c>)
 800627c:	460c      	mov	r4, r1
 800627e:	6831      	ldr	r1, [r6, #0]
 8006280:	4605      	mov	r5, r0
 8006282:	b911      	cbnz	r1, 800628a <sbrk_aligned+0x12>
 8006284:	f000 f88c 	bl	80063a0 <_sbrk_r>
 8006288:	6030      	str	r0, [r6, #0]
 800628a:	4621      	mov	r1, r4
 800628c:	4628      	mov	r0, r5
 800628e:	f000 f887 	bl	80063a0 <_sbrk_r>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d00a      	beq.n	80062ac <sbrk_aligned+0x34>
 8006296:	1cc4      	adds	r4, r0, #3
 8006298:	f024 0403 	bic.w	r4, r4, #3
 800629c:	42a0      	cmp	r0, r4
 800629e:	d007      	beq.n	80062b0 <sbrk_aligned+0x38>
 80062a0:	1a21      	subs	r1, r4, r0
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 f87c 	bl	80063a0 <_sbrk_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d101      	bne.n	80062b0 <sbrk_aligned+0x38>
 80062ac:	f04f 34ff 	mov.w	r4, #4294967295
 80062b0:	4620      	mov	r0, r4
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	20004ab0 	.word	0x20004ab0

080062b8 <_malloc_r>:
 80062b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062bc:	1ccd      	adds	r5, r1, #3
 80062be:	f025 0503 	bic.w	r5, r5, #3
 80062c2:	3508      	adds	r5, #8
 80062c4:	2d0c      	cmp	r5, #12
 80062c6:	bf38      	it	cc
 80062c8:	250c      	movcc	r5, #12
 80062ca:	2d00      	cmp	r5, #0
 80062cc:	4607      	mov	r7, r0
 80062ce:	db01      	blt.n	80062d4 <_malloc_r+0x1c>
 80062d0:	42a9      	cmp	r1, r5
 80062d2:	d905      	bls.n	80062e0 <_malloc_r+0x28>
 80062d4:	230c      	movs	r3, #12
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	2600      	movs	r6, #0
 80062da:	4630      	mov	r0, r6
 80062dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e0:	4e2e      	ldr	r6, [pc, #184]	; (800639c <_malloc_r+0xe4>)
 80062e2:	f000 f907 	bl	80064f4 <__malloc_lock>
 80062e6:	6833      	ldr	r3, [r6, #0]
 80062e8:	461c      	mov	r4, r3
 80062ea:	bb34      	cbnz	r4, 800633a <_malloc_r+0x82>
 80062ec:	4629      	mov	r1, r5
 80062ee:	4638      	mov	r0, r7
 80062f0:	f7ff ffc2 	bl	8006278 <sbrk_aligned>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	4604      	mov	r4, r0
 80062f8:	d14d      	bne.n	8006396 <_malloc_r+0xde>
 80062fa:	6834      	ldr	r4, [r6, #0]
 80062fc:	4626      	mov	r6, r4
 80062fe:	2e00      	cmp	r6, #0
 8006300:	d140      	bne.n	8006384 <_malloc_r+0xcc>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	4631      	mov	r1, r6
 8006306:	4638      	mov	r0, r7
 8006308:	eb04 0803 	add.w	r8, r4, r3
 800630c:	f000 f848 	bl	80063a0 <_sbrk_r>
 8006310:	4580      	cmp	r8, r0
 8006312:	d13a      	bne.n	800638a <_malloc_r+0xd2>
 8006314:	6821      	ldr	r1, [r4, #0]
 8006316:	3503      	adds	r5, #3
 8006318:	1a6d      	subs	r5, r5, r1
 800631a:	f025 0503 	bic.w	r5, r5, #3
 800631e:	3508      	adds	r5, #8
 8006320:	2d0c      	cmp	r5, #12
 8006322:	bf38      	it	cc
 8006324:	250c      	movcc	r5, #12
 8006326:	4629      	mov	r1, r5
 8006328:	4638      	mov	r0, r7
 800632a:	f7ff ffa5 	bl	8006278 <sbrk_aligned>
 800632e:	3001      	adds	r0, #1
 8006330:	d02b      	beq.n	800638a <_malloc_r+0xd2>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	442b      	add	r3, r5
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	e00e      	b.n	8006358 <_malloc_r+0xa0>
 800633a:	6822      	ldr	r2, [r4, #0]
 800633c:	1b52      	subs	r2, r2, r5
 800633e:	d41e      	bmi.n	800637e <_malloc_r+0xc6>
 8006340:	2a0b      	cmp	r2, #11
 8006342:	d916      	bls.n	8006372 <_malloc_r+0xba>
 8006344:	1961      	adds	r1, r4, r5
 8006346:	42a3      	cmp	r3, r4
 8006348:	6025      	str	r5, [r4, #0]
 800634a:	bf18      	it	ne
 800634c:	6059      	strne	r1, [r3, #4]
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	bf08      	it	eq
 8006352:	6031      	streq	r1, [r6, #0]
 8006354:	5162      	str	r2, [r4, r5]
 8006356:	604b      	str	r3, [r1, #4]
 8006358:	4638      	mov	r0, r7
 800635a:	f104 060b 	add.w	r6, r4, #11
 800635e:	f000 f8cf 	bl	8006500 <__malloc_unlock>
 8006362:	f026 0607 	bic.w	r6, r6, #7
 8006366:	1d23      	adds	r3, r4, #4
 8006368:	1af2      	subs	r2, r6, r3
 800636a:	d0b6      	beq.n	80062da <_malloc_r+0x22>
 800636c:	1b9b      	subs	r3, r3, r6
 800636e:	50a3      	str	r3, [r4, r2]
 8006370:	e7b3      	b.n	80062da <_malloc_r+0x22>
 8006372:	6862      	ldr	r2, [r4, #4]
 8006374:	42a3      	cmp	r3, r4
 8006376:	bf0c      	ite	eq
 8006378:	6032      	streq	r2, [r6, #0]
 800637a:	605a      	strne	r2, [r3, #4]
 800637c:	e7ec      	b.n	8006358 <_malloc_r+0xa0>
 800637e:	4623      	mov	r3, r4
 8006380:	6864      	ldr	r4, [r4, #4]
 8006382:	e7b2      	b.n	80062ea <_malloc_r+0x32>
 8006384:	4634      	mov	r4, r6
 8006386:	6876      	ldr	r6, [r6, #4]
 8006388:	e7b9      	b.n	80062fe <_malloc_r+0x46>
 800638a:	230c      	movs	r3, #12
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	4638      	mov	r0, r7
 8006390:	f000 f8b6 	bl	8006500 <__malloc_unlock>
 8006394:	e7a1      	b.n	80062da <_malloc_r+0x22>
 8006396:	6025      	str	r5, [r4, #0]
 8006398:	e7de      	b.n	8006358 <_malloc_r+0xa0>
 800639a:	bf00      	nop
 800639c:	20004aac 	.word	0x20004aac

080063a0 <_sbrk_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	; (80063bc <_sbrk_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fa fc64 	bl	8000c78 <_sbrk>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_sbrk_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_sbrk_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	20004ab4 	.word	0x20004ab4

080063c0 <__sread>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	460c      	mov	r4, r1
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	f000 f8a0 	bl	800650c <_read_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	bfab      	itete	ge
 80063d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063d2:	89a3      	ldrhlt	r3, [r4, #12]
 80063d4:	181b      	addge	r3, r3, r0
 80063d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063da:	bfac      	ite	ge
 80063dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80063de:	81a3      	strhlt	r3, [r4, #12]
 80063e0:	bd10      	pop	{r4, pc}

080063e2 <__swrite>:
 80063e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	461f      	mov	r7, r3
 80063e8:	898b      	ldrh	r3, [r1, #12]
 80063ea:	05db      	lsls	r3, r3, #23
 80063ec:	4605      	mov	r5, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	4616      	mov	r6, r2
 80063f2:	d505      	bpl.n	8006400 <__swrite+0x1e>
 80063f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f8:	2302      	movs	r3, #2
 80063fa:	2200      	movs	r2, #0
 80063fc:	f000 f868 	bl	80064d0 <_lseek_r>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	4632      	mov	r2, r6
 800640e:	463b      	mov	r3, r7
 8006410:	4628      	mov	r0, r5
 8006412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	f000 b817 	b.w	8006448 <_write_r>

0800641a <__sseek>:
 800641a:	b510      	push	{r4, lr}
 800641c:	460c      	mov	r4, r1
 800641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006422:	f000 f855 	bl	80064d0 <_lseek_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	bf15      	itete	ne
 800642c:	6560      	strne	r0, [r4, #84]	; 0x54
 800642e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006436:	81a3      	strheq	r3, [r4, #12]
 8006438:	bf18      	it	ne
 800643a:	81a3      	strhne	r3, [r4, #12]
 800643c:	bd10      	pop	{r4, pc}

0800643e <__sclose>:
 800643e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006442:	f000 b813 	b.w	800646c <_close_r>
	...

08006448 <_write_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d07      	ldr	r5, [pc, #28]	; (8006468 <_write_r+0x20>)
 800644c:	4604      	mov	r4, r0
 800644e:	4608      	mov	r0, r1
 8006450:	4611      	mov	r1, r2
 8006452:	2200      	movs	r2, #0
 8006454:	602a      	str	r2, [r5, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f7fa fbbd 	bl	8000bd6 <_write>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_write_r+0x1e>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	b103      	cbz	r3, 8006466 <_write_r+0x1e>
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	20004ab4 	.word	0x20004ab4

0800646c <_close_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4d06      	ldr	r5, [pc, #24]	; (8006488 <_close_r+0x1c>)
 8006470:	2300      	movs	r3, #0
 8006472:	4604      	mov	r4, r0
 8006474:	4608      	mov	r0, r1
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	f7fa fbc9 	bl	8000c0e <_close>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_close_r+0x1a>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_close_r+0x1a>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	20004ab4 	.word	0x20004ab4

0800648c <_fstat_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d07      	ldr	r5, [pc, #28]	; (80064ac <_fstat_r+0x20>)
 8006490:	2300      	movs	r3, #0
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	4611      	mov	r1, r2
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	f7fa fbc4 	bl	8000c26 <_fstat>
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	d102      	bne.n	80064a8 <_fstat_r+0x1c>
 80064a2:	682b      	ldr	r3, [r5, #0]
 80064a4:	b103      	cbz	r3, 80064a8 <_fstat_r+0x1c>
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	bf00      	nop
 80064ac:	20004ab4 	.word	0x20004ab4

080064b0 <_isatty_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d06      	ldr	r5, [pc, #24]	; (80064cc <_isatty_r+0x1c>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	f7fa fbc3 	bl	8000c46 <_isatty>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_isatty_r+0x1a>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_isatty_r+0x1a>
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	20004ab4 	.word	0x20004ab4

080064d0 <_lseek_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d07      	ldr	r5, [pc, #28]	; (80064f0 <_lseek_r+0x20>)
 80064d4:	4604      	mov	r4, r0
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	2200      	movs	r2, #0
 80064dc:	602a      	str	r2, [r5, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f7fa fbbc 	bl	8000c5c <_lseek>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_lseek_r+0x1e>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_lseek_r+0x1e>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20004ab4 	.word	0x20004ab4

080064f4 <__malloc_lock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	; (80064fc <__malloc_lock+0x8>)
 80064f6:	f7ff be0b 	b.w	8006110 <__retarget_lock_acquire_recursive>
 80064fa:	bf00      	nop
 80064fc:	20004aa8 	.word	0x20004aa8

08006500 <__malloc_unlock>:
 8006500:	4801      	ldr	r0, [pc, #4]	; (8006508 <__malloc_unlock+0x8>)
 8006502:	f7ff be06 	b.w	8006112 <__retarget_lock_release_recursive>
 8006506:	bf00      	nop
 8006508:	20004aa8 	.word	0x20004aa8

0800650c <_read_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	; (800652c <_read_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f7fa fb3e 	bl	8000b9c <_read>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_read_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_read_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20004ab4 	.word	0x20004ab4

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr

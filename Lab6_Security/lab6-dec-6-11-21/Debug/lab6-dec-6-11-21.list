
lab6-dec-6-11-21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006954  08006954  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800695c  0800695c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000264  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011977  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000231e  00000000  00000000  00031a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  00033d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00034cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021aa4  00000000  00000000  00035b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117d4  00000000  00000000  0005762c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0d24  00000000  00000000  00068e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139b24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c44  00000000  00000000  00139b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006650 	.word	0x08006650

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006650 	.word	0x08006650

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <RandomSeed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t RandomSeed()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	Seed = rand() % (0xFFFFFFFF - 0x1) + 1;
 8000578:	f005 f832 	bl	80055e0 <rand>
 800057c:	4603      	mov	r3, r0
 800057e:	4619      	mov	r1, r3
 8000580:	f111 0f02 	cmn.w	r1, #2
 8000584:	bf2c      	ite	cs
 8000586:	2201      	movcs	r2, #1
 8000588:	2200      	movcc	r2, #0
 800058a:	4613      	mov	r3, r2
 800058c:	07db      	lsls	r3, r3, #31
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	1aca      	subs	r2, r1, r3
 8000594:	1c53      	adds	r3, r2, #1
 8000596:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <RandomSeed+0x30>)
 8000598:	6013      	str	r3, [r2, #0]
	return Seed;
 800059a:	4b02      	ldr	r3, [pc, #8]	; (80005a4 <RandomSeed+0x30>)
 800059c:	681b      	ldr	r3, [r3, #0]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000260 	.word	0x20000260

080005a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	b08f      	sub	sp, #60	; 0x3c
 80005ac:	af06      	add	r7, sp, #24
 80005ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Node1_RxHeader, Node1_RxData);
 80005b0:	4b9a      	ldr	r3, [pc, #616]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80005b2:	4a9b      	ldr	r2, [pc, #620]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f002 fbf1 	bl	8002d9e <HAL_CAN_GetRxMessage>

	// if this is send seed (from ECU to tester)
	if (Node1_RxHeader.DLC == 8 && Node1_RxData[1] == 0x67 && Node1_RxData[2] == 0x01)
 80005bc:	4b98      	ldr	r3, [pc, #608]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	d12e      	bne.n	8000622 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 80005c4:	4b95      	ldr	r3, [pc, #596]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	2b67      	cmp	r3, #103	; 0x67
 80005ca:	d12a      	bne.n	8000622 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 80005cc:	4b93      	ldr	r3, [pc, #588]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d126      	bne.n	8000622 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
	{
		Node1_TxData[0] = 0x06;
 80005d4:	4b93      	ldr	r3, [pc, #588]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80005d6:	2206      	movs	r2, #6
 80005d8:	701a      	strb	r2, [r3, #0]
		Node1_TxData[1] = 0x27;
 80005da:	4b92      	ldr	r3, [pc, #584]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80005dc:	2227      	movs	r2, #39	; 0x27
 80005de:	705a      	strb	r2, [r3, #1]
		Node1_TxData[2] = 0x02;
 80005e0:	4b90      	ldr	r3, [pc, #576]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	709a      	strb	r2, [r3, #2]
		Node1_TxData[3] = Node1_RxData[3] + 1;
 80005e6:	4b8d      	ldr	r3, [pc, #564]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	3301      	adds	r3, #1
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b8d      	ldr	r3, [pc, #564]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80005f0:	70da      	strb	r2, [r3, #3]
		Node1_TxData[4] = Node1_RxData[4] + 1;
 80005f2:	4b8a      	ldr	r3, [pc, #552]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b8a      	ldr	r3, [pc, #552]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80005fc:	711a      	strb	r2, [r3, #4]
		Node1_TxData[5] = Node1_RxData[5] + 1;
 80005fe:	4b87      	ldr	r3, [pc, #540]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b87      	ldr	r3, [pc, #540]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000608:	715a      	strb	r2, [r3, #5]
		Node1_TxData[6] = Node1_RxData[6] + 1;
 800060a:	4b84      	ldr	r3, [pc, #528]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	3301      	adds	r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b84      	ldr	r3, [pc, #528]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000614:	719a      	strb	r2, [r3, #6]
	    HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData,
 8000616:	4b84      	ldr	r3, [pc, #528]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8000618:	4a82      	ldr	r2, [pc, #520]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800061a:	4984      	ldr	r1, [pc, #528]	; (800082c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 800061c:	4884      	ldr	r0, [pc, #528]	; (8000830 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800061e:	f002 fae3 	bl	8002be8 <HAL_CAN_AddTxMessage>
		 &Node1_TxMailbox);
	}

	// if this is response access
	if (Node1_RxHeader.DLC == 8 && Node1_RxData[1] == 0x67 && Node1_RxData[2] == 0x02)
 8000622:	4b7f      	ldr	r3, [pc, #508]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	2b08      	cmp	r3, #8
 8000628:	d116      	bne.n	8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
 800062a:	4b7c      	ldr	r3, [pc, #496]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	2b67      	cmp	r3, #103	; 0x67
 8000630:	d112      	bne.n	8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
 8000632:	4b7a      	ldr	r3, [pc, #488]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000634:	789b      	ldrb	r3, [r3, #2]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d10e      	bne.n	8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
	{
		printf("unlock ECU\r\n\n");
 800063a:	487e      	ldr	r0, [pc, #504]	; (8000834 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800063c:	f004 ffc8 	bl	80055d0 <puts>
		is_validKey = 1;
 8000640:	4b7d      	ldr	r3, [pc, #500]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000642:	2201      	movs	r2, #1
 8000644:	601a      	str	r2, [r3, #0]
		timer_10s = 0;
 8000646:	4b7d      	ldr	r3, [pc, #500]	; (800083c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
		is_start = 1;
 800064c:	4b7c      	ldr	r3, [pc, #496]	; (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8000652:	487c      	ldr	r0, [pc, #496]	; (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000654:	f003 fee2 	bl	800441c <HAL_TIM_Base_Start_IT>
	}
	if (Node1_RxHeader.DLC == 8 && Node1_RxData[1] == 0x7F && Node1_RxData[2] == 0x67)
 8000658:	4b71      	ldr	r3, [pc, #452]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800065a:	691b      	ldr	r3, [r3, #16]
 800065c:	2b08      	cmp	r3, #8
 800065e:	d11d      	bne.n	800069c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
 8000660:	4b6e      	ldr	r3, [pc, #440]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	2b7f      	cmp	r3, #127	; 0x7f
 8000666:	d119      	bne.n	800069c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
 8000668:	4b6c      	ldr	r3, [pc, #432]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800066a:	789b      	ldrb	r3, [r3, #2]
 800066c:	2b67      	cmp	r3, #103	; 0x67
 800066e:	d115      	bne.n	800069c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
	{
		printf("Nagative response from ECU!\r\n");
 8000670:	4875      	ldr	r0, [pc, #468]	; (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000672:	f004 ffad 	bl	80055d0 <puts>
		if (Node1_RxData[3] == 0x35)
 8000676:	4b69      	ldr	r3, [pc, #420]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000678:	78db      	ldrb	r3, [r3, #3]
 800067a:	2b35      	cmp	r3, #53	; 0x35
 800067c:	d10e      	bne.n	800069c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
		{
			printf("Invalid key!\r\n");
 800067e:	4873      	ldr	r0, [pc, #460]	; (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000680:	f004 ffa6 	bl	80055d0 <puts>
	  		printf("\nPerpare for request new seed...\r\n\n");
 8000684:	4872      	ldr	r0, [pc, #456]	; (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8000686:	f004 ffa3 	bl	80055d0 <puts>
			is_validKey = 0;
 800068a:	4b6b      	ldr	r3, [pc, #428]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
			is_start = 1;
 8000690:	4b6b      	ldr	r3, [pc, #428]	; (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 8000696:	486f      	ldr	r0, [pc, #444]	; (8000854 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8000698:	f003 fec0 	bl	800441c <HAL_TIM_Base_Start_IT>
		}

	}
	// adc
	if (Node1_RxHeader.DLC == 8 && Node1_RxData[1] == 0x62)
 800069c:	4b60      	ldr	r3, [pc, #384]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	2b08      	cmp	r3, #8
 80006a2:	d129      	bne.n	80006f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
 80006a4:	4b5d      	ldr	r3, [pc, #372]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	2b62      	cmp	r3, #98	; 0x62
 80006aa:	d125      	bne.n	80006f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
	{
		printf("Tester received ADC value: %x-%x-%x-%x-%x-%x-%x-%x\n", Node1_RxData[0],Node1_RxData[1],Node1_RxData[2],Node1_RxData[3], Node1_RxData[4], Node1_RxData[5], Node1_RxData[6], Node1_RxData[7]);
 80006ac:	4b5b      	ldr	r3, [pc, #364]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461d      	mov	r5, r3
 80006b2:	4b5a      	ldr	r3, [pc, #360]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	461e      	mov	r6, r3
 80006b8:	4b58      	ldr	r3, [pc, #352]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006ba:	789b      	ldrb	r3, [r3, #2]
 80006bc:	469c      	mov	ip, r3
 80006be:	4b57      	ldr	r3, [pc, #348]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006c0:	78db      	ldrb	r3, [r3, #3]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b55      	ldr	r3, [pc, #340]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4b54      	ldr	r3, [pc, #336]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006cc:	795b      	ldrb	r3, [r3, #5]
 80006ce:	4618      	mov	r0, r3
 80006d0:	4b52      	ldr	r3, [pc, #328]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006d2:	799b      	ldrb	r3, [r3, #6]
 80006d4:	461c      	mov	r4, r3
 80006d6:	4b51      	ldr	r3, [pc, #324]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80006d8:	79db      	ldrb	r3, [r3, #7]
 80006da:	9304      	str	r3, [sp, #16]
 80006dc:	9403      	str	r4, [sp, #12]
 80006de:	9002      	str	r0, [sp, #8]
 80006e0:	9101      	str	r1, [sp, #4]
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	4663      	mov	r3, ip
 80006e6:	4632      	mov	r2, r6
 80006e8:	4629      	mov	r1, r5
 80006ea:	485b      	ldr	r0, [pc, #364]	; (8000858 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80006ec:	f004 feea 	bl	80054c4 <iprintf>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED0_Pin);
 80006f0:	2101      	movs	r1, #1
 80006f2:	485a      	ldr	r0, [pc, #360]	; (800085c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80006f4:	f003 f977 	bl	80039e6 <HAL_GPIO_TogglePin>
	}

	// joystick
	if (Node1_RxHeader.StdId == 0x7A2 && (Node1_RxData[0] >> 4) == 0x3) //Flow control
 80006f8:	4b49      	ldr	r3, [pc, #292]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8000700:	4293      	cmp	r3, r2
 8000702:	f040 8171 	bne.w	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
 8000706:	4b45      	ldr	r3, [pc, #276]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	091b      	lsrs	r3, r3, #4
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b03      	cmp	r3, #3
 8000710:	f040 816a 	bne.w	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000714:	2102      	movs	r1, #2
 8000716:	4851      	ldr	r0, [pc, #324]	; (800085c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000718:	f003 f965 	bl	80039e6 <HAL_GPIO_TogglePin>
			printf("Tester received FC: %x-%x-%x-%x-%x-%x-%x-%x\r\n", Node1_RxData[0],Node1_RxData[1],Node1_RxData[2],Node1_RxData[3], Node1_RxData[4], Node1_RxData[5], Node1_RxData[6], Node1_RxData[7]);
 800071c:	4b3f      	ldr	r3, [pc, #252]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461d      	mov	r5, r3
 8000722:	4b3e      	ldr	r3, [pc, #248]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	461e      	mov	r6, r3
 8000728:	4b3c      	ldr	r3, [pc, #240]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800072a:	789b      	ldrb	r3, [r3, #2]
 800072c:	469c      	mov	ip, r3
 800072e:	4b3b      	ldr	r3, [pc, #236]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000730:	78db      	ldrb	r3, [r3, #3]
 8000732:	461a      	mov	r2, r3
 8000734:	4b39      	ldr	r3, [pc, #228]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	4619      	mov	r1, r3
 800073a:	4b38      	ldr	r3, [pc, #224]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	4618      	mov	r0, r3
 8000740:	4b36      	ldr	r3, [pc, #216]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000742:	799b      	ldrb	r3, [r3, #6]
 8000744:	461c      	mov	r4, r3
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8000748:	79db      	ldrb	r3, [r3, #7]
 800074a:	9304      	str	r3, [sp, #16]
 800074c:	9403      	str	r4, [sp, #12]
 800074e:	9002      	str	r0, [sp, #8]
 8000750:	9101      	str	r1, [sp, #4]
 8000752:	9200      	str	r2, [sp, #0]
 8000754:	4663      	mov	r3, ip
 8000756:	4632      	mov	r2, r6
 8000758:	4629      	mov	r1, r5
 800075a:	4841      	ldr	r0, [pc, #260]	; (8000860 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800075c:	f004 feb2 	bl	80054c4 <iprintf>

			SNum = 0x00;
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]

			if((data_length-3) % 7 == 0)
 8000766:	4b40      	ldr	r3, [pc, #256]	; (8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	1eda      	subs	r2, r3, #3
 800076c:	4b3f      	ldr	r3, [pc, #252]	; (800086c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800076e:	fb83 1302 	smull	r1, r3, r3, r2
 8000772:	4413      	add	r3, r2
 8000774:	1099      	asrs	r1, r3, #2
 8000776:	17d3      	asrs	r3, r2, #31
 8000778:	1ac9      	subs	r1, r1, r3
 800077a:	460b      	mov	r3, r1
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	1a5b      	subs	r3, r3, r1
 8000780:	1ad1      	subs	r1, r2, r3
 8000782:	2900      	cmp	r1, #0
 8000784:	d10d      	bne.n	80007a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fa>
				number_CF = (data_length-3)/7;
 8000786:	4b38      	ldr	r3, [pc, #224]	; (8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	3b03      	subs	r3, #3
 800078c:	4a37      	ldr	r2, [pc, #220]	; (800086c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800078e:	fb82 1203 	smull	r1, r2, r2, r3
 8000792:	441a      	add	r2, r3
 8000794:	1092      	asrs	r2, r2, #2
 8000796:	17db      	asrs	r3, r3, #31
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b34      	ldr	r3, [pc, #208]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e00e      	b.n	80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>
			else
				number_CF = ((data_length-3)/7) + 1;
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	3b03      	subs	r3, #3
 80007a8:	4a30      	ldr	r2, [pc, #192]	; (800086c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 80007aa:	fb82 1203 	smull	r1, r2, r2, r3
 80007ae:	441a      	add	r2, r3
 80007b0:	1092      	asrs	r2, r2, #2
 80007b2:	17db      	asrs	r3, r3, #31
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80007be:	701a      	strb	r2, [r3, #0]

			if(left_button == 1 && SNum <= 0x0F)
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d179      	bne.n	80008bc <HAL_CAN_RxFifo0MsgPendingCallback+0x314>
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d875      	bhi.n	80008bc <HAL_CAN_RxFifo0MsgPendingCallback+0x314>
			{
				for(int i = 0; i < number_CF; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	e068      	b.n	80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x300>
				{
					Node1_TxData[0] = 0x21 + SNum;
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3321      	adds	r3, #33	; 0x21
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80007e0:	701a      	strb	r2, [r3, #0]
					SNum += 0x01;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80007ec:	701a      	strb	r2, [r3, #0]
					for(int j = 1; j<8; j++)
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	e04d      	b.n	8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>
					{
						if(current_pos <= SIGNAL_LEN)
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b06      	cmp	r3, #6
 80007fa:	d841      	bhi.n	8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>
							Node1_TxData[j]=LEFT_DATA[current_pos++];
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	b2d1      	uxtb	r1, r2
 8000804:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000806:	7011      	strb	r1, [r2, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800080c:	5c99      	ldrb	r1, [r3, r2]
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	4413      	add	r3, r2
 8000814:	460a      	mov	r2, r1
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e037      	b.n	800088a <HAL_CAN_RxFifo0MsgPendingCallback+0x2e2>
 800081a:	bf00      	nop
 800081c:	2000024c 	.word	0x2000024c
 8000820:	20000228 	.word	0x20000228
 8000824:	20000244 	.word	0x20000244
 8000828:	20000254 	.word	0x20000254
 800082c:	20000210 	.word	0x20000210
 8000830:	200000ec 	.word	0x200000ec
 8000834:	08006668 	.word	0x08006668
 8000838:	20000004 	.word	0x20000004
 800083c:	20000000 	.word	0x20000000
 8000840:	20000270 	.word	0x20000270
 8000844:	2000013c 	.word	0x2000013c
 8000848:	08006678 	.word	0x08006678
 800084c:	08006698 	.word	0x08006698
 8000850:	080066a8 	.word	0x080066a8
 8000854:	20000184 	.word	0x20000184
 8000858:	080066cc 	.word	0x080066cc
 800085c:	40020400 	.word	0x40020400
 8000860:	08006700 	.word	0x08006700
 8000864:	2000027c 	.word	0x2000027c
 8000868:	20000278 	.word	0x20000278
 800086c:	92492493 	.word	0x92492493
 8000870:	2000027a 	.word	0x2000027a
 8000874:	20000274 	.word	0x20000274
 8000878:	2000027b 	.word	0x2000027b
 800087c:	20000008 	.word	0x20000008
						else
							Node1_TxData[j] = 0x00;
 8000880:	4a5b      	ldr	r2, [pc, #364]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	4413      	add	r3, r2
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
					for(int j = 1; j<8; j++)
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3301      	adds	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	2b07      	cmp	r3, #7
 8000894:	ddae      	ble.n	80007f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
					}
					HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData, &Node1_TxMailbox);
 8000896:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 8000898:	4a55      	ldr	r2, [pc, #340]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 800089a:	4957      	ldr	r1, [pc, #348]	; (80009f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x450>)
 800089c:	4857      	ldr	r0, [pc, #348]	; (80009fc <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 800089e:	f002 f9a3 	bl	8002be8 <HAL_CAN_AddTxMessage>
				for(int i = 0; i < number_CF; i++)
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3301      	adds	r3, #1
 80008a6:	61fb      	str	r3, [r7, #28]
 80008a8:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	4293      	cmp	r3, r2
 80008b2:	db90      	blt.n	80007d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22e>
				}
			left_button = 0;
 80008b4:	4b53      	ldr	r3, [pc, #332]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e095      	b.n	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
			}

			else if(right_button == 1 && SNum <= 0x0F)
 80008bc:	4b52      	ldr	r3, [pc, #328]	; (8000a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d146      	bne.n	8000952 <HAL_CAN_RxFifo0MsgPendingCallback+0x3aa>
 80008c4:	4b51      	ldr	r3, [pc, #324]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d842      	bhi.n	8000952 <HAL_CAN_RxFifo0MsgPendingCallback+0x3aa>
			{
				for(int i = 0; i < number_CF; i++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e035      	b.n	800093e <HAL_CAN_RxFifo0MsgPendingCallback+0x396>
				{
					Node1_TxData[0] = 0x21 + SNum;
 80008d2:	4b4e      	ldr	r3, [pc, #312]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3321      	adds	r3, #33	; 0x21
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 80008dc:	701a      	strb	r2, [r3, #0]
					SNum += 0x01;
 80008de:	4b4b      	ldr	r3, [pc, #300]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b49      	ldr	r3, [pc, #292]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008e8:	701a      	strb	r2, [r3, #0]
					for(int j = 1; j<8; j++)
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	e01a      	b.n	8000926 <HAL_CAN_RxFifo0MsgPendingCallback+0x37e>
					{
						if(current_pos <= SIGNAL_LEN)
 80008f0:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b06      	cmp	r3, #6
 80008f6:	d80e      	bhi.n	8000916 <HAL_CAN_RxFifo0MsgPendingCallback+0x36e>
							Node1_TxData[j]=RIGHT_DATA[current_pos++];
 80008f8:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	b2d1      	uxtb	r1, r2
 8000900:	4a43      	ldr	r2, [pc, #268]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000902:	7011      	strb	r1, [r2, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 8000908:	5c99      	ldrb	r1, [r3, r2]
 800090a:	4a39      	ldr	r2, [pc, #228]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	4413      	add	r3, r2
 8000910:	460a      	mov	r2, r1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e004      	b.n	8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0x378>
						else
							Node1_TxData[j] = 0x00;
 8000916:	4a36      	ldr	r2, [pc, #216]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4413      	add	r3, r2
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
					for(int j = 1; j<8; j++)
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	3301      	adds	r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	2b07      	cmp	r3, #7
 800092a:	dde1      	ble.n	80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>
					}
					HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData, &Node1_TxMailbox);
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 800092e:	4a30      	ldr	r2, [pc, #192]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 8000930:	4931      	ldr	r1, [pc, #196]	; (80009f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x450>)
 8000932:	4832      	ldr	r0, [pc, #200]	; (80009fc <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 8000934:	f002 f958 	bl	8002be8 <HAL_CAN_AddTxMessage>
				for(int i = 0; i < number_CF; i++)
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	3301      	adds	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	4293      	cmp	r3, r2
 8000948:	dbc3      	blt.n	80008d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x32a>
				}
			right_button = 0;
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e04a      	b.n	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
			}

			else if(middle_button == 1 && SNum <= 0x0F)
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d146      	bne.n	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
 800095a:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b0f      	cmp	r3, #15
 8000960:	d842      	bhi.n	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
			{
				for(int i = 0; i < number_CF; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e035      	b.n	80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x42c>
				{
					Node1_TxData[0] = 0x21 + SNum;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	3321      	adds	r3, #33	; 0x21
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 8000972:	701a      	strb	r2, [r3, #0]
					SNum += 0x01;
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800097e:	701a      	strb	r2, [r3, #0]
					for(int j = 1; j<8; j++)
 8000980:	2301      	movs	r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	e01a      	b.n	80009bc <HAL_CAN_RxFifo0MsgPendingCallback+0x414>
					{
						if(current_pos <= SIGNAL_LEN)
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b06      	cmp	r3, #6
 800098c:	d80e      	bhi.n	80009ac <HAL_CAN_RxFifo0MsgPendingCallback+0x404>
							Node1_TxData[j]=MIDDLE_DATA[current_pos++];
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	b2d1      	uxtb	r1, r2
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000998:	7011      	strb	r1, [r2, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 800099e:	5c99      	ldrb	r1, [r3, r2]
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4413      	add	r3, r2
 80009a6:	460a      	mov	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e004      	b.n	80009b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x40e>
						else
							Node1_TxData[j] = 0x00;
 80009ac:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
					for(int j = 1; j<8; j++)
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b07      	cmp	r3, #7
 80009c0:	dde1      	ble.n	8000986 <HAL_CAN_RxFifo0MsgPendingCallback+0x3de>
					}
					HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData, &Node1_TxMailbox);
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 80009c6:	490c      	ldr	r1, [pc, #48]	; (80009f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x450>)
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 80009ca:	f002 f90d 	bl	8002be8 <HAL_CAN_AddTxMessage>
				for(int i = 0; i < number_CF; i++)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4293      	cmp	r3, r2
 80009de:	dbc3      	blt.n	8000968 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c0>
				}
			middle_button = 0;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
			}
		}
}
 80009e6:	e7ff      	b.n	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
 80009e8:	bf00      	nop
 80009ea:	3724      	adds	r7, #36	; 0x24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f0:	20000244 	.word	0x20000244
 80009f4:	20000254 	.word	0x20000254
 80009f8:	20000210 	.word	0x20000210
 80009fc:	200000ec 	.word	0x200000ec
 8000a00:	2000027a 	.word	0x2000027a
 8000a04:	20000274 	.word	0x20000274
 8000a08:	20000275 	.word	0x20000275
 8000a0c:	2000027c 	.word	0x2000027c
 8000a10:	2000027b 	.word	0x2000027b
 8000a14:	20000010 	.word	0x20000010
 8000a18:	20000276 	.word	0x20000276
 8000a1c:	20000280 	.word	0x20000280

08000a20 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af06      	add	r7, sp, #24
 8000a26:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Node2_RxHeader, Node2_RxData);
 8000a28:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000a2a:	4a46      	ldr	r2, [pc, #280]	; (8000b44 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f002 f9b5 	bl	8002d9e <HAL_CAN_GetRxMessage>

	// if this is request seed (from tester to ECU)
	if (Node2_RxHeader.DLC == 8 && Node2_RxData[1] == 0x27 && Node2_RxData[2] == 0x01)
 8000a34:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	d14a      	bne.n	8000ad2 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
 8000a3c:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000a3e:	785b      	ldrb	r3, [r3, #1]
 8000a40:	2b27      	cmp	r3, #39	; 0x27
 8000a42:	d146      	bne.n	8000ad2 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
 8000a44:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000a46:	789b      	ldrb	r3, [r3, #2]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d142      	bne.n	8000ad2 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
	{
		printf("Request seed\r\n");
 8000a4c:	483e      	ldr	r0, [pc, #248]	; (8000b48 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000a4e:	f004 fdbf 	bl	80055d0 <puts>
//		HAL_Delay(10);
		Node2_TxData[0] = 0x06;
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000a54:	2206      	movs	r2, #6
 8000a56:	701a      	strb	r2, [r3, #0]
		Node2_TxData[1] = Node2_RxData[1] + 0x40;
 8000a58:	4b39      	ldr	r3, [pc, #228]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	3340      	adds	r3, #64	; 0x40
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000a62:	705a      	strb	r2, [r3, #1]
		Node2_TxData[2] = 0x01;
 8000a64:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	709a      	strb	r2, [r3, #2]
		RandomSeed();
 8000a6a:	f7ff fd83 	bl	8000574 <RandomSeed>
		printf("Seed: %x\r\n",Seed);
 8000a6e:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4837      	ldr	r0, [pc, #220]	; (8000b54 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000a76:	f004 fd25 	bl	80054c4 <iprintf>
		Node2_TxData[3] = (Seed & 0xff000000UL) >> 24;
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	0e1b      	lsrs	r3, r3, #24
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000a84:	70da      	strb	r2, [r3, #3]
		Node2_TxData[4] = (Seed & 0x00ff0000UL) >> 16;
 8000a86:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000a90:	711a      	strb	r2, [r3, #4]
		Node2_TxData[5] = (Seed & 0x0000ff00UL) >>  8;
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000a9c:	715a      	strb	r2, [r3, #5]
		Node2_TxData[6] = (Seed & 0x000000ffUL);
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000aa6:	719a      	strb	r2, [r3, #6]
//		printf("compare Seed: %x-%x-%x-%x\n", Node2_TxData[3], Node2_TxData[4], Node2_TxData[5], Node2_TxData[6]);
		KeyECU = Seed + 0x01010101 + caseFalse;
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	f103 3301 	add.w	r3, r3, #16843009	; 0x1010101
 8000ab6:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 8000ab8:	6013      	str	r3, [r2, #0]
		printf("KeyECU: %x\r\n",KeyECU);
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4827      	ldr	r0, [pc, #156]	; (8000b60 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000ac2:	f004 fcff 	bl	80054c4 <iprintf>
		HAL_CAN_AddTxMessage(&hcan2, &Node2_TxHeader, Node2_TxData,
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000aca:	4927      	ldr	r1, [pc, #156]	; (8000b68 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8000acc:	4827      	ldr	r0, [pc, #156]	; (8000b6c <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8000ace:	f002 f88b 	bl	8002be8 <HAL_CAN_AddTxMessage>
					 &Node2_TxMailbox);
	}
	// if this is send key (from tester to ECU)
	if (Node2_RxHeader.DLC == 8 && Node2_RxData[1] == 0x27 && Node2_RxData[2] == 0x02)
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d163      	bne.n	8000ba2 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000adc:	785b      	ldrb	r3, [r3, #1]
 8000ade:	2b27      	cmp	r3, #39	; 0x27
 8000ae0:	d15f      	bne.n	8000ba2 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000ae4:	789b      	ldrb	r3, [r3, #2]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d15b      	bne.n	8000ba2 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
	{

		KeyTester = (Node2_RxData[3] << 24) + (Node2_RxData[4] << 16) + (Node2_RxData[5] << 8) + Node2_RxData[6];
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000aec:	78db      	ldrb	r3, [r3, #3]
 8000aee:	061a      	lsls	r2, r3, #24
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000af2:	791b      	ldrb	r3, [r3, #4]
 8000af4:	041b      	lsls	r3, r3, #16
 8000af6:	441a      	add	r2, r3
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	4413      	add	r3, r2
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000b02:	7992      	ldrb	r2, [r2, #6]
 8000b04:	4413      	add	r3, r2
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8000b0a:	601a      	str	r2, [r3, #0]
		printf("Keytester: %x\r\n\n",KeyTester);
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8000b14:	f004 fcd6 	bl	80054c4 <iprintf>
		if (KeyTester == KeyECU)
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d129      	bne.n	8000b78 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>
		{
			Node2_TxData[0] = 0x02;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	701a      	strb	r2, [r3, #0]
			Node2_TxData[1] = Node2_RxData[1] + 0x40;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	3340      	adds	r3, #64	; 0x40
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000b34:	705a      	strb	r2, [r3, #1]
			Node2_TxData[2] = 0x02;
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	709a      	strb	r2, [r3, #2]
 8000b3c:	e02b      	b.n	8000b96 <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
 8000b3e:	bf00      	nop
 8000b40:	200002c4 	.word	0x200002c4
 8000b44:	200002a0 	.word	0x200002a0
 8000b48:	08006730 	.word	0x08006730
 8000b4c:	200002bc 	.word	0x200002bc
 8000b50:	20000260 	.word	0x20000260
 8000b54:	08006740 	.word	0x08006740
 8000b58:	2000026c 	.word	0x2000026c
 8000b5c:	20000264 	.word	0x20000264
 8000b60:	0800674c 	.word	0x0800674c
 8000b64:	200002cc 	.word	0x200002cc
 8000b68:	20000288 	.word	0x20000288
 8000b6c:	20000114 	.word	0x20000114
 8000b70:	20000268 	.word	0x20000268
 8000b74:	0800675c 	.word	0x0800675c
		}
		else
		{
			Node2_TxData[0] = 0x03;
 8000b78:	4b63      	ldr	r3, [pc, #396]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	701a      	strb	r2, [r3, #0]
			Node2_TxData[1] = 0x7F;
 8000b7e:	4b62      	ldr	r3, [pc, #392]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000b80:	227f      	movs	r2, #127	; 0x7f
 8000b82:	705a      	strb	r2, [r3, #1]
			Node2_TxData[2] = Node2_RxData[1] + 0x40;
 8000b84:	4b61      	ldr	r3, [pc, #388]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000b86:	785b      	ldrb	r3, [r3, #1]
 8000b88:	3340      	adds	r3, #64	; 0x40
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b5e      	ldr	r3, [pc, #376]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000b8e:	709a      	strb	r2, [r3, #2]
			Node2_TxData[3] = 0x35;
 8000b90:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000b92:	2235      	movs	r2, #53	; 0x35
 8000b94:	70da      	strb	r2, [r3, #3]
		}
		HAL_CAN_AddTxMessage(&hcan2, &Node2_TxHeader, Node2_TxData,
 8000b96:	4b5e      	ldr	r3, [pc, #376]	; (8000d10 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8000b98:	4a5b      	ldr	r2, [pc, #364]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000b9a:	495e      	ldr	r1, [pc, #376]	; (8000d14 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f4>)
 8000b9c:	485e      	ldr	r0, [pc, #376]	; (8000d18 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f8>)
 8000b9e:	f002 f823 	bl	8002be8 <HAL_CAN_AddTxMessage>
					 &Node2_TxMailbox);
	}
	// adc
	if (Node2_RxHeader.DLC == 8 && Node2_RxData[1] == 0x22)
 8000ba2:	4b5e      	ldr	r3, [pc, #376]	; (8000d1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d11b      	bne.n	8000be2 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c2>
 8000baa:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000bac:	785b      	ldrb	r3, [r3, #1]
 8000bae:	2b22      	cmp	r3, #34	; 0x22
 8000bb0:	d117      	bne.n	8000be2 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c2>
	{
		// Send response with ADC, Service id + 0x40
		Node2_TxData[1] = Node2_RxData[1] + 0x40;
 8000bb2:	4b56      	ldr	r3, [pc, #344]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000bb4:	785b      	ldrb	r3, [r3, #1]
 8000bb6:	3340      	adds	r3, #64	; 0x40
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b53      	ldr	r3, [pc, #332]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000bbc:	705a      	strb	r2, [r3, #1]
		Node2_TxData[2] = (var1>>8) & 0xff; //high
 8000bbe:	4b58      	ldr	r3, [pc, #352]	; (8000d20 <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b4f      	ldr	r3, [pc, #316]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000bca:	709a      	strb	r2, [r3, #2]
		Node2_TxData[3] = var1 & 0xff; //low
 8000bcc:	4b54      	ldr	r3, [pc, #336]	; (8000d20 <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000bd4:	70da      	strb	r2, [r3, #3]
		HAL_CAN_AddTxMessage(&hcan2, &Node2_TxHeader, Node2_TxData,
 8000bd6:	4b4e      	ldr	r3, [pc, #312]	; (8000d10 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8000bd8:	4a4b      	ldr	r2, [pc, #300]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000bda:	494e      	ldr	r1, [pc, #312]	; (8000d14 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f4>)
 8000bdc:	484e      	ldr	r0, [pc, #312]	; (8000d18 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f8>)
 8000bde:	f002 f803 	bl	8002be8 <HAL_CAN_AddTxMessage>
					 &Node2_TxMailbox);
	}

	// joystick
	if (Node2_RxHeader.StdId == 0x712 && Node2_RxData[2] == 0x2E && (Node2_RxData[0] >> 4) == 0x1 && Node2_RxData[3] == 0xF0 && Node2_RxData[4] == 0x02) //write data by Identifier and First frame
 8000be2:	4b4e      	ldr	r3, [pc, #312]	; (8000d1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f240 7212 	movw	r2, #1810	; 0x712
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d155      	bne.n	8000c9a <HAL_CAN_RxFifo1MsgPendingCallback+0x27a>
 8000bee:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000bf0:	789b      	ldrb	r3, [r3, #2]
 8000bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8000bf4:	d151      	bne.n	8000c9a <HAL_CAN_RxFifo1MsgPendingCallback+0x27a>
 8000bf6:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d14b      	bne.n	8000c9a <HAL_CAN_RxFifo1MsgPendingCallback+0x27a>
 8000c02:	4b42      	ldr	r3, [pc, #264]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c04:	78db      	ldrb	r3, [r3, #3]
 8000c06:	2bf0      	cmp	r3, #240	; 0xf0
 8000c08:	d147      	bne.n	8000c9a <HAL_CAN_RxFifo1MsgPendingCallback+0x27a>
 8000c0a:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c0c:	791b      	ldrb	r3, [r3, #4]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d143      	bne.n	8000c9a <HAL_CAN_RxFifo1MsgPendingCallback+0x27a>
		{

			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8000c12:	2104      	movs	r1, #4
 8000c14:	4843      	ldr	r0, [pc, #268]	; (8000d24 <HAL_CAN_RxFifo1MsgPendingCallback+0x304>)
 8000c16:	f002 fee6 	bl	80039e6 <HAL_GPIO_TogglePin>
			printf("\n MCU received FF: %x-%x-%x-%x-%x-%x-%x-%x\r\n", Node2_RxData[0],Node2_RxData[1],Node2_RxData[2],Node2_RxData[3], Node2_RxData[4], Node2_RxData[5], Node2_RxData[6], Node2_RxData[7]);
 8000c1a:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461d      	mov	r5, r3
 8000c20:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c22:	785b      	ldrb	r3, [r3, #1]
 8000c24:	461e      	mov	r6, r3
 8000c26:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	469c      	mov	ip, r3
 8000c2c:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c2e:	78db      	ldrb	r3, [r3, #3]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c34:	791b      	ldrb	r3, [r3, #4]
 8000c36:	4619      	mov	r1, r3
 8000c38:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c3a:	795b      	ldrb	r3, [r3, #5]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c40:	799b      	ldrb	r3, [r3, #6]
 8000c42:	461c      	mov	r4, r3
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000c46:	79db      	ldrb	r3, [r3, #7]
 8000c48:	9304      	str	r3, [sp, #16]
 8000c4a:	9403      	str	r4, [sp, #12]
 8000c4c:	9002      	str	r0, [sp, #8]
 8000c4e:	9101      	str	r1, [sp, #4]
 8000c50:	9200      	str	r2, [sp, #0]
 8000c52:	4663      	mov	r3, ip
 8000c54:	4632      	mov	r2, r6
 8000c56:	4629      	mov	r1, r5
 8000c58:	4833      	ldr	r0, [pc, #204]	; (8000d28 <HAL_CAN_RxFifo1MsgPendingCallback+0x308>)
 8000c5a:	f004 fc33 	bl	80054c4 <iprintf>

			Node2_TxData[0] = 0x30;
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c60:	2230      	movs	r2, #48	; 0x30
 8000c62:	701a      	strb	r2, [r3, #0]
			Node2_TxData[1] = 0x00;
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	705a      	strb	r2, [r3, #1]
			Node2_TxData[2] = 0x00;
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	709a      	strb	r2, [r3, #2]
			Node2_TxData[3] = 0x00;	//2E + 40
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	70da      	strb	r2, [r3, #3]
			Node2_TxData[4] = 0x00;
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	711a      	strb	r2, [r3, #4]
			Node2_TxData[5] = 0x00;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	715a      	strb	r2, [r3, #5]
			Node2_TxData[6] = 0x00;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	719a      	strb	r2, [r3, #6]
			Node2_TxData[7] = 0x00;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	71da      	strb	r2, [r3, #7]
			HAL_CAN_AddTxMessage(&hcan2, &Node2_TxHeader, Node2_TxData, &Node2_TxMailbox);
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000c92:	4920      	ldr	r1, [pc, #128]	; (8000d14 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f4>)
 8000c94:	4820      	ldr	r0, [pc, #128]	; (8000d18 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f8>)
 8000c96:	f001 ffa7 	bl	8002be8 <HAL_CAN_AddTxMessage>
		}

		if(Node2_RxHeader.StdId == 0x712 && (Node2_RxData[0] >> 4) == 0x2)
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f240 7212 	movw	r2, #1810	; 0x712
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12b      	bne.n	8000cfe <HAL_CAN_RxFifo1MsgPendingCallback+0x2de>
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d125      	bne.n	8000cfe <HAL_CAN_RxFifo1MsgPendingCallback+0x2de>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	481b      	ldr	r0, [pc, #108]	; (8000d24 <HAL_CAN_RxFifo1MsgPendingCallback+0x304>)
 8000cb6:	f002 fe96 	bl	80039e6 <HAL_GPIO_TogglePin>
			printf("MCU received CF: %x-%x-%x-%x-%x-%x-%x-%x\r\n\n", Node2_RxData[0],Node2_RxData[1],Node2_RxData[2],Node2_RxData[3], Node2_RxData[4], Node2_RxData[5], Node2_RxData[6], Node2_RxData[7]);
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461d      	mov	r5, r3
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000cc2:	785b      	ldrb	r3, [r3, #1]
 8000cc4:	461e      	mov	r6, r3
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000cc8:	789b      	ldrb	r3, [r3, #2]
 8000cca:	469c      	mov	ip, r3
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000cce:	78db      	ldrb	r3, [r3, #3]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000cda:	795b      	ldrb	r3, [r3, #5]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000ce0:	799b      	ldrb	r3, [r3, #6]
 8000ce2:	461c      	mov	r4, r3
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000ce6:	79db      	ldrb	r3, [r3, #7]
 8000ce8:	9304      	str	r3, [sp, #16]
 8000cea:	9403      	str	r4, [sp, #12]
 8000cec:	9002      	str	r0, [sp, #8]
 8000cee:	9101      	str	r1, [sp, #4]
 8000cf0:	9200      	str	r2, [sp, #0]
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	4632      	mov	r2, r6
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <HAL_CAN_RxFifo1MsgPendingCallback+0x30c>)
 8000cfa:	f004 fbe3 	bl	80054c4 <iprintf>
		}
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200002bc 	.word	0x200002bc
 8000d0c:	200002c4 	.word	0x200002c4
 8000d10:	200002cc 	.word	0x200002cc
 8000d14:	20000288 	.word	0x20000288
 8000d18:	20000114 	.word	0x20000114
 8000d1c:	200002a0 	.word	0x200002a0
 8000d20:	2000025c 	.word	0x2000025c
 8000d24:	40020400 	.word	0x40020400
 8000d28:	08006770 	.word	0x08006770
 8000d2c:	080067a0 	.word	0x080067a0

08000d30 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d102      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		timer_adc = 1;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == htim3.Instance)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d10d      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		timer_10s = (timer_10s == 0) ? 1 : 0;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d68:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, LED0_Pin);
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d6e:	f002 fe3a 	bl	80039e6 <HAL_GPIO_TogglePin>
	}
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000013c 	.word	0x2000013c
 8000d80:	20000258 	.word	0x20000258
 8000d84:	20000184 	.word	0x20000184
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	40020400 	.word	0x40020400

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fff6 	bl	8001d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f9c2 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 fbee 	bl	800157c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000da0:	f000 fa7a 	bl	8001298 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000da4:	f000 face 	bl	8001344 <MX_CAN2_Init>
  MX_USART1_UART_Init();
 8000da8:	f000 fbbe 	bl	8001528 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000dac:	f000 fb20 	bl	80013f0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000db0:	f000 fa20 	bl	80011f4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000db4:	f000 fb6a 	bl	800148c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000db8:	489d      	ldr	r0, [pc, #628]	; (8001030 <main+0x2a0>)
 8000dba:	f001 fed1 	bl	8002b60 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000dbe:	489d      	ldr	r0, [pc, #628]	; (8001034 <main+0x2a4>)
 8000dc0:	f001 fece 	bl	8002b60 <HAL_CAN_Start>



  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	489a      	ldr	r0, [pc, #616]	; (8001030 <main+0x2a0>)
 8000dc8:	f002 f8fb 	bl	8002fc2 <HAL_CAN_ActivateNotification>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4899      	ldr	r0, [pc, #612]	; (8001034 <main+0x2a4>)
 8000dd0:	f002 f8f7 	bl	8002fc2 <HAL_CAN_ActivateNotification>
  Node1_TxHeader.DLC = 8;  // data length
 8000dd4:	4b98      	ldr	r3, [pc, #608]	; (8001038 <main+0x2a8>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	611a      	str	r2, [r3, #16]
  Node1_TxHeader.IDE = CAN_ID_STD;
 8000dda:	4b97      	ldr	r3, [pc, #604]	; (8001038 <main+0x2a8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  Node1_TxHeader.RTR = CAN_RTR_DATA;
 8000de0:	4b95      	ldr	r3, [pc, #596]	; (8001038 <main+0x2a8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  Node1_TxHeader.StdId = 0x712;  // ID
 8000de6:	4b94      	ldr	r3, [pc, #592]	; (8001038 <main+0x2a8>)
 8000de8:	f240 7212 	movw	r2, #1810	; 0x712
 8000dec:	601a      	str	r2, [r3, #0]

  Node1_TxData[0] = 0x02; //Type 0: Single Frame
 8000dee:	4b93      	ldr	r3, [pc, #588]	; (800103c <main+0x2ac>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	701a      	strb	r2, [r3, #0]
  Node1_TxData[1] = 0x27; //Service ID
 8000df4:	4b91      	ldr	r3, [pc, #580]	; (800103c <main+0x2ac>)
 8000df6:	2227      	movs	r2, #39	; 0x27
 8000df8:	705a      	strb	r2, [r3, #1]
  Node1_TxData[2] = 0x01;
 8000dfa:	4b90      	ldr	r3, [pc, #576]	; (800103c <main+0x2ac>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	709a      	strb	r2, [r3, #2]

  Node2_TxHeader.DLC = 8;  // data length
 8000e00:	4b8f      	ldr	r3, [pc, #572]	; (8001040 <main+0x2b0>)
 8000e02:	2208      	movs	r2, #8
 8000e04:	611a      	str	r2, [r3, #16]
  Node2_TxHeader.IDE = CAN_ID_STD;
 8000e06:	4b8e      	ldr	r3, [pc, #568]	; (8001040 <main+0x2b0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  Node2_TxHeader.RTR = CAN_RTR_DATA;
 8000e0c:	4b8c      	ldr	r3, [pc, #560]	; (8001040 <main+0x2b0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  Node2_TxHeader.StdId = 0x7A2;  // ID
 8000e12:	4b8b      	ldr	r3, [pc, #556]	; (8001040 <main+0x2b0>)
 8000e14:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8000e18:	601a      	str	r2, [r3, #0]
  caseFalse = 1;
 8000e1a:	4b8a      	ldr	r3, [pc, #552]	; (8001044 <main+0x2b4>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
	printf("\nSTART PROGRAMMING...\r\n\n");
 8000e20:	4889      	ldr	r0, [pc, #548]	; (8001048 <main+0x2b8>)
 8000e22:	f004 fbd5 	bl	80055d0 <puts>
	printf("Check security!\n");
 8000e26:	4889      	ldr	r0, [pc, #548]	; (800104c <main+0x2bc>)
 8000e28:	f004 fbd2 	bl	80055d0 <puts>
	HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData,
 8000e2c:	4b88      	ldr	r3, [pc, #544]	; (8001050 <main+0x2c0>)
 8000e2e:	4a83      	ldr	r2, [pc, #524]	; (800103c <main+0x2ac>)
 8000e30:	4981      	ldr	r1, [pc, #516]	; (8001038 <main+0x2a8>)
 8000e32:	487f      	ldr	r0, [pc, #508]	; (8001030 <main+0x2a0>)
 8000e34:	f001 fed8 	bl	8002be8 <HAL_CAN_AddTxMessage>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (is_validKey == 0 && timer_10s == 1 && is_start == 1)  // timer10s = 1 (over)
 8000e38:	4b86      	ldr	r3, [pc, #536]	; (8001054 <main+0x2c4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d133      	bne.n	8000ea8 <main+0x118>
 8000e40:	4b85      	ldr	r3, [pc, #532]	; (8001058 <main+0x2c8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d12f      	bne.n	8000ea8 <main+0x118>
 8000e48:	4b84      	ldr	r3, [pc, #528]	; (800105c <main+0x2cc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d12b      	bne.n	8000ea8 <main+0x118>
	  	  {
	  		  Node1_TxHeader.DLC = 8;  // data length
 8000e50:	4b79      	ldr	r3, [pc, #484]	; (8001038 <main+0x2a8>)
 8000e52:	2208      	movs	r2, #8
 8000e54:	611a      	str	r2, [r3, #16]
	  		  Node1_TxHeader.IDE = CAN_ID_STD;
 8000e56:	4b78      	ldr	r3, [pc, #480]	; (8001038 <main+0x2a8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	  		  Node1_TxHeader.RTR = CAN_RTR_DATA;
 8000e5c:	4b76      	ldr	r3, [pc, #472]	; (8001038 <main+0x2a8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
	  		  Node1_TxHeader.StdId = 0x712;  // ID
 8000e62:	4b75      	ldr	r3, [pc, #468]	; (8001038 <main+0x2a8>)
 8000e64:	f240 7212 	movw	r2, #1810	; 0x712
 8000e68:	601a      	str	r2, [r3, #0]

	  		  Node1_TxData[0] = 0x02; //Type 0: Single Frame
 8000e6a:	4b74      	ldr	r3, [pc, #464]	; (800103c <main+0x2ac>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	701a      	strb	r2, [r3, #0]
	  		  Node1_TxData[1] = 0x27; //Service ID
 8000e70:	4b72      	ldr	r3, [pc, #456]	; (800103c <main+0x2ac>)
 8000e72:	2227      	movs	r2, #39	; 0x27
 8000e74:	705a      	strb	r2, [r3, #1]
	  		  Node1_TxData[2] = 0x01;
 8000e76:	4b71      	ldr	r3, [pc, #452]	; (800103c <main+0x2ac>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	709a      	strb	r2, [r3, #2]
	  		  caseFalse = 0;
 8000e7c:	4b71      	ldr	r3, [pc, #452]	; (8001044 <main+0x2b4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
	  		  HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData,
 8000e82:	4b73      	ldr	r3, [pc, #460]	; (8001050 <main+0x2c0>)
 8000e84:	4a6d      	ldr	r2, [pc, #436]	; (800103c <main+0x2ac>)
 8000e86:	496c      	ldr	r1, [pc, #432]	; (8001038 <main+0x2a8>)
 8000e88:	4869      	ldr	r0, [pc, #420]	; (8001030 <main+0x2a0>)
 8000e8a:	f001 fead 	bl	8002be8 <HAL_CAN_AddTxMessage>
	  				  &Node1_TxMailbox);
	  		timer_10s = (timer_10s == 0) ? 1 : 0;
 8000e8e:	4b72      	ldr	r3, [pc, #456]	; (8001058 <main+0x2c8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b6e      	ldr	r3, [pc, #440]	; (8001058 <main+0x2c8>)
 8000ea0:	601a      	str	r2, [r3, #0]
	  		HAL_TIM_Base_Stop_IT(&htim3);
 8000ea2:	486f      	ldr	r0, [pc, #444]	; (8001060 <main+0x2d0>)
 8000ea4:	f003 fb2a 	bl	80044fc <HAL_TIM_Base_Stop_IT>
	  	  }

	  // read adc value
	  if (is_validKey == 1 && timer_adc == 1 && timer_10s == 0 && is_start == 1)
 8000ea8:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <main+0x2c4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d12c      	bne.n	8000f0a <main+0x17a>
 8000eb0:	4b6c      	ldr	r3, [pc, #432]	; (8001064 <main+0x2d4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d128      	bne.n	8000f0a <main+0x17a>
 8000eb8:	4b67      	ldr	r3, [pc, #412]	; (8001058 <main+0x2c8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d124      	bne.n	8000f0a <main+0x17a>
 8000ec0:	4b66      	ldr	r3, [pc, #408]	; (800105c <main+0x2cc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d120      	bne.n	8000f0a <main+0x17a>
	  {
		  Node1_TxData[0] = 0x07; //Type 0: Single Frame
 8000ec8:	4b5c      	ldr	r3, [pc, #368]	; (800103c <main+0x2ac>)
 8000eca:	2207      	movs	r2, #7
 8000ecc:	701a      	strb	r2, [r3, #0]
		  Node1_TxData[1] = 0x22; //Service ID
 8000ece:	4b5b      	ldr	r3, [pc, #364]	; (800103c <main+0x2ac>)
 8000ed0:	2222      	movs	r2, #34	; 0x22
 8000ed2:	705a      	strb	r2, [r3, #1]
		  Node2_TxData[0] = 0x07;
 8000ed4:	4b64      	ldr	r3, [pc, #400]	; (8001068 <main+0x2d8>)
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	701a      	strb	r2, [r3, #0]
		  Node2_TxData[4] = 0x00;
 8000eda:	4b63      	ldr	r3, [pc, #396]	; (8001068 <main+0x2d8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	711a      	strb	r2, [r3, #4]
		  Node2_TxData[5] = 0x00;
 8000ee0:	4b61      	ldr	r3, [pc, #388]	; (8001068 <main+0x2d8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	715a      	strb	r2, [r3, #5]
		  Node2_TxData[6] = 0x00;
 8000ee6:	4b60      	ldr	r3, [pc, #384]	; (8001068 <main+0x2d8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	719a      	strb	r2, [r3, #6]
		  Node2_TxData[7] = 0x00;
 8000eec:	4b5e      	ldr	r3, [pc, #376]	; (8001068 <main+0x2d8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	71da      	strb	r2, [r3, #7]
		  HAL_ADC_Start_IT(&hadc1);
 8000ef2:	485e      	ldr	r0, [pc, #376]	; (800106c <main+0x2dc>)
 8000ef4:	f001 f820 	bl	8001f38 <HAL_ADC_Start_IT>
		  HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData,
 8000ef8:	4b55      	ldr	r3, [pc, #340]	; (8001050 <main+0x2c0>)
 8000efa:	4a50      	ldr	r2, [pc, #320]	; (800103c <main+0x2ac>)
 8000efc:	494e      	ldr	r1, [pc, #312]	; (8001038 <main+0x2a8>)
 8000efe:	484c      	ldr	r0, [pc, #304]	; (8001030 <main+0x2a0>)
 8000f00:	f001 fe72 	bl	8002be8 <HAL_CAN_AddTxMessage>
			 &Node1_TxMailbox);
		  timer_adc = 0; // flag for timer
 8000f04:	4b57      	ldr	r3, [pc, #348]	; (8001064 <main+0x2d4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
	  }

	  // joystick
	  if ((is_validKey == 1) && ((left_button == 1) || (right_button == 1) || (middle_button == 1)) && (timer_10s == 0) && (is_start == 1))
 8000f0a:	4b52      	ldr	r3, [pc, #328]	; (8001054 <main+0x2c4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	f040 80f2 	bne.w	80010f8 <main+0x368>
 8000f14:	4b56      	ldr	r3, [pc, #344]	; (8001070 <main+0x2e0>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d008      	beq.n	8000f2e <main+0x19e>
 8000f1c:	4b55      	ldr	r3, [pc, #340]	; (8001074 <main+0x2e4>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d004      	beq.n	8000f2e <main+0x19e>
 8000f24:	4b54      	ldr	r3, [pc, #336]	; (8001078 <main+0x2e8>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	f040 80e5 	bne.w	80010f8 <main+0x368>
 8000f2e:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <main+0x2c8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 80e0 	bne.w	80010f8 <main+0x368>
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <main+0x2cc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	f040 80db 	bne.w	80010f8 <main+0x368>
	  	  {
	  		  //Send first frame
	  		  current_pos = 0;
 8000f42:	4b4e      	ldr	r3, [pc, #312]	; (800107c <main+0x2ec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]

	  		  Node1_TxData[0] = 0x10;
 8000f48:	4b3c      	ldr	r3, [pc, #240]	; (800103c <main+0x2ac>)
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	701a      	strb	r2, [r3, #0]
	  		  Node1_TxData[1] = 0x0A; // 0x019 : 0000 0001 1001
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <main+0x2ac>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	705a      	strb	r2, [r3, #1]
	  		  Node1_TxData[2] = 0x2E;
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <main+0x2ac>)
 8000f56:	222e      	movs	r2, #46	; 0x2e
 8000f58:	709a      	strb	r2, [r3, #2]

	  		  //DATA ID
	  		  Node1_TxData[3] = 0xF0;
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <main+0x2ac>)
 8000f5c:	22f0      	movs	r2, #240	; 0xf0
 8000f5e:	70da      	strb	r2, [r3, #3]
	  		  Node1_TxData[4] = 0x02;
 8000f60:	4b36      	ldr	r3, [pc, #216]	; (800103c <main+0x2ac>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	711a      	strb	r2, [r3, #4]

	  		  Node2_TxData[0] = 0x00;
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <main+0x2d8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
	  		  Node2_TxData[1] = 0x00;
 8000f6c:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <main+0x2d8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	705a      	strb	r2, [r3, #1]
	  		  Node2_TxData[2] = 0x00;
 8000f72:	4b3d      	ldr	r3, [pc, #244]	; (8001068 <main+0x2d8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	709a      	strb	r2, [r3, #2]
	  		  Node2_TxData[3] = 0x00;
 8000f78:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <main+0x2d8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	70da      	strb	r2, [r3, #3]
	  		  Node2_TxData[4] = 0x00;
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <main+0x2d8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	711a      	strb	r2, [r3, #4]
	  		  Node2_TxData[5] = 0x00;
 8000f84:	4b38      	ldr	r3, [pc, #224]	; (8001068 <main+0x2d8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	715a      	strb	r2, [r3, #5]
	  		  Node2_TxData[6] = 0x00;
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <main+0x2d8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	719a      	strb	r2, [r3, #6]
	  		  Node2_TxData[7] = 0x00;
 8000f90:	4b35      	ldr	r3, [pc, #212]	; (8001068 <main+0x2d8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	71da      	strb	r2, [r3, #7]

	  		  if(left_button == 1)
 8000f96:	4b36      	ldr	r3, [pc, #216]	; (8001070 <main+0x2e0>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d121      	bne.n	8000fe2 <main+0x252>
	  		  {
	  			  Node1_TxData[5] = LEFT_DATA[current_pos++];
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <main+0x2ec>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	b2d1      	uxtb	r1, r2
 8000fa6:	4a35      	ldr	r2, [pc, #212]	; (800107c <main+0x2ec>)
 8000fa8:	7011      	strb	r1, [r2, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b34      	ldr	r3, [pc, #208]	; (8001080 <main+0x2f0>)
 8000fae:	5c9a      	ldrb	r2, [r3, r2]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <main+0x2ac>)
 8000fb2:	715a      	strb	r2, [r3, #5]
	  		  	  Node1_TxData[6] = LEFT_DATA[current_pos++];
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <main+0x2ec>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	b2d1      	uxtb	r1, r2
 8000fbc:	4a2f      	ldr	r2, [pc, #188]	; (800107c <main+0x2ec>)
 8000fbe:	7011      	strb	r1, [r2, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <main+0x2f0>)
 8000fc4:	5c9a      	ldrb	r2, [r3, r2]
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <main+0x2ac>)
 8000fc8:	719a      	strb	r2, [r3, #6]
	  		  	  Node1_TxData[7] = LEFT_DATA[current_pos++];
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <main+0x2ec>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	b2d1      	uxtb	r1, r2
 8000fd2:	4a2a      	ldr	r2, [pc, #168]	; (800107c <main+0x2ec>)
 8000fd4:	7011      	strb	r1, [r2, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <main+0x2f0>)
 8000fda:	5c9a      	ldrb	r2, [r3, r2]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <main+0x2ac>)
 8000fde:	71da      	strb	r2, [r3, #7]
 8000fe0:	e077      	b.n	80010d2 <main+0x342>
	  		  }
	  		  else if(right_button == 1)
 8000fe2:	4b24      	ldr	r3, [pc, #144]	; (8001074 <main+0x2e4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d14e      	bne.n	8001088 <main+0x2f8>
	  		  {
	  			  Node1_TxData[5] = RIGHT_DATA[current_pos++];
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <main+0x2ec>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	b2d1      	uxtb	r1, r2
 8000ff2:	4a22      	ldr	r2, [pc, #136]	; (800107c <main+0x2ec>)
 8000ff4:	7011      	strb	r1, [r2, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <main+0x2f4>)
 8000ffa:	5c9a      	ldrb	r2, [r3, r2]
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <main+0x2ac>)
 8000ffe:	715a      	strb	r2, [r3, #5]
	  			  Node1_TxData[6] = RIGHT_DATA[current_pos++];
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <main+0x2ec>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	b2d1      	uxtb	r1, r2
 8001008:	4a1c      	ldr	r2, [pc, #112]	; (800107c <main+0x2ec>)
 800100a:	7011      	strb	r1, [r2, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <main+0x2f4>)
 8001010:	5c9a      	ldrb	r2, [r3, r2]
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <main+0x2ac>)
 8001014:	719a      	strb	r2, [r3, #6]
	  			  Node1_TxData[7] = RIGHT_DATA[current_pos++];
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <main+0x2ec>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	b2d1      	uxtb	r1, r2
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <main+0x2ec>)
 8001020:	7011      	strb	r1, [r2, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <main+0x2f4>)
 8001026:	5c9a      	ldrb	r2, [r3, r2]
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <main+0x2ac>)
 800102a:	71da      	strb	r2, [r3, #7]
 800102c:	e051      	b.n	80010d2 <main+0x342>
 800102e:	bf00      	nop
 8001030:	200000ec 	.word	0x200000ec
 8001034:	20000114 	.word	0x20000114
 8001038:	20000210 	.word	0x20000210
 800103c:	20000244 	.word	0x20000244
 8001040:	20000288 	.word	0x20000288
 8001044:	2000026c 	.word	0x2000026c
 8001048:	080067cc 	.word	0x080067cc
 800104c:	080067e4 	.word	0x080067e4
 8001050:	20000254 	.word	0x20000254
 8001054:	20000004 	.word	0x20000004
 8001058:	20000000 	.word	0x20000000
 800105c:	20000270 	.word	0x20000270
 8001060:	20000184 	.word	0x20000184
 8001064:	20000258 	.word	0x20000258
 8001068:	200002bc 	.word	0x200002bc
 800106c:	200000a4 	.word	0x200000a4
 8001070:	20000274 	.word	0x20000274
 8001074:	20000275 	.word	0x20000275
 8001078:	20000276 	.word	0x20000276
 800107c:	2000027b 	.word	0x2000027b
 8001080:	20000008 	.word	0x20000008
 8001084:	20000010 	.word	0x20000010
	  		  }
	  		  else if(middle_button == 1)
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <main+0x370>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d120      	bne.n	80010d2 <main+0x342>
	  		  {
	  			  Node1_TxData[5] = MIDDLE_DATA[current_pos++];
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0x374>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	b2d1      	uxtb	r1, r2
 8001098:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <main+0x374>)
 800109a:	7011      	strb	r1, [r2, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <main+0x378>)
 80010a0:	5c9a      	ldrb	r2, [r3, r2]
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <main+0x37c>)
 80010a4:	715a      	strb	r2, [r3, #5]
	  			  Node1_TxData[6] = MIDDLE_DATA[current_pos++];
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <main+0x374>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	b2d1      	uxtb	r1, r2
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <main+0x374>)
 80010b0:	7011      	strb	r1, [r2, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <main+0x378>)
 80010b6:	5c9a      	ldrb	r2, [r3, r2]
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <main+0x37c>)
 80010ba:	719a      	strb	r2, [r3, #6]
	  			  Node1_TxData[7] = MIDDLE_DATA[current_pos++];
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <main+0x374>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	b2d1      	uxtb	r1, r2
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <main+0x374>)
 80010c6:	7011      	strb	r1, [r2, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <main+0x378>)
 80010cc:	5c9a      	ldrb	r2, [r3, r2]
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <main+0x37c>)
 80010d0:	71da      	strb	r2, [r3, #7]
	  		  }
	  		  data_length = (Node1_TxData[0] & 0x0f) + Node1_TxData[1];
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <main+0x37c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <main+0x37c>)
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <main+0x380>)
 80010ea:	801a      	strh	r2, [r3, #0]
	  		  HAL_CAN_AddTxMessage(&hcan1, &Node1_TxHeader, Node1_TxData, &Node1_TxMailbox);
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <main+0x384>)
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <main+0x37c>)
 80010f0:	4909      	ldr	r1, [pc, #36]	; (8001118 <main+0x388>)
 80010f2:	480a      	ldr	r0, [pc, #40]	; (800111c <main+0x38c>)
 80010f4:	f001 fd78 	bl	8002be8 <HAL_CAN_AddTxMessage>
	  	  }
	  	  HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 feb5 	bl	8001e68 <HAL_Delay>
	  if (is_validKey == 0 && timer_10s == 1 && is_start == 1)  // timer10s = 1 (over)
 80010fe:	e69b      	b.n	8000e38 <main+0xa8>
 8001100:	20000276 	.word	0x20000276
 8001104:	2000027b 	.word	0x2000027b
 8001108:	20000280 	.word	0x20000280
 800110c:	20000244 	.word	0x20000244
 8001110:	20000278 	.word	0x20000278
 8001114:	20000254 	.word	0x20000254
 8001118:	20000210 	.word	0x20000210
 800111c:	200000ec 	.word	0x200000ec

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	2230      	movs	r2, #48	; 0x30
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f004 f9c0 	bl	80054b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <SystemClock_Config+0xcc>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <SystemClock_Config+0xcc>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <SystemClock_Config+0xcc>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <SystemClock_Config+0xd0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <SystemClock_Config+0xd0>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <SystemClock_Config+0xd0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001190:	2304      	movs	r3, #4
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001194:	23a8      	movs	r3, #168	; 0xa8
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fc51 	bl	8003a4c <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b0:	f000 fabc 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2105      	movs	r1, #5
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 feb2 	bl	8003f3c <HAL_RCC_ClockConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011de:	f000 faa5 	bl	800172c <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3750      	adds	r7, #80	; 0x50
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000

080011f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_ADC1_Init+0x98>)
 8001208:	4a21      	ldr	r2, [pc, #132]	; (8001290 <MX_ADC1_Init+0x9c>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_ADC1_Init+0x98>)
 800120e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001212:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_ADC1_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_ADC1_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_ADC1_Init+0x98>)
 8001222:	2201      	movs	r2, #1
 8001224:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_ADC1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_ADC1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_ADC1_Init+0x98>)
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <MX_ADC1_Init+0xa0>)
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_ADC1_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_ADC1_Init+0x98>)
 8001242:	2201      	movs	r2, #1
 8001244:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_ADC1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_ADC1_Init+0x98>)
 8001250:	2201      	movs	r2, #1
 8001252:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_ADC1_Init+0x98>)
 8001256:	f000 fe2b 	bl	8001eb0 <HAL_ADC_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001260:	f000 fa64 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001264:	2307      	movs	r3, #7
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800126c:	2306      	movs	r3, #6
 800126e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_ADC1_Init+0x98>)
 8001276:	f001 f86f 	bl	8002358 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001280:	f000 fa54 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200000a4 	.word	0x200000a4
 8001290:	40012000 	.word	0x40012000
 8001294:	0f000001 	.word	0x0f000001

08001298 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <MX_CAN1_Init+0xa4>)
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <MX_CAN1_Init+0xa8>)
 80012a2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <MX_CAN1_Init+0xa4>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_CAN1_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_CAN1_Init+0xa4>)
 80012b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_CAN1_Init+0xa4>)
 80012ba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80012be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_CAN1_Init+0xa4>)
 80012c2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80012c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_CAN1_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_CAN1_Init+0xa4>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_CAN1_Init+0xa4>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_CAN1_Init+0xa4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_CAN1_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_CAN1_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <MX_CAN1_Init+0xa4>)
 80012ee:	f001 fa5b 	bl	80027a8 <HAL_CAN_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80012f8:	f000 fa18 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 8001300:	2312      	movs	r3, #18
 8001302:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x7A2 << 5;
 8001308:	f24f 4340 	movw	r3, #62528	; 0xf440
 800130c:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7A2 << 5;
 8001312:	f24f 4340 	movw	r3, #62528	; 0xf440
 8001316:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20; // how many filters to assign to the CAN1 (master can)
 8001324:	2314      	movs	r3, #20
 8001326:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_CAN1_Init+0xa4>)
 800132e:	f001 fb37 	bl	80029a0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200000ec 	.word	0x200000ec
 8001340:	40006400 	.word	0x40006400

08001344 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <MX_CAN2_Init+0xa4>)
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <MX_CAN2_Init+0xa8>)
 800134e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <MX_CAN2_Init+0xa4>)
 8001352:	2204      	movs	r2, #4
 8001354:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <MX_CAN2_Init+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_CAN2_Init+0xa4>)
 800135e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001362:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_CAN2_Init+0xa4>)
 8001366:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800136a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_CAN2_Init+0xa4>)
 800136e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001372:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_CAN2_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_CAN2_Init+0xa4>)
 800137c:	2201      	movs	r2, #1
 800137e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_CAN2_Init+0xa4>)
 8001382:	2201      	movs	r2, #1
 8001384:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_CAN2_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_CAN2_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_CAN2_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001398:	4813      	ldr	r0, [pc, #76]	; (80013e8 <MX_CAN2_Init+0xa4>)
 800139a:	f001 fa05 	bl	80027a8 <HAL_CAN_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 80013a4:	f000 f9c2 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 80013ac:	230a      	movs	r3, #10
 80013ae:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x712 << 5;
 80013b4:	f24e 2340 	movw	r3, #57920	; 0xe240
 80013b8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x712 << 5;
 80013be:	f24e 2340 	movw	r3, #57920	; 0xe240
 80013c2:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0; // doesn't matter in single can controllers
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_CAN2_Init+0xa4>)
 80013da:	f001 fae1 	bl	80029a0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000114 	.word	0x20000114
 80013ec:	40006800 	.word	0x40006800

080013f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_TIM2_Init+0x98>)
 800140e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_TIM2_Init+0x98>)
 8001416:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800141a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM2_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_TIM2_Init+0x98>)
 8001424:	f242 720f 	movw	r2, #9999	; 0x270f
 8001428:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_TIM2_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_TIM2_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001436:	4814      	ldr	r0, [pc, #80]	; (8001488 <MX_TIM2_Init+0x98>)
 8001438:	f002 ffa0 	bl	800437c <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001442:	f000 f973 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_TIM2_Init+0x98>)
 8001454:	f003 f989 	bl	800476a <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800145e:	f000 f965 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_TIM2_Init+0x98>)
 8001470:	f003 fba4 	bl	8004bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800147a:	f000 f957 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000013c 	.word	0x2000013c

0800148c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	463b      	mov	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_TIM3_Init+0x94>)
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <MX_TIM3_Init+0x98>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19999;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_TIM3_Init+0x94>)
 80014b0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_TIM3_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_TIM3_Init+0x94>)
 80014be:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80014c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_TIM3_Init+0x94>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_TIM3_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <MX_TIM3_Init+0x94>)
 80014d2:	f002 ff53 	bl	800437c <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014dc:	f000 f926 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <MX_TIM3_Init+0x94>)
 80014ee:	f003 f93c 	bl	800476a <HAL_TIM_ConfigClockSource>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014f8:	f000 f918 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_TIM3_Init+0x94>)
 800150a:	f003 fb57 	bl	8004bbc <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001514:	f000 f90a 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000184 	.word	0x20000184
 8001524:	40000400 	.word	0x40000400

08001528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_USART1_UART_Init+0x50>)
 8001530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001560:	f003 fbbc 	bl	8004cdc <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800156a:	f000 f8df 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001cc 	.word	0x200001cc
 8001578:	40011000 	.word	0x40011000

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b39      	ldr	r3, [pc, #228]	; (800167c <MX_GPIO_Init+0x100>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a38      	ldr	r2, [pc, #224]	; (800167c <MX_GPIO_Init+0x100>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b36      	ldr	r3, [pc, #216]	; (800167c <MX_GPIO_Init+0x100>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b32      	ldr	r3, [pc, #200]	; (800167c <MX_GPIO_Init+0x100>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <MX_GPIO_Init+0x100>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <MX_GPIO_Init+0x100>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <MX_GPIO_Init+0x100>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a2a      	ldr	r2, [pc, #168]	; (800167c <MX_GPIO_Init+0x100>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <MX_GPIO_Init+0x100>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <MX_GPIO_Init+0x100>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <MX_GPIO_Init+0x100>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_GPIO_Init+0x100>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	210f      	movs	r1, #15
 8001606:	481e      	ldr	r0, [pc, #120]	; (8001680 <MX_GPIO_Init+0x104>)
 8001608:	f002 f9d4 	bl	80039b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_7;
 800160c:	f242 0390 	movw	r3, #8336	; 0x2090
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001612:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <MX_GPIO_Init+0x108>)
 8001624:	f002 f82a 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001628:	230f      	movs	r3, #15
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4810      	ldr	r0, [pc, #64]	; (8001680 <MX_GPIO_Init+0x104>)
 8001640:	f002 f81c 	bl	800367c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	200a      	movs	r0, #10
 800164a:	f001 ffe0 	bl	800360e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800164e:	200a      	movs	r0, #10
 8001650:	f001 fff9 	bl	8003646 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2017      	movs	r0, #23
 800165a:	f001 ffd8 	bl	800360e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800165e:	2017      	movs	r0, #23
 8001660:	f001 fff1 	bl	8003646 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2028      	movs	r0, #40	; 0x28
 800166a:	f001 ffd0 	bl	800360e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800166e:	2028      	movs	r0, #40	; 0x28
 8001670:	f001 ffe9 	bl	8003646 <HAL_NVIC_EnableIRQ>

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800

08001688 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 300);
 8001690:	1d39      	adds	r1, r7, #4
 8001692:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001696:	2201      	movs	r2, #1
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <__io_putchar+0x20>)
 800169a:	f003 fb6c 	bl	8004d76 <HAL_UART_Transmit>
  return ch;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200001cc 	.word	0x200001cc

080016ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	 if(hadc->Instance == hadc1.Instance)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d106      	bne.n	80016ce <HAL_ADC_ConvCpltCallback+0x22>
	 {
		 var1 = HAL_ADC_GetValue(&hadc1);
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80016c2:	f000 fe27 	bl	8002314 <HAL_ADC_GetValue>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_ADC_ConvCpltCallback+0x30>)
 80016cc:	801a      	strh	r2, [r3, #0]
	 }
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000a4 	.word	0x200000a4
 80016dc:	2000025c 	.word	0x2000025c

080016e0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_4){
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d103      	bne.n	80016f8 <HAL_GPIO_EXTI_Callback+0x18>
		left_button = 1;
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_GPIO_EXTI_Callback+0x40>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
		right_button = 1;
	}
	else if (GPIO_Pin == GPIO_PIN_13){
			middle_button = 1;
		}
}
 80016f6:	e00d      	b.n	8001714 <HAL_GPIO_EXTI_Callback+0x34>
	else if (GPIO_Pin == GPIO_PIN_7){
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	2b80      	cmp	r3, #128	; 0x80
 80016fc:	d103      	bne.n	8001706 <HAL_GPIO_EXTI_Callback+0x26>
		right_button = 1;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_GPIO_EXTI_Callback+0x44>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
}
 8001704:	e006      	b.n	8001714 <HAL_GPIO_EXTI_Callback+0x34>
	else if (GPIO_Pin == GPIO_PIN_13){
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170c:	d102      	bne.n	8001714 <HAL_GPIO_EXTI_Callback+0x34>
			middle_button = 1;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_GPIO_EXTI_Callback+0x48>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20000274 	.word	0x20000274
 8001724:	20000275 	.word	0x20000275
 8001728:	20000276 	.word	0x20000276

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_MspInit+0x4c>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_MspInit+0x4c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <HAL_ADC_MspInit+0x8c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12f      	bne.n	800180a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_ADC_MspInit+0x90>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_ADC_MspInit+0x90>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_ADC_MspInit+0x90>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_ADC_MspInit+0x90>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_ADC_MspInit+0x90>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_ADC_MspInit+0x90>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	2303      	movs	r3, #3
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <HAL_ADC_MspInit+0x94>)
 80017f6:	f001 ff41 	bl	800367c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2012      	movs	r0, #18
 8001800:	f001 ff05 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001804:	2012      	movs	r0, #18
 8001806:	f001 ff1e 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40012000 	.word	0x40012000
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <HAL_CAN_MspInit+0x148>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d13e      	bne.n	80018c0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_CAN_MspInit+0x14c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a48      	ldr	r2, [pc, #288]	; (800196c <HAL_CAN_MspInit+0x14c>)
 800184a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_CAN_MspInit+0x14c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10d      	bne.n	8001870 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	4b45      	ldr	r3, [pc, #276]	; (8001970 <HAL_CAN_MspInit+0x150>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a44      	ldr	r2, [pc, #272]	; (8001970 <HAL_CAN_MspInit+0x150>)
 800185e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_CAN_MspInit+0x150>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <HAL_CAN_MspInit+0x150>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <HAL_CAN_MspInit+0x150>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_CAN_MspInit+0x150>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800188c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800189e:	2309      	movs	r3, #9
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	4832      	ldr	r0, [pc, #200]	; (8001974 <HAL_CAN_MspInit+0x154>)
 80018aa:	f001 fee7 	bl	800367c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2014      	movs	r0, #20
 80018b4:	f001 feab 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018b8:	2014      	movs	r0, #20
 80018ba:	f001 fec4 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80018be:	e04f      	b.n	8001960 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2c      	ldr	r2, [pc, #176]	; (8001978 <HAL_CAN_MspInit+0x158>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d14a      	bne.n	8001960 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <HAL_CAN_MspInit+0x150>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_CAN_MspInit+0x150>)
 80018d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_CAN_MspInit+0x150>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_CAN_MspInit+0x14c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a1f      	ldr	r2, [pc, #124]	; (800196c <HAL_CAN_MspInit+0x14c>)
 80018ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_CAN_MspInit+0x14c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10d      	bne.n	8001914 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_CAN_MspInit+0x150>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <HAL_CAN_MspInit+0x150>)
 8001902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_CAN_MspInit+0x150>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_CAN_MspInit+0x150>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_CAN_MspInit+0x150>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_CAN_MspInit+0x150>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001930:	2360      	movs	r3, #96	; 0x60
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001940:	2309      	movs	r3, #9
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <HAL_CAN_MspInit+0x15c>)
 800194c:	f001 fe96 	bl	800367c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2041      	movs	r0, #65	; 0x41
 8001956:	f001 fe5a 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800195a:	2041      	movs	r0, #65	; 0x41
 800195c:	f001 fe73 	bl	8003646 <HAL_NVIC_EnableIRQ>
}
 8001960:	bf00      	nop
 8001962:	3730      	adds	r7, #48	; 0x30
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40006400 	.word	0x40006400
 800196c:	200002d0 	.word	0x200002d0
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40006800 	.word	0x40006800
 800197c:	40020400 	.word	0x40020400

08001980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d116      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_TIM_Base_MspInit+0x80>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_TIM_Base_MspInit+0x80>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_TIM_Base_MspInit+0x80>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2102      	movs	r1, #2
 80019b2:	201c      	movs	r0, #28
 80019b4:	f001 fe2b 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b8:	201c      	movs	r0, #28
 80019ba:	f001 fe44 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019be:	e01a      	b.n	80019f6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_TIM_Base_MspInit+0x84>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d115      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_TIM_Base_MspInit+0x80>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_TIM_Base_MspInit+0x80>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_TIM_Base_MspInit+0x80>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2102      	movs	r1, #2
 80019ea:	201d      	movs	r0, #29
 80019ec:	f001 fe0f 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019f0:	201d      	movs	r0, #29
 80019f2:	f001 fe28 	bl	8003646 <HAL_NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40000400 	.word	0x40000400

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <HAL_UART_MspInit+0x84>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d12c      	bne.n	8001a84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_UART_MspInit+0x88>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <HAL_UART_MspInit+0x88>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_UART_MspInit+0x88>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_UART_MspInit+0x88>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_UART_MspInit+0x88>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_UART_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a74:	2307      	movs	r3, #7
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <HAL_UART_MspInit+0x8c>)
 8001a80:	f001 fdfc 	bl	800367c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3728      	adds	r7, #40	; 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <NMI_Handler+0x4>

08001a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae4:	f000 f9a0 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001af0:	2010      	movs	r0, #16
 8001af2:	f001 ff93 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <ADC_IRQHandler+0x10>)
 8001b02:	f000 faf7 	bl	80020f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200000a4 	.word	0x200000a4

08001b10 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <CAN1_RX0_IRQHandler+0x10>)
 8001b16:	f001 fa7a 	bl	800300e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200000ec 	.word	0x200000ec

08001b24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b28:	2080      	movs	r0, #128	; 0x80
 8001b2a:	f001 ff77 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM2_IRQHandler+0x10>)
 8001b3a:	f002 fd0e 	bl	800455a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000013c 	.word	0x2000013c

08001b48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM3_IRQHandler+0x10>)
 8001b4e:	f002 fd04 	bl	800455a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000184 	.word	0x20000184

08001b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b64:	f001 ff5a 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <CAN2_RX1_IRQHandler+0x10>)
 8001b72:	f001 fa4c 	bl	800300e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000114 	.word	0x20000114

08001b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
	return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_kill>:

int _kill(int pid, int sig)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b9a:	f003 fc61 	bl	8005460 <__errno>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2216      	movs	r2, #22
 8001ba2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_exit>:

void _exit (int status)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffe7 	bl	8001b90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bc2:	e7fe      	b.n	8001bc2 <_exit+0x12>

08001bc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e00a      	b.n	8001bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bd6:	f3af 8000 	nop.w
 8001bda:	4601      	mov	r1, r0
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	60ba      	str	r2, [r7, #8]
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf0      	blt.n	8001bd6 <_read+0x12>
	}

return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e009      	b.n	8001c24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd35 	bl	8001688 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbf1      	blt.n	8001c10 <_write+0x12>
	}
	return len;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_close>:

int _close(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_isatty>:

int _isatty(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
	return 1;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd0:	f003 fbc6 	bl	8005460 <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20020000 	.word	0x20020000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	200002d4 	.word	0x200002d4
 8001d08:	200002f0 	.word	0x200002f0

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <SystemInit+0x20>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <SystemInit+0x20>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d36:	490e      	ldr	r1, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d38:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d4c:	4c0b      	ldr	r4, [pc, #44]	; (8001d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d5a:	f7ff ffd7 	bl	8001d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f003 fb85 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d62:	f7ff f815 	bl	8000d90 <main>
  bx  lr    
 8001d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d70:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d74:	08006964 	.word	0x08006964
  ldr r2, =_sbss
 8001d78:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d7c:	200002ec 	.word	0x200002ec

08001d80 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <CAN1_RX1_IRQHandler>
	...

08001d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_Init+0x40>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_Init+0x40>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_Init+0x40>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f001 fc23 	bl	80035f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db2:	200f      	movs	r0, #15
 8001db4:	f000 f808 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff fcbe 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x54>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x58>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 fc3b 	bl	8003662 <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00e      	b.n	8001e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d80a      	bhi.n	8001e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e04:	f001 fc03 	bl	800360e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_InitTick+0x5c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000018 	.word	0x20000018
 8001e20:	20000020 	.word	0x20000020
 8001e24:	2000001c 	.word	0x2000001c

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000020 	.word	0x20000020
 8001e4c:	200002d8 	.word	0x200002d8

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200002d8 	.word	0x200002d8

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000020 	.word	0x20000020

08001eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e033      	b.n	8001f2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fc5a 	bl	8001788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d118      	bne.n	8001f20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ef6:	f023 0302 	bic.w	r3, r3, #2
 8001efa:	f043 0202 	orr.w	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fb4a 	bl	800259c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f1e:	e001      	b.n	8001f24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Start_IT+0x1a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e0bd      	b.n	80020ce <HAL_ADC_Start_IT+0x196>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d018      	beq.n	8001f9a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f78:	4b58      	ldr	r3, [pc, #352]	; (80020dc <HAL_ADC_Start_IT+0x1a4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_ADC_Start_IT+0x1a8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9a      	lsrs	r2, r3, #18
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 8085 	bne.w	80020b4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f023 0206 	bic.w	r2, r3, #6
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ff6:	e002      	b.n	8001ffe <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_ADC_Start_IT+0x1ac>)
 8002008:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002012:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2b00      	cmp	r3, #0
 8002032:	d12a      	bne.n	800208a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_ADC_Start_IT+0x1b0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d015      	beq.n	800206a <HAL_ADC_Start_IT+0x132>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <HAL_ADC_Start_IT+0x1b4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d105      	bne.n	8002054 <HAL_ADC_Start_IT+0x11c>
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_ADC_Start_IT+0x1ac>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <HAL_ADC_Start_IT+0x1b8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d136      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_ADC_Start_IT+0x1ac>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d130      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d129      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	e020      	b.n	80020cc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_ADC_Start_IT+0x1b0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d11b      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d114      	bne.n	80020cc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	e00b      	b.n	80020cc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f043 0210 	orr.w	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000018 	.word	0x20000018
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	40012300 	.word	0x40012300
 80020e8:	40012000 	.word	0x40012000
 80020ec:	40012100 	.word	0x40012100
 80020f0:	40012200 	.word	0x40012200

080020f4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d049      	beq.n	80021be <HAL_ADC_IRQHandler+0xca>
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d046      	beq.n	80021be <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d12b      	bne.n	80021ae <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d127      	bne.n	80021ae <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002176:	2b00      	cmp	r3, #0
 8002178:	d119      	bne.n	80021ae <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0220 	bic.w	r2, r2, #32
 8002188:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fa7c 	bl	80016ac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0212 	mvn.w	r2, #18
 80021bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d057      	beq.n	8002284 <HAL_ADC_IRQHandler+0x190>
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d054      	beq.n	8002284 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d139      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12b      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d124      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11d      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d119      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fa8d 	bl	8002794 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f06f 020c 	mvn.w	r2, #12
 8002282:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d017      	beq.n	80022ca <HAL_ADC_IRQHandler+0x1d6>
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d014      	beq.n	80022ca <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10d      	bne.n	80022ca <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f837 	bl	800232e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0201 	mvn.w	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022d8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_ADC_IRQHandler+0x218>
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d012      	beq.n	800230c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0220 	mvn.w	r2, #32
 80022fa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f820 	bl	8002342 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f06f 0220 	mvn.w	r2, #32
 800230a:	601a      	str	r2, [r3, #0]
  }
}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1c>
 8002370:	2302      	movs	r3, #2
 8002372:	e105      	b.n	8002580 <HAL_ADC_ConfigChannel+0x228>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b09      	cmp	r3, #9
 8002382:	d925      	bls.n	80023d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68d9      	ldr	r1, [r3, #12]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	3b1e      	subs	r3, #30
 800239a:	2207      	movs	r2, #7
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43da      	mvns	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	400a      	ands	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68d9      	ldr	r1, [r3, #12]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	4603      	mov	r3, r0
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4403      	add	r3, r0
 80023c2:	3b1e      	subs	r3, #30
 80023c4:	409a      	lsls	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	e022      	b.n	8002416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	2207      	movs	r2, #7
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	400a      	ands	r2, r1
 80023f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	4603      	mov	r3, r0
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4403      	add	r3, r0
 800240c:	409a      	lsls	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d824      	bhi.n	8002468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b05      	subs	r3, #5
 8002430:	221f      	movs	r2, #31
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	400a      	ands	r2, r1
 800243e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	3b05      	subs	r3, #5
 800245a:	fa00 f203 	lsl.w	r2, r0, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
 8002466:	e04c      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d824      	bhi.n	80024ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b23      	subs	r3, #35	; 0x23
 8002482:	221f      	movs	r2, #31
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43da      	mvns	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	400a      	ands	r2, r1
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	3b23      	subs	r3, #35	; 0x23
 80024ac:	fa00 f203 	lsl.w	r2, r0, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
 80024b8:	e023      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b41      	subs	r3, #65	; 0x41
 80024cc:	221f      	movs	r2, #31
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	400a      	ands	r2, r1
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4618      	mov	r0, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b41      	subs	r3, #65	; 0x41
 80024f6:	fa00 f203 	lsl.w	r2, r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_ADC_ConfigChannel+0x234>)
 8002504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a21      	ldr	r2, [pc, #132]	; (8002590 <HAL_ADC_ConfigChannel+0x238>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d109      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1cc>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b12      	cmp	r3, #18
 8002516:	d105      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <HAL_ADC_ConfigChannel+0x238>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d123      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x21e>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d003      	beq.n	800253e <HAL_ADC_ConfigChannel+0x1e6>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b11      	cmp	r3, #17
 800253c:	d11b      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b10      	cmp	r3, #16
 8002550:	d111      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_ADC_ConfigChannel+0x23c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <HAL_ADC_ConfigChannel+0x240>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	0c9a      	lsrs	r2, r3, #18
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002568:	e002      	b.n	8002570 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3b01      	subs	r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f9      	bne.n	800256a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40012300 	.word	0x40012300
 8002590:	40012000 	.word	0x40012000
 8002594:	20000018 	.word	0x20000018
 8002598:	431bde83 	.word	0x431bde83

0800259c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a4:	4b79      	ldr	r3, [pc, #484]	; (800278c <ADC_Init+0x1f0>)
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	431a      	orrs	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	4a58      	ldr	r2, [pc, #352]	; (8002790 <ADC_Init+0x1f4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d022      	beq.n	800267a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6899      	ldr	r1, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e00f      	b.n	800269a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002698:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0202 	bic.w	r2, r2, #2
 80026a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e1b      	ldrb	r3, [r3, #24]
 80026b4:	005a      	lsls	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	3b01      	subs	r3, #1
 80026f4:	035a      	lsls	r2, r3, #13
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	e007      	b.n	8002710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	3b01      	subs	r3, #1
 800272c:	051a      	lsls	r2, r3, #20
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002752:	025a      	lsls	r2, r3, #9
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	029a      	lsls	r2, r3, #10
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	609a      	str	r2, [r3, #8]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40012300 	.word	0x40012300
 8002790:	0f000001 	.word	0x0f000001

08002794 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0ed      	b.n	8002996 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff f82a 	bl	8001820 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027dc:	f7ff fb38 	bl	8001e50 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027e2:	e012      	b.n	800280a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027e4:	f7ff fb34 	bl	8001e50 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b0a      	cmp	r3, #10
 80027f0:	d90b      	bls.n	800280a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2205      	movs	r2, #5
 8002802:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0c5      	b.n	8002996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0e5      	beq.n	80027e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0202 	bic.w	r2, r2, #2
 8002826:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002828:	f7ff fb12 	bl	8001e50 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800282e:	e012      	b.n	8002856 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002830:	f7ff fb0e 	bl	8001e50 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b0a      	cmp	r3, #10
 800283c:	d90b      	bls.n	8002856 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2205      	movs	r2, #5
 800284e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e09f      	b.n	8002996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e5      	bne.n	8002830 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7e1b      	ldrb	r3, [r3, #24]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d108      	bne.n	800287e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e007      	b.n	800288e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7e5b      	ldrb	r3, [r3, #25]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d108      	bne.n	80028a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e007      	b.n	80028b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7e9b      	ldrb	r3, [r3, #26]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d108      	bne.n	80028d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0220 	orr.w	r2, r2, #32
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0220 	bic.w	r2, r2, #32
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7edb      	ldrb	r3, [r3, #27]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d108      	bne.n	80028fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0210 	bic.w	r2, r2, #16
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e007      	b.n	800290c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0210 	orr.w	r2, r2, #16
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7f1b      	ldrb	r3, [r3, #28]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d108      	bne.n	8002926 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0208 	orr.w	r2, r2, #8
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e007      	b.n	8002936 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0208 	bic.w	r2, r2, #8
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7f5b      	ldrb	r3, [r3, #29]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0204 	orr.w	r2, r2, #4
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e007      	b.n	8002960 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	ea42 0103 	orr.w	r1, r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d003      	beq.n	80029c6 <HAL_CAN_ConfigFilter+0x26>
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	f040 80be 	bne.w	8002b42 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_CAN_ConfigFilter+0x1bc>)
 80029c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	431a      	orrs	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2201      	movs	r2, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	401a      	ands	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d123      	bne.n	8002a70 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	401a      	ands	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3248      	adds	r2, #72	; 0x48
 8002a50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	3348      	adds	r3, #72	; 0x48
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d122      	bne.n	8002abe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3248      	adds	r2, #72	; 0x48
 8002a9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ab2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ab4:	6979      	ldr	r1, [r7, #20]
 8002ab6:	3348      	adds	r3, #72	; 0x48
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ad8:	e007      	b.n	8002aea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	401a      	ands	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b04:	e007      	b.n	8002b16 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b34:	f023 0201 	bic.w	r2, r3, #1
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e006      	b.n	8002b50 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40006400 	.word	0x40006400

08002b60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d12e      	bne.n	8002bd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7ff f960 	bl	8001e50 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b92:	e012      	b.n	8002bba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b94:	f7ff f95c 	bl	8001e50 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b0a      	cmp	r3, #10
 8002ba0:	d90b      	bls.n	8002bba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e012      	b.n	8002be0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e5      	bne.n	8002b94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e006      	b.n	8002be0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d003      	beq.n	8002c14 <HAL_CAN_AddTxMessage+0x2c>
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	f040 80b8 	bne.w	8002d84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 80a0 	beq.w	8002d74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	0e1b      	lsrs	r3, r3, #24
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d907      	bls.n	8002c54 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e09e      	b.n	8002d92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c54:	2201      	movs	r2, #1
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c70:	68f9      	ldr	r1, [r7, #12]
 8002c72:	6809      	ldr	r1, [r1, #0]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3318      	adds	r3, #24
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	440b      	add	r3, r1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e00f      	b.n	8002ca2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	440b      	add	r3, r1
 8002ca0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	3318      	adds	r3, #24
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	7d1b      	ldrb	r3, [r3, #20]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d111      	bne.n	8002ce2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3318      	adds	r3, #24
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	6811      	ldr	r1, [r2, #0]
 8002cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3318      	adds	r3, #24
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	440b      	add	r3, r1
 8002cde:	3304      	adds	r3, #4
 8002ce0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3307      	adds	r3, #7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	061a      	lsls	r2, r3, #24
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3306      	adds	r3, #6
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3305      	adds	r3, #5
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	3204      	adds	r2, #4
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	4610      	mov	r0, r2
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	6811      	ldr	r1, [r2, #0]
 8002d0a:	ea43 0200 	orr.w	r2, r3, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002d18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3303      	adds	r3, #3
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	061a      	lsls	r2, r3, #24
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3302      	adds	r3, #2
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	4313      	orrs	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	6811      	ldr	r1, [r2, #0]
 8002d40:	ea43 0200 	orr.w	r2, r3, r0
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	440b      	add	r3, r1
 8002d4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002d4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3318      	adds	r3, #24
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6811      	ldr	r1, [r2, #0]
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3318      	adds	r3, #24
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	440b      	add	r3, r1
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e00e      	b.n	8002d92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e006      	b.n	8002d92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b087      	sub	sp, #28
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d003      	beq.n	8002dc2 <HAL_CAN_GetRxMessage+0x24>
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	f040 80f3 	bne.w	8002fa8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10e      	bne.n	8002de6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0e7      	b.n	8002fb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d8      	b.n	8002fb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4413      	add	r3, r2
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0204 	and.w	r2, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10c      	bne.n	8002e3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	331b      	adds	r3, #27
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	4413      	add	r3, r2
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0d5b      	lsrs	r3, r3, #21
 8002e32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	331b      	adds	r3, #27
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	4413      	add	r3, r2
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	08db      	lsrs	r3, r3, #3
 8002e4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	331b      	adds	r3, #27
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	4413      	add	r3, r2
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0202 	and.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	331b      	adds	r3, #27
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	4413      	add	r3, r2
 8002e76:	3304      	adds	r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	331b      	adds	r3, #27
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3304      	adds	r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	331b      	adds	r3, #27
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0a1a      	lsrs	r2, r3, #8
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0c1a      	lsrs	r2, r3, #16
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e1a      	lsrs	r2, r3, #24
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	3303      	adds	r3, #3
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0a1a      	lsrs	r2, r3, #8
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3305      	adds	r3, #5
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0c1a      	lsrs	r2, r3, #16
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	3306      	adds	r3, #6
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e1a      	lsrs	r2, r3, #24
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	3307      	adds	r3, #7
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0220 	orr.w	r2, r2, #32
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e007      	b.n	8002fa4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0220 	orr.w	r2, r2, #32
 8002fa2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e006      	b.n	8002fb6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d002      	beq.n	8002fe0 <HAL_CAN_ActivateNotification+0x1e>
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d109      	bne.n	8002ff4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6959      	ldr	r1, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e006      	b.n	8003002 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b08a      	sub	sp, #40	; 0x28
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d07c      	beq.n	800314e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d023      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2201      	movs	r2, #1
 8003064:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f983 	bl	800337c <HAL_CAN_TxMailbox0CompleteCallback>
 8003076:	e016      	b.n	80030a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	e00c      	b.n	80030a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
 800309e:	e002      	b.n	80030a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f989 	bl	80033b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d024      	beq.n	80030fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f963 	bl	8003390 <HAL_CAN_TxMailbox1CompleteCallback>
 80030ca:	e016      	b.n	80030fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d004      	beq.n	80030e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	e00c      	b.n	80030fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
 80030f2:	e002      	b.n	80030fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f969 	bl	80033cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d024      	beq.n	800314e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800310c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f943 	bl	80033a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800311e:	e016      	b.n	800314e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e00c      	b.n	800314e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e002      	b.n	800314e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f949 	bl	80033e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00c      	beq.n	8003172 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2210      	movs	r2, #16
 8003170:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2208      	movs	r2, #8
 800318c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f930 	bl	80033f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fd f9fb 	bl	80005a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2210      	movs	r2, #16
 80031d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2208      	movs	r2, #8
 80031f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f908 	bl	8003408 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd fc05 	bl	8000a20 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2210      	movs	r2, #16
 8003230:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8f2 	bl	800341c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d006      	beq.n	800325a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2208      	movs	r2, #8
 8003252:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8eb 	bl	8003430 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d07b      	beq.n	800335c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d072      	beq.n	8003354 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f043 0304 	orr.w	r3, r3, #4
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d043      	beq.n	8003354 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d03e      	beq.n	8003354 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032dc:	2b60      	cmp	r3, #96	; 0x60
 80032de:	d02b      	beq.n	8003338 <HAL_CAN_IRQHandler+0x32a>
 80032e0:	2b60      	cmp	r3, #96	; 0x60
 80032e2:	d82e      	bhi.n	8003342 <HAL_CAN_IRQHandler+0x334>
 80032e4:	2b50      	cmp	r3, #80	; 0x50
 80032e6:	d022      	beq.n	800332e <HAL_CAN_IRQHandler+0x320>
 80032e8:	2b50      	cmp	r3, #80	; 0x50
 80032ea:	d82a      	bhi.n	8003342 <HAL_CAN_IRQHandler+0x334>
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d019      	beq.n	8003324 <HAL_CAN_IRQHandler+0x316>
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d826      	bhi.n	8003342 <HAL_CAN_IRQHandler+0x334>
 80032f4:	2b30      	cmp	r3, #48	; 0x30
 80032f6:	d010      	beq.n	800331a <HAL_CAN_IRQHandler+0x30c>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d822      	bhi.n	8003342 <HAL_CAN_IRQHandler+0x334>
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d002      	beq.n	8003306 <HAL_CAN_IRQHandler+0x2f8>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d005      	beq.n	8003310 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003304:	e01d      	b.n	8003342 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800330e:	e019      	b.n	8003344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	f043 0310 	orr.w	r3, r3, #16
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003318:	e014      	b.n	8003344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003322:	e00f      	b.n	8003344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800332c:	e00a      	b.n	8003344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003336:	e005      	b.n	8003344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003340:	e000      	b.n	8003344 <HAL_CAN_IRQHandler+0x336>
            break;
 8003342:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003352:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2204      	movs	r2, #4
 800335a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f868 	bl	8003444 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003374:	bf00      	nop
 8003376:	3728      	adds	r7, #40	; 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003474:	4013      	ands	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348a:	4a04      	ldr	r2, [pc, #16]	; (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	60d3      	str	r3, [r2, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <__NVIC_GetPriorityGrouping+0x18>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	f003 0307 	and.w	r3, r3, #7
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db0b      	blt.n	80034e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	4907      	ldr	r1, [pc, #28]	; (80034f4 <__NVIC_EnableIRQ+0x38>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db0a      	blt.n	8003522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	490c      	ldr	r1, [pc, #48]	; (8003544 <__NVIC_SetPriority+0x4c>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	0112      	lsls	r2, r2, #4
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	440b      	add	r3, r1
 800351c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003520:	e00a      	b.n	8003538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4908      	ldr	r1, [pc, #32]	; (8003548 <__NVIC_SetPriority+0x50>)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3b04      	subs	r3, #4
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	440b      	add	r3, r1
 8003536:	761a      	strb	r2, [r3, #24]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000e100 	.word	0xe000e100
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f1c3 0307 	rsb	r3, r3, #7
 8003566:	2b04      	cmp	r3, #4
 8003568:	bf28      	it	cs
 800356a:	2304      	movcs	r3, #4
 800356c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3304      	adds	r3, #4
 8003572:	2b06      	cmp	r3, #6
 8003574:	d902      	bls.n	800357c <NVIC_EncodePriority+0x30>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3b03      	subs	r3, #3
 800357a:	e000      	b.n	800357e <NVIC_EncodePriority+0x32>
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	401a      	ands	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	43d9      	mvns	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	4313      	orrs	r3, r2
         );
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	; 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c4:	d301      	bcc.n	80035ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00f      	b.n	80035ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <SysTick_Config+0x40>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d2:	210f      	movs	r1, #15
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d8:	f7ff ff8e 	bl	80034f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <SysTick_Config+0x40>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e2:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <SysTick_Config+0x40>)
 80035e4:	2207      	movs	r2, #7
 80035e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	e000e010 	.word	0xe000e010

080035f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff29 	bl	8003458 <__NVIC_SetPriorityGrouping>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003620:	f7ff ff3e 	bl	80034a0 <__NVIC_GetPriorityGrouping>
 8003624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f7ff ff8e 	bl	800354c <NVIC_EncodePriority>
 8003630:	4602      	mov	r2, r0
 8003632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff5d 	bl	80034f8 <__NVIC_SetPriority>
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff31 	bl	80034bc <__NVIC_EnableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ffa2 	bl	80035b4 <SysTick_Config>
 8003670:	4603      	mov	r3, r0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	; 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	e16b      	b.n	8003970 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003698:	2201      	movs	r2, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f040 815a 	bne.w	800396a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d005      	beq.n	80036ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d130      	bne.n	8003730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003704:	2201      	movs	r2, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 0201 	and.w	r2, r3, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b03      	cmp	r3, #3
 800373a:	d017      	beq.n	800376c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d123      	bne.n	80037c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	08da      	lsrs	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3208      	adds	r2, #8
 8003780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	08da      	lsrs	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3208      	adds	r2, #8
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0203 	and.w	r2, r3, #3
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80b4 	beq.w	800396a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	4b60      	ldr	r3, [pc, #384]	; (8003988 <HAL_GPIO_Init+0x30c>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	4a5f      	ldr	r2, [pc, #380]	; (8003988 <HAL_GPIO_Init+0x30c>)
 800380c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003810:	6453      	str	r3, [r2, #68]	; 0x44
 8003812:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <HAL_GPIO_Init+0x30c>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800381e:	4a5b      	ldr	r2, [pc, #364]	; (800398c <HAL_GPIO_Init+0x310>)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	3302      	adds	r3, #2
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_GPIO_Init+0x314>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02b      	beq.n	80038a2 <HAL_GPIO_Init+0x226>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_GPIO_Init+0x318>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d025      	beq.n	800389e <HAL_GPIO_Init+0x222>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_GPIO_Init+0x31c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <HAL_GPIO_Init+0x21e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4f      	ldr	r2, [pc, #316]	; (800399c <HAL_GPIO_Init+0x320>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d019      	beq.n	8003896 <HAL_GPIO_Init+0x21a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4e      	ldr	r2, [pc, #312]	; (80039a0 <HAL_GPIO_Init+0x324>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_GPIO_Init+0x216>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4d      	ldr	r2, [pc, #308]	; (80039a4 <HAL_GPIO_Init+0x328>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00d      	beq.n	800388e <HAL_GPIO_Init+0x212>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4c      	ldr	r2, [pc, #304]	; (80039a8 <HAL_GPIO_Init+0x32c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x20e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4b      	ldr	r2, [pc, #300]	; (80039ac <HAL_GPIO_Init+0x330>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_GPIO_Init+0x20a>
 8003882:	2307      	movs	r3, #7
 8003884:	e00e      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003886:	2308      	movs	r3, #8
 8003888:	e00c      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800388a:	2306      	movs	r3, #6
 800388c:	e00a      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800388e:	2305      	movs	r3, #5
 8003890:	e008      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003892:	2304      	movs	r3, #4
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 8003896:	2303      	movs	r3, #3
 8003898:	e004      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800389a:	2302      	movs	r3, #2
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_GPIO_Init+0x228>
 80038a2:	2300      	movs	r3, #0
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	f002 0203 	and.w	r2, r2, #3
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	4093      	lsls	r3, r2
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b4:	4935      	ldr	r1, [pc, #212]	; (800398c <HAL_GPIO_Init+0x310>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c2:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_GPIO_Init+0x334>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038e6:	4a32      	ldr	r2, [pc, #200]	; (80039b0 <HAL_GPIO_Init+0x334>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_GPIO_Init+0x334>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <HAL_GPIO_Init+0x334>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <HAL_GPIO_Init+0x334>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393a:	4a1d      	ldr	r2, [pc, #116]	; (80039b0 <HAL_GPIO_Init+0x334>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_GPIO_Init+0x334>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003964:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <HAL_GPIO_Init+0x334>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	f67f ae90 	bls.w	8003698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	40013800 	.word	0x40013800
 8003990:	40020000 	.word	0x40020000
 8003994:	40020400 	.word	0x40020400
 8003998:	40020800 	.word	0x40020800
 800399c:	40020c00 	.word	0x40020c00
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40021400 	.word	0x40021400
 80039a8:	40021800 	.word	0x40021800
 80039ac:	40021c00 	.word	0x40021c00
 80039b0:	40013c00 	.word	0x40013c00

080039b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	807b      	strh	r3, [r7, #2]
 80039c0:	4613      	mov	r3, r2
 80039c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c4:	787b      	ldrb	r3, [r7, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ca:	887a      	ldrh	r2, [r7, #2]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039d0:	e003      	b.n	80039da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	041a      	lsls	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	619a      	str	r2, [r3, #24]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039f8:	887a      	ldrh	r2, [r7, #2]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4013      	ands	r3, r2
 80039fe:	041a      	lsls	r2, r3, #16
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	887b      	ldrh	r3, [r7, #2]
 8003a06:	400b      	ands	r3, r1
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	619a      	str	r2, [r3, #24]
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fe50 	bl	80016e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40013c00 	.word	0x40013c00

08003a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e267      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d075      	beq.n	8003b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6a:	4b88      	ldr	r3, [pc, #544]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d00c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a76:	4b85      	ldr	r3, [pc, #532]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d112      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a82:	4b82      	ldr	r3, [pc, #520]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	4b7e      	ldr	r3, [pc, #504]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d05b      	beq.n	8003b54 <HAL_RCC_OscConfig+0x108>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d157      	bne.n	8003b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e242      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x74>
 8003ab2:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a75      	ldr	r2, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e01d      	b.n	8003afc <HAL_RCC_OscConfig+0xb0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x98>
 8003aca:	4b70      	ldr	r3, [pc, #448]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6f      	ldr	r2, [pc, #444]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b6d      	ldr	r3, [pc, #436]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6c      	ldr	r2, [pc, #432]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0xb0>
 8003ae4:	4b69      	ldr	r3, [pc, #420]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a68      	ldr	r2, [pc, #416]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b66      	ldr	r3, [pc, #408]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a65      	ldr	r2, [pc, #404]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe f9a4 	bl	8001e50 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fe f9a0 	bl	8001e50 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e207      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1e:	4b5b      	ldr	r3, [pc, #364]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0xc0>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f990 	bl	8001e50 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe f98c 	bl	8001e50 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1f3      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b46:	4b51      	ldr	r3, [pc, #324]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0xe8>
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d063      	beq.n	8003c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b62:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d11c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b7a:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b86:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_RCC_OscConfig+0x152>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d001      	beq.n	8003b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e1c7      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4937      	ldr	r1, [pc, #220]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb2:	e03a      	b.n	8003c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d020      	beq.n	8003bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bbc:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_OscConfig+0x244>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fe f945 	bl	8001e50 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fe f941 	bl	8001e50 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e1a8      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4925      	ldr	r1, [pc, #148]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]
 8003bfc:	e015      	b.n	8003c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x244>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe f924 	bl	8001e50 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0c:	f7fe f920 	bl	8001e50 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e187      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d036      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x248>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fe f904 	bl	8001e50 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fe f900 	bl	8001e50 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e167      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x200>
 8003c6a:	e01b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCC_OscConfig+0x248>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c72:	f7fe f8ed 	bl	8001e50 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	e00e      	b.n	8003c98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c7a:	f7fe f8e9 	bl	8001e50 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d907      	bls.n	8003c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e150      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	42470000 	.word	0x42470000
 8003c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c98:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ea      	bne.n	8003c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8097 	beq.w	8003de0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb6:	4b81      	ldr	r3, [pc, #516]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	4b7d      	ldr	r3, [pc, #500]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a7c      	ldr	r2, [pc, #496]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b7a      	ldr	r3, [pc, #488]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce2:	4b77      	ldr	r3, [pc, #476]	; (8003ec0 <HAL_RCC_OscConfig+0x474>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d118      	bne.n	8003d20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cee:	4b74      	ldr	r3, [pc, #464]	; (8003ec0 <HAL_RCC_OscConfig+0x474>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a73      	ldr	r2, [pc, #460]	; (8003ec0 <HAL_RCC_OscConfig+0x474>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe f8a9 	bl	8001e50 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fe f8a5 	bl	8001e50 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e10c      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_OscConfig+0x474>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x2ea>
 8003d28:	4b64      	ldr	r3, [pc, #400]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a63      	ldr	r2, [pc, #396]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
 8003d34:	e01c      	b.n	8003d70 <HAL_RCC_OscConfig+0x324>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x30c>
 8003d3e:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	4a5e      	ldr	r2, [pc, #376]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4a:	4b5c      	ldr	r3, [pc, #368]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a5b      	ldr	r2, [pc, #364]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0x324>
 8003d58:	4b58      	ldr	r3, [pc, #352]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	4a57      	ldr	r2, [pc, #348]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	; 0x70
 8003d64:	4b55      	ldr	r3, [pc, #340]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a54      	ldr	r2, [pc, #336]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d6a:	f023 0304 	bic.w	r3, r3, #4
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d015      	beq.n	8003da4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fe f86a 	bl	8001e50 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fe f866 	bl	8001e50 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e0cb      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d96:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0ee      	beq.n	8003d80 <HAL_RCC_OscConfig+0x334>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da4:	f7fe f854 	bl	8001e50 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f7fe f850 	bl	8001e50 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e0b5      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc2:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ee      	bne.n	8003dac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd4:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	4a38      	ldr	r2, [pc, #224]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a1 	beq.w	8003f2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dea:	4b34      	ldr	r3, [pc, #208]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d05c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d141      	bne.n	8003e82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCC_OscConfig+0x478>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe f824 	bl	8001e50 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fe f820 	bl	8001e50 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e087      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	3b01      	subs	r3, #1
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	491b      	ldr	r1, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x478>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fff9 	bl	8001e50 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fd fff5 	bl	8001e50 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e05c      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x416>
 8003e80:	e054      	b.n	8003f2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_RCC_OscConfig+0x478>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd ffe2 	bl	8001e50 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd ffde 	bl	8001e50 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e045      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x444>
 8003eae:	e03d      	b.n	8003f2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e038      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x4ec>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d028      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d121      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d11a      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800

08003f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0cc      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f50:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d90c      	bls.n	8003f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b65      	ldr	r3, [pc, #404]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b63      	ldr	r3, [pc, #396]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0b8      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d020      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f90:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a52      	ldr	r2, [pc, #328]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	494d      	ldr	r1, [pc, #308]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d044      	beq.n	800405c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d119      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e07f      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e06f      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400a:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e067      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401a:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4934      	ldr	r1, [pc, #208]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800402c:	f7fd ff10 	bl	8001e50 <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	e00a      	b.n	800404a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fd ff0c 	bl	8001e50 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e04f      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 020c 	and.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	429a      	cmp	r2, r3
 800405a:	d1eb      	bne.n	8004034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d20c      	bcs.n	8004084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e032      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4916      	ldr	r1, [pc, #88]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	490e      	ldr	r1, [pc, #56]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040c2:	f000 f821 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 80040c6:	4602      	mov	r2, r0
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	490a      	ldr	r1, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	5ccb      	ldrb	r3, [r1, r3]
 80040d6:	fa22 f303 	lsr.w	r3, r2, r3
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fe70 	bl	8001dc8 <HAL_InitTick>

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023c00 	.word	0x40023c00
 80040f8:	40023800 	.word	0x40023800
 80040fc:	080067f4 	.word	0x080067f4
 8004100:	20000018 	.word	0x20000018
 8004104:	2000001c 	.word	0x2000001c

08004108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800410c:	b094      	sub	sp, #80	; 0x50
 800410e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	647b      	str	r3, [r7, #68]	; 0x44
 8004114:	2300      	movs	r3, #0
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	2300      	movs	r3, #0
 800411a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004120:	4b79      	ldr	r3, [pc, #484]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d00d      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x40>
 800412c:	2b08      	cmp	r3, #8
 800412e:	f200 80e1 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x34>
 8004136:	2b04      	cmp	r3, #4
 8004138:	d003      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x3a>
 800413a:	e0db      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b73      	ldr	r3, [pc, #460]	; (800430c <HAL_RCC_GetSysClockFreq+0x204>)
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004140:	e0db      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004142:	4b73      	ldr	r3, [pc, #460]	; (8004310 <HAL_RCC_GetSysClockFreq+0x208>)
 8004144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004146:	e0d8      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004148:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004152:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d063      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415e:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	2200      	movs	r2, #0
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
 8004168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
 8004176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	f04f 0000 	mov.w	r0, #0
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	0159      	lsls	r1, r3, #5
 8004188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800418c:	0150      	lsls	r0, r2, #5
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4621      	mov	r1, r4
 8004194:	1a51      	subs	r1, r2, r1
 8004196:	6139      	str	r1, [r7, #16]
 8004198:	4629      	mov	r1, r5
 800419a:	eb63 0301 	sbc.w	r3, r3, r1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ac:	4659      	mov	r1, fp
 80041ae:	018b      	lsls	r3, r1, #6
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b6:	4651      	mov	r1, sl
 80041b8:	018a      	lsls	r2, r1, #6
 80041ba:	4651      	mov	r1, sl
 80041bc:	ebb2 0801 	subs.w	r8, r2, r1
 80041c0:	4659      	mov	r1, fp
 80041c2:	eb63 0901 	sbc.w	r9, r3, r1
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041da:	4690      	mov	r8, r2
 80041dc:	4699      	mov	r9, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	eb18 0303 	adds.w	r3, r8, r3
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	462b      	mov	r3, r5
 80041e8:	eb49 0303 	adc.w	r3, r9, r3
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041fa:	4629      	mov	r1, r5
 80041fc:	024b      	lsls	r3, r1, #9
 80041fe:	4621      	mov	r1, r4
 8004200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004204:	4621      	mov	r1, r4
 8004206:	024a      	lsls	r2, r1, #9
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420e:	2200      	movs	r2, #0
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
 8004212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004218:	f7fc f82a 	bl	8000270 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4613      	mov	r3, r2
 8004222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004224:	e058      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004226:	4b38      	ldr	r3, [pc, #224]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	099b      	lsrs	r3, r3, #6
 800422c:	2200      	movs	r2, #0
 800422e:	4618      	mov	r0, r3
 8004230:	4611      	mov	r1, r2
 8004232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	0159      	lsls	r1, r3, #5
 800424e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004252:	0150      	lsls	r0, r2, #5
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4641      	mov	r1, r8
 800425a:	ebb2 0a01 	subs.w	sl, r2, r1
 800425e:	4649      	mov	r1, r9
 8004260:	eb63 0b01 	sbc.w	fp, r3, r1
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004278:	ebb2 040a 	subs.w	r4, r2, sl
 800427c:	eb63 050b 	sbc.w	r5, r3, fp
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	00eb      	lsls	r3, r5, #3
 800428a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428e:	00e2      	lsls	r2, r4, #3
 8004290:	4614      	mov	r4, r2
 8004292:	461d      	mov	r5, r3
 8004294:	4643      	mov	r3, r8
 8004296:	18e3      	adds	r3, r4, r3
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	464b      	mov	r3, r9
 800429c:	eb45 0303 	adc.w	r3, r5, r3
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ae:	4629      	mov	r1, r5
 80042b0:	028b      	lsls	r3, r1, #10
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b8:	4621      	mov	r1, r4
 80042ba:	028a      	lsls	r2, r1, #10
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	61fa      	str	r2, [r7, #28]
 80042c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042cc:	f7fb ffd0 	bl	8000270 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetSysClockFreq+0x204>)
 80042f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3750      	adds	r7, #80	; 0x50
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000018 	.word	0x20000018

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a9b      	lsrs	r3, r3, #10
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	08006804 	.word	0x08006804

08004354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004358:	f7ff ffdc 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0b5b      	lsrs	r3, r3, #13
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4903      	ldr	r1, [pc, #12]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	08006804 	.word	0x08006804

0800437c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e041      	b.n	8004412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd faec 	bl	8001980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fac4 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04e      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d022      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d01d      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d018      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_TIM_Base_Start_IT+0xd0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00e      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d111      	bne.n	80044c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d010      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e007      	b.n	80044d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40001800 	.word	0x40001800

080044fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a1a      	ldr	r2, [r3, #32]
 800451a:	f241 1311 	movw	r3, #4369	; 0x1111
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10f      	bne.n	8004544 <HAL_TIM_Base_Stop_IT+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	f240 4344 	movw	r3, #1092	; 0x444
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <HAL_TIM_Base_Stop_IT+0x48>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d122      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d11b      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0202 	mvn.w	r2, #2
 8004586:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f9b5 	bl	800490c <HAL_TIM_IC_CaptureCallback>
 80045a2:	e005      	b.n	80045b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f9a7 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9b8 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d122      	bne.n	800460a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d11b      	bne.n	800460a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0204 	mvn.w	r2, #4
 80045da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f98b 	bl	800490c <HAL_TIM_IC_CaptureCallback>
 80045f6:	e005      	b.n	8004604 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f97d 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f98e 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b08      	cmp	r3, #8
 8004616:	d122      	bne.n	800465e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d11b      	bne.n	800465e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0208 	mvn.w	r2, #8
 800462e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2204      	movs	r2, #4
 8004634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f961 	bl	800490c <HAL_TIM_IC_CaptureCallback>
 800464a:	e005      	b.n	8004658 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f953 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f964 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d122      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d11b      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f06f 0210 	mvn.w	r2, #16
 8004682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2208      	movs	r2, #8
 8004688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f937 	bl	800490c <HAL_TIM_IC_CaptureCallback>
 800469e:	e005      	b.n	80046ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f929 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f93a 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d10e      	bne.n	80046de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d107      	bne.n	80046de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f06f 0201 	mvn.w	r2, #1
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fc fb29 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d10e      	bne.n	800470a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d107      	bne.n	800470a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fadf 	bl	8004cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d10e      	bne.n	8004736 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d107      	bne.n	8004736 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800472e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8ff 	bl	8004934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b20      	cmp	r3, #32
 8004742:	d10e      	bne.n	8004762 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b20      	cmp	r3, #32
 8004750:	d107      	bne.n	8004762 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f06f 0220 	mvn.w	r2, #32
 800475a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 faa9 	bl	8004cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_TIM_ConfigClockSource+0x1c>
 8004782:	2302      	movs	r3, #2
 8004784:	e0b4      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x186>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047be:	d03e      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xd4>
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	f200 8087 	bhi.w	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
 80047c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047cc:	f000 8086 	beq.w	80048dc <HAL_TIM_ConfigClockSource+0x172>
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d87f      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
 80047d6:	2b70      	cmp	r3, #112	; 0x70
 80047d8:	d01a      	beq.n	8004810 <HAL_TIM_ConfigClockSource+0xa6>
 80047da:	2b70      	cmp	r3, #112	; 0x70
 80047dc:	d87b      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
 80047de:	2b60      	cmp	r3, #96	; 0x60
 80047e0:	d050      	beq.n	8004884 <HAL_TIM_ConfigClockSource+0x11a>
 80047e2:	2b60      	cmp	r3, #96	; 0x60
 80047e4:	d877      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
 80047e6:	2b50      	cmp	r3, #80	; 0x50
 80047e8:	d03c      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0xfa>
 80047ea:	2b50      	cmp	r3, #80	; 0x50
 80047ec:	d873      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d058      	beq.n	80048a4 <HAL_TIM_ConfigClockSource+0x13a>
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d86f      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
 80047f6:	2b30      	cmp	r3, #48	; 0x30
 80047f8:	d064      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x15a>
 80047fa:	2b30      	cmp	r3, #48	; 0x30
 80047fc:	d86b      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d060      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x15a>
 8004802:	2b20      	cmp	r3, #32
 8004804:	d867      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d05c      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x15a>
 800480a:	2b10      	cmp	r3, #16
 800480c:	d05a      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x15a>
 800480e:	e062      	b.n	80048d6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6899      	ldr	r1, [r3, #8]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f000 f9ac 	bl	8004b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004832:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
      break;
 800483c:	e04f      	b.n	80048de <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6899      	ldr	r1, [r3, #8]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f000 f995 	bl	8004b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004860:	609a      	str	r2, [r3, #8]
      break;
 8004862:	e03c      	b.n	80048de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	461a      	mov	r2, r3
 8004872:	f000 f909 	bl	8004a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2150      	movs	r1, #80	; 0x50
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f962 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 8004882:	e02c      	b.n	80048de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	461a      	mov	r2, r3
 8004892:	f000 f928 	bl	8004ae6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2160      	movs	r1, #96	; 0x60
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f952 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 80048a2:	e01c      	b.n	80048de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	461a      	mov	r2, r3
 80048b2:	f000 f8e9 	bl	8004a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2140      	movs	r1, #64	; 0x40
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f942 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 80048c2:	e00c      	b.n	80048de <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 f939 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 80048d4:	e003      	b.n	80048de <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
      break;
 80048da:	e000      	b.n	80048de <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a40      	ldr	r2, [pc, #256]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d00f      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3d      	ldr	r2, [pc, #244]	; (8004a60 <TIM_Base_SetConfig+0x118>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <TIM_Base_SetConfig+0x11c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <TIM_Base_SetConfig+0x120>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3a      	ldr	r2, [pc, #232]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d108      	bne.n	800499a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d027      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <TIM_Base_SetConfig+0x118>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d023      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <TIM_Base_SetConfig+0x11c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01f      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <TIM_Base_SetConfig+0x120>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d017      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <TIM_Base_SetConfig+0x128>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <TIM_Base_SetConfig+0x12c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <TIM_Base_SetConfig+0x130>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <TIM_Base_SetConfig+0x134>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <TIM_Base_SetConfig+0x138>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <TIM_Base_SetConfig+0x13c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_Base_SetConfig+0xf8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d103      	bne.n	8004a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	615a      	str	r2, [r3, #20]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800
 8004a7c:	40001800 	.word	0x40001800
 8004a80:	40001c00 	.word	0x40001c00
 8004a84:	40002000 	.word	0x40002000

08004a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f023 030a 	bic.w	r3, r3, #10
 8004ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b087      	sub	sp, #28
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f023 0210 	bic.w	r2, r3, #16
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f043 0307 	orr.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e05a      	b.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d022      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c20:	d01d      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1d      	ldr	r2, [pc, #116]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d018      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00e      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d009      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a17      	ldr	r2, [pc, #92]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d004      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d10c      	bne.n	8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800
 8004ca4:	40000c00 	.word	0x40000c00
 8004ca8:	40010400 	.word	0x40010400
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40001800 	.word	0x40001800

08004cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e03f      	b.n	8004d6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc fe80 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f929 	bl	8004f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b08a      	sub	sp, #40	; 0x28
 8004d7a:	af02      	add	r7, sp, #8
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d17c      	bne.n	8004e90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_UART_Transmit+0x2c>
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e075      	b.n	8004e92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_UART_Transmit+0x3e>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e06e      	b.n	8004e92 <HAL_UART_Transmit+0x11c>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2221      	movs	r2, #33	; 0x21
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dca:	f7fd f841 	bl	8001e50 <HAL_GetTick>
 8004dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	88fa      	ldrh	r2, [r7, #6]
 8004dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de4:	d108      	bne.n	8004df8 <HAL_UART_Transmit+0x82>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e003      	b.n	8004e00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e08:	e02a      	b.n	8004e60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f840 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e036      	b.n	8004e92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10b      	bne.n	8004e42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	e007      	b.n	8004e52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	781a      	ldrb	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1cf      	bne.n	8004e0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2200      	movs	r2, #0
 8004e72:	2140      	movs	r1, #64	; 0x40
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f810 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e006      	b.n	8004e92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b090      	sub	sp, #64	; 0x40
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eaa:	e050      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb2:	d04c      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0x30>
 8004eba:	f7fc ffc9 	bl	8001e50 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d241      	bcs.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eea:	637a      	str	r2, [r7, #52]	; 0x34
 8004eec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f1e:	623a      	str	r2, [r7, #32]
 8004f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	69f9      	ldr	r1, [r7, #28]
 8004f24:	6a3a      	ldr	r2, [r7, #32]
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e5      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e00f      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d09f      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3740      	adds	r7, #64	; 0x40
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f7c:	b0c0      	sub	sp, #256	; 0x100
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	68d9      	ldr	r1, [r3, #12]
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	ea40 0301 	orr.w	r3, r0, r1
 8004fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fd0:	f021 010c 	bic.w	r1, r1, #12
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff2:	6999      	ldr	r1, [r3, #24]
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	ea40 0301 	orr.w	r3, r0, r1
 8004ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4b8f      	ldr	r3, [pc, #572]	; (8005244 <UART_SetConfig+0x2cc>)
 8005008:	429a      	cmp	r2, r3
 800500a:	d005      	beq.n	8005018 <UART_SetConfig+0xa0>
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b8d      	ldr	r3, [pc, #564]	; (8005248 <UART_SetConfig+0x2d0>)
 8005014:	429a      	cmp	r2, r3
 8005016:	d104      	bne.n	8005022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005018:	f7ff f99c 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 800501c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005020:	e003      	b.n	800502a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005022:	f7ff f983 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8005026:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005034:	f040 810c 	bne.w	8005250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503c:	2200      	movs	r2, #0
 800503e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005042:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800504a:	4622      	mov	r2, r4
 800504c:	462b      	mov	r3, r5
 800504e:	1891      	adds	r1, r2, r2
 8005050:	65b9      	str	r1, [r7, #88]	; 0x58
 8005052:	415b      	adcs	r3, r3
 8005054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800505a:	4621      	mov	r1, r4
 800505c:	eb12 0801 	adds.w	r8, r2, r1
 8005060:	4629      	mov	r1, r5
 8005062:	eb43 0901 	adc.w	r9, r3, r1
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800507a:	4690      	mov	r8, r2
 800507c:	4699      	mov	r9, r3
 800507e:	4623      	mov	r3, r4
 8005080:	eb18 0303 	adds.w	r3, r8, r3
 8005084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005088:	462b      	mov	r3, r5
 800508a:	eb49 0303 	adc.w	r3, r9, r3
 800508e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800509e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050a6:	460b      	mov	r3, r1
 80050a8:	18db      	adds	r3, r3, r3
 80050aa:	653b      	str	r3, [r7, #80]	; 0x50
 80050ac:	4613      	mov	r3, r2
 80050ae:	eb42 0303 	adc.w	r3, r2, r3
 80050b2:	657b      	str	r3, [r7, #84]	; 0x54
 80050b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050bc:	f7fb f8d8 	bl	8000270 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4b61      	ldr	r3, [pc, #388]	; (800524c <UART_SetConfig+0x2d4>)
 80050c6:	fba3 2302 	umull	r2, r3, r3, r2
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	011c      	lsls	r4, r3, #4
 80050ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050e0:	4642      	mov	r2, r8
 80050e2:	464b      	mov	r3, r9
 80050e4:	1891      	adds	r1, r2, r2
 80050e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80050e8:	415b      	adcs	r3, r3
 80050ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050f0:	4641      	mov	r1, r8
 80050f2:	eb12 0a01 	adds.w	sl, r2, r1
 80050f6:	4649      	mov	r1, r9
 80050f8:	eb43 0b01 	adc.w	fp, r3, r1
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800510c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005110:	4692      	mov	sl, r2
 8005112:	469b      	mov	fp, r3
 8005114:	4643      	mov	r3, r8
 8005116:	eb1a 0303 	adds.w	r3, sl, r3
 800511a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800511e:	464b      	mov	r3, r9
 8005120:	eb4b 0303 	adc.w	r3, fp, r3
 8005124:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005134:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800513c:	460b      	mov	r3, r1
 800513e:	18db      	adds	r3, r3, r3
 8005140:	643b      	str	r3, [r7, #64]	; 0x40
 8005142:	4613      	mov	r3, r2
 8005144:	eb42 0303 	adc.w	r3, r2, r3
 8005148:	647b      	str	r3, [r7, #68]	; 0x44
 800514a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800514e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005152:	f7fb f88d 	bl	8000270 <__aeabi_uldivmod>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4611      	mov	r1, r2
 800515c:	4b3b      	ldr	r3, [pc, #236]	; (800524c <UART_SetConfig+0x2d4>)
 800515e:	fba3 2301 	umull	r2, r3, r3, r1
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2264      	movs	r2, #100	; 0x64
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	1acb      	subs	r3, r1, r3
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <UART_SetConfig+0x2d4>)
 8005174:	fba3 2302 	umull	r2, r3, r3, r2
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005180:	441c      	add	r4, r3
 8005182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005186:	2200      	movs	r2, #0
 8005188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800518c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	1891      	adds	r1, r2, r2
 800519a:	63b9      	str	r1, [r7, #56]	; 0x38
 800519c:	415b      	adcs	r3, r3
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051a4:	4641      	mov	r1, r8
 80051a6:	1851      	adds	r1, r2, r1
 80051a8:	6339      	str	r1, [r7, #48]	; 0x30
 80051aa:	4649      	mov	r1, r9
 80051ac:	414b      	adcs	r3, r1
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051bc:	4659      	mov	r1, fp
 80051be:	00cb      	lsls	r3, r1, #3
 80051c0:	4651      	mov	r1, sl
 80051c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c6:	4651      	mov	r1, sl
 80051c8:	00ca      	lsls	r2, r1, #3
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	4642      	mov	r2, r8
 80051d2:	189b      	adds	r3, r3, r2
 80051d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051d8:	464b      	mov	r3, r9
 80051da:	460a      	mov	r2, r1
 80051dc:	eb42 0303 	adc.w	r3, r2, r3
 80051e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051f8:	460b      	mov	r3, r1
 80051fa:	18db      	adds	r3, r3, r3
 80051fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fe:	4613      	mov	r3, r2
 8005200:	eb42 0303 	adc.w	r3, r2, r3
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800520a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800520e:	f7fb f82f 	bl	8000270 <__aeabi_uldivmod>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <UART_SetConfig+0x2d4>)
 8005218:	fba3 1302 	umull	r1, r3, r3, r2
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	2164      	movs	r1, #100	; 0x64
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	3332      	adds	r3, #50	; 0x32
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <UART_SetConfig+0x2d4>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	f003 0207 	and.w	r2, r3, #7
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4422      	add	r2, r4
 800523e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005240:	e105      	b.n	800544e <UART_SetConfig+0x4d6>
 8005242:	bf00      	nop
 8005244:	40011000 	.word	0x40011000
 8005248:	40011400 	.word	0x40011400
 800524c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005254:	2200      	movs	r2, #0
 8005256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800525a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800525e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005262:	4642      	mov	r2, r8
 8005264:	464b      	mov	r3, r9
 8005266:	1891      	adds	r1, r2, r2
 8005268:	6239      	str	r1, [r7, #32]
 800526a:	415b      	adcs	r3, r3
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005272:	4641      	mov	r1, r8
 8005274:	1854      	adds	r4, r2, r1
 8005276:	4649      	mov	r1, r9
 8005278:	eb43 0501 	adc.w	r5, r3, r1
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	00eb      	lsls	r3, r5, #3
 8005286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528a:	00e2      	lsls	r2, r4, #3
 800528c:	4614      	mov	r4, r2
 800528e:	461d      	mov	r5, r3
 8005290:	4643      	mov	r3, r8
 8005292:	18e3      	adds	r3, r4, r3
 8005294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005298:	464b      	mov	r3, r9
 800529a:	eb45 0303 	adc.w	r3, r5, r3
 800529e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052be:	4629      	mov	r1, r5
 80052c0:	008b      	lsls	r3, r1, #2
 80052c2:	4621      	mov	r1, r4
 80052c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c8:	4621      	mov	r1, r4
 80052ca:	008a      	lsls	r2, r1, #2
 80052cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052d0:	f7fa ffce 	bl	8000270 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4b60      	ldr	r3, [pc, #384]	; (800545c <UART_SetConfig+0x4e4>)
 80052da:	fba3 2302 	umull	r2, r3, r3, r2
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	011c      	lsls	r4, r3, #4
 80052e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	1891      	adds	r1, r2, r2
 80052fa:	61b9      	str	r1, [r7, #24]
 80052fc:	415b      	adcs	r3, r3
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005304:	4641      	mov	r1, r8
 8005306:	1851      	adds	r1, r2, r1
 8005308:	6139      	str	r1, [r7, #16]
 800530a:	4649      	mov	r1, r9
 800530c:	414b      	adcs	r3, r1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800531c:	4659      	mov	r1, fp
 800531e:	00cb      	lsls	r3, r1, #3
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005326:	4651      	mov	r1, sl
 8005328:	00ca      	lsls	r2, r1, #3
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	4603      	mov	r3, r0
 8005330:	4642      	mov	r2, r8
 8005332:	189b      	adds	r3, r3, r2
 8005334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005338:	464b      	mov	r3, r9
 800533a:	460a      	mov	r2, r1
 800533c:	eb42 0303 	adc.w	r3, r2, r3
 8005340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	67bb      	str	r3, [r7, #120]	; 0x78
 800534e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800535c:	4649      	mov	r1, r9
 800535e:	008b      	lsls	r3, r1, #2
 8005360:	4641      	mov	r1, r8
 8005362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005366:	4641      	mov	r1, r8
 8005368:	008a      	lsls	r2, r1, #2
 800536a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800536e:	f7fa ff7f 	bl	8000270 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4b39      	ldr	r3, [pc, #228]	; (800545c <UART_SetConfig+0x4e4>)
 8005378:	fba3 1302 	umull	r1, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	2164      	movs	r1, #100	; 0x64
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	3332      	adds	r3, #50	; 0x32
 800538a:	4a34      	ldr	r2, [pc, #208]	; (800545c <UART_SetConfig+0x4e4>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005396:	441c      	add	r4, r3
 8005398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800539c:	2200      	movs	r2, #0
 800539e:	673b      	str	r3, [r7, #112]	; 0x70
 80053a0:	677a      	str	r2, [r7, #116]	; 0x74
 80053a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053a6:	4642      	mov	r2, r8
 80053a8:	464b      	mov	r3, r9
 80053aa:	1891      	adds	r1, r2, r2
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	415b      	adcs	r3, r3
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053b6:	4641      	mov	r1, r8
 80053b8:	1851      	adds	r1, r2, r1
 80053ba:	6039      	str	r1, [r7, #0]
 80053bc:	4649      	mov	r1, r9
 80053be:	414b      	adcs	r3, r1
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053ce:	4659      	mov	r1, fp
 80053d0:	00cb      	lsls	r3, r1, #3
 80053d2:	4651      	mov	r1, sl
 80053d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d8:	4651      	mov	r1, sl
 80053da:	00ca      	lsls	r2, r1, #3
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	4603      	mov	r3, r0
 80053e2:	4642      	mov	r2, r8
 80053e4:	189b      	adds	r3, r3, r2
 80053e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e8:	464b      	mov	r3, r9
 80053ea:	460a      	mov	r2, r1
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	663b      	str	r3, [r7, #96]	; 0x60
 80053fc:	667a      	str	r2, [r7, #100]	; 0x64
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800540a:	4649      	mov	r1, r9
 800540c:	008b      	lsls	r3, r1, #2
 800540e:	4641      	mov	r1, r8
 8005410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005414:	4641      	mov	r1, r8
 8005416:	008a      	lsls	r2, r1, #2
 8005418:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800541c:	f7fa ff28 	bl	8000270 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4b0d      	ldr	r3, [pc, #52]	; (800545c <UART_SetConfig+0x4e4>)
 8005426:	fba3 1302 	umull	r1, r3, r3, r2
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	2164      	movs	r1, #100	; 0x64
 800542e:	fb01 f303 	mul.w	r3, r1, r3
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	3332      	adds	r3, #50	; 0x32
 8005438:	4a08      	ldr	r2, [pc, #32]	; (800545c <UART_SetConfig+0x4e4>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4422      	add	r2, r4
 800544c:	609a      	str	r2, [r3, #8]
}
 800544e:	bf00      	nop
 8005450:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005454:	46bd      	mov	sp, r7
 8005456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800545a:	bf00      	nop
 800545c:	51eb851f 	.word	0x51eb851f

08005460 <__errno>:
 8005460:	4b01      	ldr	r3, [pc, #4]	; (8005468 <__errno+0x8>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000024 	.word	0x20000024

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f001 f8e6 	bl	8006650 <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	0800695c 	.word	0x0800695c
 80054a8:	0800695c 	.word	0x0800695c
 80054ac:	0800695c 	.word	0x0800695c
 80054b0:	08006960 	.word	0x08006960

080054b4 <memset>:
 80054b4:	4402      	add	r2, r0
 80054b6:	4603      	mov	r3, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d100      	bne.n	80054be <memset+0xa>
 80054bc:	4770      	bx	lr
 80054be:	f803 1b01 	strb.w	r1, [r3], #1
 80054c2:	e7f9      	b.n	80054b8 <memset+0x4>

080054c4 <iprintf>:
 80054c4:	b40f      	push	{r0, r1, r2, r3}
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <iprintf+0x2c>)
 80054c8:	b513      	push	{r0, r1, r4, lr}
 80054ca:	681c      	ldr	r4, [r3, #0]
 80054cc:	b124      	cbz	r4, 80054d8 <iprintf+0x14>
 80054ce:	69a3      	ldr	r3, [r4, #24]
 80054d0:	b913      	cbnz	r3, 80054d8 <iprintf+0x14>
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 faba 	bl	8005a4c <__sinit>
 80054d8:	ab05      	add	r3, sp, #20
 80054da:	9a04      	ldr	r2, [sp, #16]
 80054dc:	68a1      	ldr	r1, [r4, #8]
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 fcdd 	bl	8005ea0 <_vfiprintf_r>
 80054e6:	b002      	add	sp, #8
 80054e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ec:	b004      	add	sp, #16
 80054ee:	4770      	bx	lr
 80054f0:	20000024 	.word	0x20000024

080054f4 <_puts_r>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	460e      	mov	r6, r1
 80054f8:	4605      	mov	r5, r0
 80054fa:	b118      	cbz	r0, 8005504 <_puts_r+0x10>
 80054fc:	6983      	ldr	r3, [r0, #24]
 80054fe:	b90b      	cbnz	r3, 8005504 <_puts_r+0x10>
 8005500:	f000 faa4 	bl	8005a4c <__sinit>
 8005504:	69ab      	ldr	r3, [r5, #24]
 8005506:	68ac      	ldr	r4, [r5, #8]
 8005508:	b913      	cbnz	r3, 8005510 <_puts_r+0x1c>
 800550a:	4628      	mov	r0, r5
 800550c:	f000 fa9e 	bl	8005a4c <__sinit>
 8005510:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <_puts_r+0xd0>)
 8005512:	429c      	cmp	r4, r3
 8005514:	d120      	bne.n	8005558 <_puts_r+0x64>
 8005516:	686c      	ldr	r4, [r5, #4]
 8005518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800551a:	07db      	lsls	r3, r3, #31
 800551c:	d405      	bmi.n	800552a <_puts_r+0x36>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	0598      	lsls	r0, r3, #22
 8005522:	d402      	bmi.n	800552a <_puts_r+0x36>
 8005524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005526:	f000 fb41 	bl	8005bac <__retarget_lock_acquire_recursive>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	0719      	lsls	r1, r3, #28
 800552e:	d51d      	bpl.n	800556c <_puts_r+0x78>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	b1db      	cbz	r3, 800556c <_puts_r+0x78>
 8005534:	3e01      	subs	r6, #1
 8005536:	68a3      	ldr	r3, [r4, #8]
 8005538:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800553c:	3b01      	subs	r3, #1
 800553e:	60a3      	str	r3, [r4, #8]
 8005540:	bb39      	cbnz	r1, 8005592 <_puts_r+0x9e>
 8005542:	2b00      	cmp	r3, #0
 8005544:	da38      	bge.n	80055b8 <_puts_r+0xc4>
 8005546:	4622      	mov	r2, r4
 8005548:	210a      	movs	r1, #10
 800554a:	4628      	mov	r0, r5
 800554c:	f000 f886 	bl	800565c <__swbuf_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d011      	beq.n	8005578 <_puts_r+0x84>
 8005554:	250a      	movs	r5, #10
 8005556:	e011      	b.n	800557c <_puts_r+0x88>
 8005558:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <_puts_r+0xd4>)
 800555a:	429c      	cmp	r4, r3
 800555c:	d101      	bne.n	8005562 <_puts_r+0x6e>
 800555e:	68ac      	ldr	r4, [r5, #8]
 8005560:	e7da      	b.n	8005518 <_puts_r+0x24>
 8005562:	4b1a      	ldr	r3, [pc, #104]	; (80055cc <_puts_r+0xd8>)
 8005564:	429c      	cmp	r4, r3
 8005566:	bf08      	it	eq
 8005568:	68ec      	ldreq	r4, [r5, #12]
 800556a:	e7d5      	b.n	8005518 <_puts_r+0x24>
 800556c:	4621      	mov	r1, r4
 800556e:	4628      	mov	r0, r5
 8005570:	f000 f8c6 	bl	8005700 <__swsetup_r>
 8005574:	2800      	cmp	r0, #0
 8005576:	d0dd      	beq.n	8005534 <_puts_r+0x40>
 8005578:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800557c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800557e:	07da      	lsls	r2, r3, #31
 8005580:	d405      	bmi.n	800558e <_puts_r+0x9a>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	059b      	lsls	r3, r3, #22
 8005586:	d402      	bmi.n	800558e <_puts_r+0x9a>
 8005588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558a:	f000 fb10 	bl	8005bae <__retarget_lock_release_recursive>
 800558e:	4628      	mov	r0, r5
 8005590:	bd70      	pop	{r4, r5, r6, pc}
 8005592:	2b00      	cmp	r3, #0
 8005594:	da04      	bge.n	80055a0 <_puts_r+0xac>
 8005596:	69a2      	ldr	r2, [r4, #24]
 8005598:	429a      	cmp	r2, r3
 800559a:	dc06      	bgt.n	80055aa <_puts_r+0xb6>
 800559c:	290a      	cmp	r1, #10
 800559e:	d004      	beq.n	80055aa <_puts_r+0xb6>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	6022      	str	r2, [r4, #0]
 80055a6:	7019      	strb	r1, [r3, #0]
 80055a8:	e7c5      	b.n	8005536 <_puts_r+0x42>
 80055aa:	4622      	mov	r2, r4
 80055ac:	4628      	mov	r0, r5
 80055ae:	f000 f855 	bl	800565c <__swbuf_r>
 80055b2:	3001      	adds	r0, #1
 80055b4:	d1bf      	bne.n	8005536 <_puts_r+0x42>
 80055b6:	e7df      	b.n	8005578 <_puts_r+0x84>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	250a      	movs	r5, #10
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	701d      	strb	r5, [r3, #0]
 80055c2:	e7db      	b.n	800557c <_puts_r+0x88>
 80055c4:	080068e0 	.word	0x080068e0
 80055c8:	08006900 	.word	0x08006900
 80055cc:	080068c0 	.word	0x080068c0

080055d0 <puts>:
 80055d0:	4b02      	ldr	r3, [pc, #8]	; (80055dc <puts+0xc>)
 80055d2:	4601      	mov	r1, r0
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	f7ff bf8d 	b.w	80054f4 <_puts_r>
 80055da:	bf00      	nop
 80055dc:	20000024 	.word	0x20000024

080055e0 <rand>:
 80055e0:	4b16      	ldr	r3, [pc, #88]	; (800563c <rand+0x5c>)
 80055e2:	b510      	push	{r4, lr}
 80055e4:	681c      	ldr	r4, [r3, #0]
 80055e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055e8:	b9b3      	cbnz	r3, 8005618 <rand+0x38>
 80055ea:	2018      	movs	r0, #24
 80055ec:	f000 fb46 	bl	8005c7c <malloc>
 80055f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80055f2:	b928      	cbnz	r0, 8005600 <rand+0x20>
 80055f4:	4602      	mov	r2, r0
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <rand+0x60>)
 80055f8:	4812      	ldr	r0, [pc, #72]	; (8005644 <rand+0x64>)
 80055fa:	214e      	movs	r1, #78	; 0x4e
 80055fc:	f000 f8ee 	bl	80057dc <__assert_func>
 8005600:	4a11      	ldr	r2, [pc, #68]	; (8005648 <rand+0x68>)
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <rand+0x6c>)
 8005604:	e9c0 2300 	strd	r2, r3, [r0]
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <rand+0x70>)
 800560a:	6083      	str	r3, [r0, #8]
 800560c:	230b      	movs	r3, #11
 800560e:	8183      	strh	r3, [r0, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	2300      	movs	r3, #0
 8005614:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005618:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800561a:	4a0e      	ldr	r2, [pc, #56]	; (8005654 <rand+0x74>)
 800561c:	6920      	ldr	r0, [r4, #16]
 800561e:	6963      	ldr	r3, [r4, #20]
 8005620:	490d      	ldr	r1, [pc, #52]	; (8005658 <rand+0x78>)
 8005622:	4342      	muls	r2, r0
 8005624:	fb01 2203 	mla	r2, r1, r3, r2
 8005628:	fba0 0101 	umull	r0, r1, r0, r1
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	eb42 0001 	adc.w	r0, r2, r1
 8005632:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005636:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800563a:	bd10      	pop	{r4, pc}
 800563c:	20000024 	.word	0x20000024
 8005640:	08006810 	.word	0x08006810
 8005644:	08006827 	.word	0x08006827
 8005648:	abcd330e 	.word	0xabcd330e
 800564c:	e66d1234 	.word	0xe66d1234
 8005650:	0005deec 	.word	0x0005deec
 8005654:	5851f42d 	.word	0x5851f42d
 8005658:	4c957f2d 	.word	0x4c957f2d

0800565c <__swbuf_r>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	460e      	mov	r6, r1
 8005660:	4614      	mov	r4, r2
 8005662:	4605      	mov	r5, r0
 8005664:	b118      	cbz	r0, 800566e <__swbuf_r+0x12>
 8005666:	6983      	ldr	r3, [r0, #24]
 8005668:	b90b      	cbnz	r3, 800566e <__swbuf_r+0x12>
 800566a:	f000 f9ef 	bl	8005a4c <__sinit>
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <__swbuf_r+0x98>)
 8005670:	429c      	cmp	r4, r3
 8005672:	d12b      	bne.n	80056cc <__swbuf_r+0x70>
 8005674:	686c      	ldr	r4, [r5, #4]
 8005676:	69a3      	ldr	r3, [r4, #24]
 8005678:	60a3      	str	r3, [r4, #8]
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	071a      	lsls	r2, r3, #28
 800567e:	d52f      	bpl.n	80056e0 <__swbuf_r+0x84>
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	b36b      	cbz	r3, 80056e0 <__swbuf_r+0x84>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	1ac0      	subs	r0, r0, r3
 800568a:	6963      	ldr	r3, [r4, #20]
 800568c:	b2f6      	uxtb	r6, r6
 800568e:	4283      	cmp	r3, r0
 8005690:	4637      	mov	r7, r6
 8005692:	dc04      	bgt.n	800569e <__swbuf_r+0x42>
 8005694:	4621      	mov	r1, r4
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f944 	bl	8005924 <_fflush_r>
 800569c:	bb30      	cbnz	r0, 80056ec <__swbuf_r+0x90>
 800569e:	68a3      	ldr	r3, [r4, #8]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	60a3      	str	r3, [r4, #8]
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	701e      	strb	r6, [r3, #0]
 80056ac:	6963      	ldr	r3, [r4, #20]
 80056ae:	3001      	adds	r0, #1
 80056b0:	4283      	cmp	r3, r0
 80056b2:	d004      	beq.n	80056be <__swbuf_r+0x62>
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	07db      	lsls	r3, r3, #31
 80056b8:	d506      	bpl.n	80056c8 <__swbuf_r+0x6c>
 80056ba:	2e0a      	cmp	r6, #10
 80056bc:	d104      	bne.n	80056c8 <__swbuf_r+0x6c>
 80056be:	4621      	mov	r1, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 f92f 	bl	8005924 <_fflush_r>
 80056c6:	b988      	cbnz	r0, 80056ec <__swbuf_r+0x90>
 80056c8:	4638      	mov	r0, r7
 80056ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <__swbuf_r+0x9c>)
 80056ce:	429c      	cmp	r4, r3
 80056d0:	d101      	bne.n	80056d6 <__swbuf_r+0x7a>
 80056d2:	68ac      	ldr	r4, [r5, #8]
 80056d4:	e7cf      	b.n	8005676 <__swbuf_r+0x1a>
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <__swbuf_r+0xa0>)
 80056d8:	429c      	cmp	r4, r3
 80056da:	bf08      	it	eq
 80056dc:	68ec      	ldreq	r4, [r5, #12]
 80056de:	e7ca      	b.n	8005676 <__swbuf_r+0x1a>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f80c 	bl	8005700 <__swsetup_r>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d0cb      	beq.n	8005684 <__swbuf_r+0x28>
 80056ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80056f0:	e7ea      	b.n	80056c8 <__swbuf_r+0x6c>
 80056f2:	bf00      	nop
 80056f4:	080068e0 	.word	0x080068e0
 80056f8:	08006900 	.word	0x08006900
 80056fc:	080068c0 	.word	0x080068c0

08005700 <__swsetup_r>:
 8005700:	4b32      	ldr	r3, [pc, #200]	; (80057cc <__swsetup_r+0xcc>)
 8005702:	b570      	push	{r4, r5, r6, lr}
 8005704:	681d      	ldr	r5, [r3, #0]
 8005706:	4606      	mov	r6, r0
 8005708:	460c      	mov	r4, r1
 800570a:	b125      	cbz	r5, 8005716 <__swsetup_r+0x16>
 800570c:	69ab      	ldr	r3, [r5, #24]
 800570e:	b913      	cbnz	r3, 8005716 <__swsetup_r+0x16>
 8005710:	4628      	mov	r0, r5
 8005712:	f000 f99b 	bl	8005a4c <__sinit>
 8005716:	4b2e      	ldr	r3, [pc, #184]	; (80057d0 <__swsetup_r+0xd0>)
 8005718:	429c      	cmp	r4, r3
 800571a:	d10f      	bne.n	800573c <__swsetup_r+0x3c>
 800571c:	686c      	ldr	r4, [r5, #4]
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005724:	0719      	lsls	r1, r3, #28
 8005726:	d42c      	bmi.n	8005782 <__swsetup_r+0x82>
 8005728:	06dd      	lsls	r5, r3, #27
 800572a:	d411      	bmi.n	8005750 <__swsetup_r+0x50>
 800572c:	2309      	movs	r3, #9
 800572e:	6033      	str	r3, [r6, #0]
 8005730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800573a:	e03e      	b.n	80057ba <__swsetup_r+0xba>
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <__swsetup_r+0xd4>)
 800573e:	429c      	cmp	r4, r3
 8005740:	d101      	bne.n	8005746 <__swsetup_r+0x46>
 8005742:	68ac      	ldr	r4, [r5, #8]
 8005744:	e7eb      	b.n	800571e <__swsetup_r+0x1e>
 8005746:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <__swsetup_r+0xd8>)
 8005748:	429c      	cmp	r4, r3
 800574a:	bf08      	it	eq
 800574c:	68ec      	ldreq	r4, [r5, #12]
 800574e:	e7e6      	b.n	800571e <__swsetup_r+0x1e>
 8005750:	0758      	lsls	r0, r3, #29
 8005752:	d512      	bpl.n	800577a <__swsetup_r+0x7a>
 8005754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005756:	b141      	cbz	r1, 800576a <__swsetup_r+0x6a>
 8005758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800575c:	4299      	cmp	r1, r3
 800575e:	d002      	beq.n	8005766 <__swsetup_r+0x66>
 8005760:	4630      	mov	r0, r6
 8005762:	f000 fa93 	bl	8005c8c <_free_r>
 8005766:	2300      	movs	r3, #0
 8005768:	6363      	str	r3, [r4, #52]	; 0x34
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	2300      	movs	r3, #0
 8005774:	6063      	str	r3, [r4, #4]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	f043 0308 	orr.w	r3, r3, #8
 8005780:	81a3      	strh	r3, [r4, #12]
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	b94b      	cbnz	r3, 800579a <__swsetup_r+0x9a>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800578c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005790:	d003      	beq.n	800579a <__swsetup_r+0x9a>
 8005792:	4621      	mov	r1, r4
 8005794:	4630      	mov	r0, r6
 8005796:	f000 fa31 	bl	8005bfc <__smakebuf_r>
 800579a:	89a0      	ldrh	r0, [r4, #12]
 800579c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057a0:	f010 0301 	ands.w	r3, r0, #1
 80057a4:	d00a      	beq.n	80057bc <__swsetup_r+0xbc>
 80057a6:	2300      	movs	r3, #0
 80057a8:	60a3      	str	r3, [r4, #8]
 80057aa:	6963      	ldr	r3, [r4, #20]
 80057ac:	425b      	negs	r3, r3
 80057ae:	61a3      	str	r3, [r4, #24]
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	b943      	cbnz	r3, 80057c6 <__swsetup_r+0xc6>
 80057b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057b8:	d1ba      	bne.n	8005730 <__swsetup_r+0x30>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	0781      	lsls	r1, r0, #30
 80057be:	bf58      	it	pl
 80057c0:	6963      	ldrpl	r3, [r4, #20]
 80057c2:	60a3      	str	r3, [r4, #8]
 80057c4:	e7f4      	b.n	80057b0 <__swsetup_r+0xb0>
 80057c6:	2000      	movs	r0, #0
 80057c8:	e7f7      	b.n	80057ba <__swsetup_r+0xba>
 80057ca:	bf00      	nop
 80057cc:	20000024 	.word	0x20000024
 80057d0:	080068e0 	.word	0x080068e0
 80057d4:	08006900 	.word	0x08006900
 80057d8:	080068c0 	.word	0x080068c0

080057dc <__assert_func>:
 80057dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057de:	4614      	mov	r4, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b09      	ldr	r3, [pc, #36]	; (8005808 <__assert_func+0x2c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4605      	mov	r5, r0
 80057e8:	68d8      	ldr	r0, [r3, #12]
 80057ea:	b14c      	cbz	r4, 8005800 <__assert_func+0x24>
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <__assert_func+0x30>)
 80057ee:	9100      	str	r1, [sp, #0]
 80057f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057f4:	4906      	ldr	r1, [pc, #24]	; (8005810 <__assert_func+0x34>)
 80057f6:	462b      	mov	r3, r5
 80057f8:	f000 f9a6 	bl	8005b48 <fiprintf>
 80057fc:	f000 fe7a 	bl	80064f4 <abort>
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <__assert_func+0x38>)
 8005802:	461c      	mov	r4, r3
 8005804:	e7f3      	b.n	80057ee <__assert_func+0x12>
 8005806:	bf00      	nop
 8005808:	20000024 	.word	0x20000024
 800580c:	08006882 	.word	0x08006882
 8005810:	0800688f 	.word	0x0800688f
 8005814:	080068bd 	.word	0x080068bd

08005818 <__sflush_r>:
 8005818:	898a      	ldrh	r2, [r1, #12]
 800581a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581e:	4605      	mov	r5, r0
 8005820:	0710      	lsls	r0, r2, #28
 8005822:	460c      	mov	r4, r1
 8005824:	d458      	bmi.n	80058d8 <__sflush_r+0xc0>
 8005826:	684b      	ldr	r3, [r1, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	dc05      	bgt.n	8005838 <__sflush_r+0x20>
 800582c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	dc02      	bgt.n	8005838 <__sflush_r+0x20>
 8005832:	2000      	movs	r0, #0
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800583a:	2e00      	cmp	r6, #0
 800583c:	d0f9      	beq.n	8005832 <__sflush_r+0x1a>
 800583e:	2300      	movs	r3, #0
 8005840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005844:	682f      	ldr	r7, [r5, #0]
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	d032      	beq.n	80058b0 <__sflush_r+0x98>
 800584a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	075a      	lsls	r2, r3, #29
 8005850:	d505      	bpl.n	800585e <__sflush_r+0x46>
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	1ac0      	subs	r0, r0, r3
 8005856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005858:	b10b      	cbz	r3, 800585e <__sflush_r+0x46>
 800585a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800585c:	1ac0      	subs	r0, r0, r3
 800585e:	2300      	movs	r3, #0
 8005860:	4602      	mov	r2, r0
 8005862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005864:	6a21      	ldr	r1, [r4, #32]
 8005866:	4628      	mov	r0, r5
 8005868:	47b0      	blx	r6
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	d106      	bne.n	800587e <__sflush_r+0x66>
 8005870:	6829      	ldr	r1, [r5, #0]
 8005872:	291d      	cmp	r1, #29
 8005874:	d82c      	bhi.n	80058d0 <__sflush_r+0xb8>
 8005876:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <__sflush_r+0x108>)
 8005878:	40ca      	lsrs	r2, r1
 800587a:	07d6      	lsls	r6, r2, #31
 800587c:	d528      	bpl.n	80058d0 <__sflush_r+0xb8>
 800587e:	2200      	movs	r2, #0
 8005880:	6062      	str	r2, [r4, #4]
 8005882:	04d9      	lsls	r1, r3, #19
 8005884:	6922      	ldr	r2, [r4, #16]
 8005886:	6022      	str	r2, [r4, #0]
 8005888:	d504      	bpl.n	8005894 <__sflush_r+0x7c>
 800588a:	1c42      	adds	r2, r0, #1
 800588c:	d101      	bne.n	8005892 <__sflush_r+0x7a>
 800588e:	682b      	ldr	r3, [r5, #0]
 8005890:	b903      	cbnz	r3, 8005894 <__sflush_r+0x7c>
 8005892:	6560      	str	r0, [r4, #84]	; 0x54
 8005894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005896:	602f      	str	r7, [r5, #0]
 8005898:	2900      	cmp	r1, #0
 800589a:	d0ca      	beq.n	8005832 <__sflush_r+0x1a>
 800589c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058a0:	4299      	cmp	r1, r3
 80058a2:	d002      	beq.n	80058aa <__sflush_r+0x92>
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 f9f1 	bl	8005c8c <_free_r>
 80058aa:	2000      	movs	r0, #0
 80058ac:	6360      	str	r0, [r4, #52]	; 0x34
 80058ae:	e7c1      	b.n	8005834 <__sflush_r+0x1c>
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	2301      	movs	r3, #1
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	1c41      	adds	r1, r0, #1
 80058ba:	d1c7      	bne.n	800584c <__sflush_r+0x34>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0c4      	beq.n	800584c <__sflush_r+0x34>
 80058c2:	2b1d      	cmp	r3, #29
 80058c4:	d001      	beq.n	80058ca <__sflush_r+0xb2>
 80058c6:	2b16      	cmp	r3, #22
 80058c8:	d101      	bne.n	80058ce <__sflush_r+0xb6>
 80058ca:	602f      	str	r7, [r5, #0]
 80058cc:	e7b1      	b.n	8005832 <__sflush_r+0x1a>
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	e7ad      	b.n	8005834 <__sflush_r+0x1c>
 80058d8:	690f      	ldr	r7, [r1, #16]
 80058da:	2f00      	cmp	r7, #0
 80058dc:	d0a9      	beq.n	8005832 <__sflush_r+0x1a>
 80058de:	0793      	lsls	r3, r2, #30
 80058e0:	680e      	ldr	r6, [r1, #0]
 80058e2:	bf08      	it	eq
 80058e4:	694b      	ldreq	r3, [r1, #20]
 80058e6:	600f      	str	r7, [r1, #0]
 80058e8:	bf18      	it	ne
 80058ea:	2300      	movne	r3, #0
 80058ec:	eba6 0807 	sub.w	r8, r6, r7
 80058f0:	608b      	str	r3, [r1, #8]
 80058f2:	f1b8 0f00 	cmp.w	r8, #0
 80058f6:	dd9c      	ble.n	8005832 <__sflush_r+0x1a>
 80058f8:	6a21      	ldr	r1, [r4, #32]
 80058fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058fc:	4643      	mov	r3, r8
 80058fe:	463a      	mov	r2, r7
 8005900:	4628      	mov	r0, r5
 8005902:	47b0      	blx	r6
 8005904:	2800      	cmp	r0, #0
 8005906:	dc06      	bgt.n	8005916 <__sflush_r+0xfe>
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005914:	e78e      	b.n	8005834 <__sflush_r+0x1c>
 8005916:	4407      	add	r7, r0
 8005918:	eba8 0800 	sub.w	r8, r8, r0
 800591c:	e7e9      	b.n	80058f2 <__sflush_r+0xda>
 800591e:	bf00      	nop
 8005920:	20400001 	.word	0x20400001

08005924 <_fflush_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	690b      	ldr	r3, [r1, #16]
 8005928:	4605      	mov	r5, r0
 800592a:	460c      	mov	r4, r1
 800592c:	b913      	cbnz	r3, 8005934 <_fflush_r+0x10>
 800592e:	2500      	movs	r5, #0
 8005930:	4628      	mov	r0, r5
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	b118      	cbz	r0, 800593e <_fflush_r+0x1a>
 8005936:	6983      	ldr	r3, [r0, #24]
 8005938:	b90b      	cbnz	r3, 800593e <_fflush_r+0x1a>
 800593a:	f000 f887 	bl	8005a4c <__sinit>
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <_fflush_r+0x6c>)
 8005940:	429c      	cmp	r4, r3
 8005942:	d11b      	bne.n	800597c <_fflush_r+0x58>
 8005944:	686c      	ldr	r4, [r5, #4]
 8005946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0ef      	beq.n	800592e <_fflush_r+0xa>
 800594e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005950:	07d0      	lsls	r0, r2, #31
 8005952:	d404      	bmi.n	800595e <_fflush_r+0x3a>
 8005954:	0599      	lsls	r1, r3, #22
 8005956:	d402      	bmi.n	800595e <_fflush_r+0x3a>
 8005958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595a:	f000 f927 	bl	8005bac <__retarget_lock_acquire_recursive>
 800595e:	4628      	mov	r0, r5
 8005960:	4621      	mov	r1, r4
 8005962:	f7ff ff59 	bl	8005818 <__sflush_r>
 8005966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005968:	07da      	lsls	r2, r3, #31
 800596a:	4605      	mov	r5, r0
 800596c:	d4e0      	bmi.n	8005930 <_fflush_r+0xc>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	059b      	lsls	r3, r3, #22
 8005972:	d4dd      	bmi.n	8005930 <_fflush_r+0xc>
 8005974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005976:	f000 f91a 	bl	8005bae <__retarget_lock_release_recursive>
 800597a:	e7d9      	b.n	8005930 <_fflush_r+0xc>
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <_fflush_r+0x70>)
 800597e:	429c      	cmp	r4, r3
 8005980:	d101      	bne.n	8005986 <_fflush_r+0x62>
 8005982:	68ac      	ldr	r4, [r5, #8]
 8005984:	e7df      	b.n	8005946 <_fflush_r+0x22>
 8005986:	4b04      	ldr	r3, [pc, #16]	; (8005998 <_fflush_r+0x74>)
 8005988:	429c      	cmp	r4, r3
 800598a:	bf08      	it	eq
 800598c:	68ec      	ldreq	r4, [r5, #12]
 800598e:	e7da      	b.n	8005946 <_fflush_r+0x22>
 8005990:	080068e0 	.word	0x080068e0
 8005994:	08006900 	.word	0x08006900
 8005998:	080068c0 	.word	0x080068c0

0800599c <std>:
 800599c:	2300      	movs	r3, #0
 800599e:	b510      	push	{r4, lr}
 80059a0:	4604      	mov	r4, r0
 80059a2:	e9c0 3300 	strd	r3, r3, [r0]
 80059a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059aa:	6083      	str	r3, [r0, #8]
 80059ac:	8181      	strh	r1, [r0, #12]
 80059ae:	6643      	str	r3, [r0, #100]	; 0x64
 80059b0:	81c2      	strh	r2, [r0, #14]
 80059b2:	6183      	str	r3, [r0, #24]
 80059b4:	4619      	mov	r1, r3
 80059b6:	2208      	movs	r2, #8
 80059b8:	305c      	adds	r0, #92	; 0x5c
 80059ba:	f7ff fd7b 	bl	80054b4 <memset>
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <std+0x38>)
 80059c0:	6263      	str	r3, [r4, #36]	; 0x24
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <std+0x3c>)
 80059c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <std+0x40>)
 80059c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <std+0x44>)
 80059cc:	6224      	str	r4, [r4, #32]
 80059ce:	6323      	str	r3, [r4, #48]	; 0x30
 80059d0:	bd10      	pop	{r4, pc}
 80059d2:	bf00      	nop
 80059d4:	08006449 	.word	0x08006449
 80059d8:	0800646b 	.word	0x0800646b
 80059dc:	080064a3 	.word	0x080064a3
 80059e0:	080064c7 	.word	0x080064c7

080059e4 <_cleanup_r>:
 80059e4:	4901      	ldr	r1, [pc, #4]	; (80059ec <_cleanup_r+0x8>)
 80059e6:	f000 b8c1 	b.w	8005b6c <_fwalk_reent>
 80059ea:	bf00      	nop
 80059ec:	08005925 	.word	0x08005925

080059f0 <__sfmoreglue>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	2268      	movs	r2, #104	; 0x68
 80059f4:	1e4d      	subs	r5, r1, #1
 80059f6:	4355      	muls	r5, r2
 80059f8:	460e      	mov	r6, r1
 80059fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059fe:	f000 f9b1 	bl	8005d64 <_malloc_r>
 8005a02:	4604      	mov	r4, r0
 8005a04:	b140      	cbz	r0, 8005a18 <__sfmoreglue+0x28>
 8005a06:	2100      	movs	r1, #0
 8005a08:	e9c0 1600 	strd	r1, r6, [r0]
 8005a0c:	300c      	adds	r0, #12
 8005a0e:	60a0      	str	r0, [r4, #8]
 8005a10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a14:	f7ff fd4e 	bl	80054b4 <memset>
 8005a18:	4620      	mov	r0, r4
 8005a1a:	bd70      	pop	{r4, r5, r6, pc}

08005a1c <__sfp_lock_acquire>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	; (8005a24 <__sfp_lock_acquire+0x8>)
 8005a1e:	f000 b8c5 	b.w	8005bac <__retarget_lock_acquire_recursive>
 8005a22:	bf00      	nop
 8005a24:	200002dd 	.word	0x200002dd

08005a28 <__sfp_lock_release>:
 8005a28:	4801      	ldr	r0, [pc, #4]	; (8005a30 <__sfp_lock_release+0x8>)
 8005a2a:	f000 b8c0 	b.w	8005bae <__retarget_lock_release_recursive>
 8005a2e:	bf00      	nop
 8005a30:	200002dd 	.word	0x200002dd

08005a34 <__sinit_lock_acquire>:
 8005a34:	4801      	ldr	r0, [pc, #4]	; (8005a3c <__sinit_lock_acquire+0x8>)
 8005a36:	f000 b8b9 	b.w	8005bac <__retarget_lock_acquire_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	200002de 	.word	0x200002de

08005a40 <__sinit_lock_release>:
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <__sinit_lock_release+0x8>)
 8005a42:	f000 b8b4 	b.w	8005bae <__retarget_lock_release_recursive>
 8005a46:	bf00      	nop
 8005a48:	200002de 	.word	0x200002de

08005a4c <__sinit>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4604      	mov	r4, r0
 8005a50:	f7ff fff0 	bl	8005a34 <__sinit_lock_acquire>
 8005a54:	69a3      	ldr	r3, [r4, #24]
 8005a56:	b11b      	cbz	r3, 8005a60 <__sinit+0x14>
 8005a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a5c:	f7ff bff0 	b.w	8005a40 <__sinit_lock_release>
 8005a60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a64:	6523      	str	r3, [r4, #80]	; 0x50
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <__sinit+0x68>)
 8005a68:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <__sinit+0x6c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a6e:	42a3      	cmp	r3, r4
 8005a70:	bf04      	itt	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	61a3      	streq	r3, [r4, #24]
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f820 	bl	8005abc <__sfp>
 8005a7c:	6060      	str	r0, [r4, #4]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 f81c 	bl	8005abc <__sfp>
 8005a84:	60a0      	str	r0, [r4, #8]
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 f818 	bl	8005abc <__sfp>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	60e0      	str	r0, [r4, #12]
 8005a90:	2104      	movs	r1, #4
 8005a92:	6860      	ldr	r0, [r4, #4]
 8005a94:	f7ff ff82 	bl	800599c <std>
 8005a98:	68a0      	ldr	r0, [r4, #8]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	2109      	movs	r1, #9
 8005a9e:	f7ff ff7d 	bl	800599c <std>
 8005aa2:	68e0      	ldr	r0, [r4, #12]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	2112      	movs	r1, #18
 8005aa8:	f7ff ff78 	bl	800599c <std>
 8005aac:	2301      	movs	r3, #1
 8005aae:	61a3      	str	r3, [r4, #24]
 8005ab0:	e7d2      	b.n	8005a58 <__sinit+0xc>
 8005ab2:	bf00      	nop
 8005ab4:	0800680c 	.word	0x0800680c
 8005ab8:	080059e5 	.word	0x080059e5

08005abc <__sfp>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	4607      	mov	r7, r0
 8005ac0:	f7ff ffac 	bl	8005a1c <__sfp_lock_acquire>
 8005ac4:	4b1e      	ldr	r3, [pc, #120]	; (8005b40 <__sfp+0x84>)
 8005ac6:	681e      	ldr	r6, [r3, #0]
 8005ac8:	69b3      	ldr	r3, [r6, #24]
 8005aca:	b913      	cbnz	r3, 8005ad2 <__sfp+0x16>
 8005acc:	4630      	mov	r0, r6
 8005ace:	f7ff ffbd 	bl	8005a4c <__sinit>
 8005ad2:	3648      	adds	r6, #72	; 0x48
 8005ad4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	d503      	bpl.n	8005ae4 <__sfp+0x28>
 8005adc:	6833      	ldr	r3, [r6, #0]
 8005ade:	b30b      	cbz	r3, 8005b24 <__sfp+0x68>
 8005ae0:	6836      	ldr	r6, [r6, #0]
 8005ae2:	e7f7      	b.n	8005ad4 <__sfp+0x18>
 8005ae4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ae8:	b9d5      	cbnz	r5, 8005b20 <__sfp+0x64>
 8005aea:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <__sfp+0x88>)
 8005aec:	60e3      	str	r3, [r4, #12]
 8005aee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005af2:	6665      	str	r5, [r4, #100]	; 0x64
 8005af4:	f000 f859 	bl	8005baa <__retarget_lock_init_recursive>
 8005af8:	f7ff ff96 	bl	8005a28 <__sfp_lock_release>
 8005afc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b04:	6025      	str	r5, [r4, #0]
 8005b06:	61a5      	str	r5, [r4, #24]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b10:	f7ff fcd0 	bl	80054b4 <memset>
 8005b14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b20:	3468      	adds	r4, #104	; 0x68
 8005b22:	e7d9      	b.n	8005ad8 <__sfp+0x1c>
 8005b24:	2104      	movs	r1, #4
 8005b26:	4638      	mov	r0, r7
 8005b28:	f7ff ff62 	bl	80059f0 <__sfmoreglue>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	6030      	str	r0, [r6, #0]
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d1d5      	bne.n	8005ae0 <__sfp+0x24>
 8005b34:	f7ff ff78 	bl	8005a28 <__sfp_lock_release>
 8005b38:	230c      	movs	r3, #12
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	e7ee      	b.n	8005b1c <__sfp+0x60>
 8005b3e:	bf00      	nop
 8005b40:	0800680c 	.word	0x0800680c
 8005b44:	ffff0001 	.word	0xffff0001

08005b48 <fiprintf>:
 8005b48:	b40e      	push	{r1, r2, r3}
 8005b4a:	b503      	push	{r0, r1, lr}
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	ab03      	add	r3, sp, #12
 8005b50:	4805      	ldr	r0, [pc, #20]	; (8005b68 <fiprintf+0x20>)
 8005b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b56:	6800      	ldr	r0, [r0, #0]
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	f000 f9a1 	bl	8005ea0 <_vfiprintf_r>
 8005b5e:	b002      	add	sp, #8
 8005b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b64:	b003      	add	sp, #12
 8005b66:	4770      	bx	lr
 8005b68:	20000024 	.word	0x20000024

08005b6c <_fwalk_reent>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	4606      	mov	r6, r0
 8005b72:	4688      	mov	r8, r1
 8005b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b78:	2700      	movs	r7, #0
 8005b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8005b82:	d505      	bpl.n	8005b90 <_fwalk_reent+0x24>
 8005b84:	6824      	ldr	r4, [r4, #0]
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	d1f7      	bne.n	8005b7a <_fwalk_reent+0xe>
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b90:	89ab      	ldrh	r3, [r5, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d907      	bls.n	8005ba6 <_fwalk_reent+0x3a>
 8005b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	d003      	beq.n	8005ba6 <_fwalk_reent+0x3a>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	47c0      	blx	r8
 8005ba4:	4307      	orrs	r7, r0
 8005ba6:	3568      	adds	r5, #104	; 0x68
 8005ba8:	e7e9      	b.n	8005b7e <_fwalk_reent+0x12>

08005baa <__retarget_lock_init_recursive>:
 8005baa:	4770      	bx	lr

08005bac <__retarget_lock_acquire_recursive>:
 8005bac:	4770      	bx	lr

08005bae <__retarget_lock_release_recursive>:
 8005bae:	4770      	bx	lr

08005bb0 <__swhatbuf_r>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	460e      	mov	r6, r1
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	b096      	sub	sp, #88	; 0x58
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	461d      	mov	r5, r3
 8005bc0:	da08      	bge.n	8005bd4 <__swhatbuf_r+0x24>
 8005bc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	602a      	str	r2, [r5, #0]
 8005bca:	061a      	lsls	r2, r3, #24
 8005bcc:	d410      	bmi.n	8005bf0 <__swhatbuf_r+0x40>
 8005bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd2:	e00e      	b.n	8005bf2 <__swhatbuf_r+0x42>
 8005bd4:	466a      	mov	r2, sp
 8005bd6:	f000 fca5 	bl	8006524 <_fstat_r>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	dbf1      	blt.n	8005bc2 <__swhatbuf_r+0x12>
 8005bde:	9a01      	ldr	r2, [sp, #4]
 8005be0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005be4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005be8:	425a      	negs	r2, r3
 8005bea:	415a      	adcs	r2, r3
 8005bec:	602a      	str	r2, [r5, #0]
 8005bee:	e7ee      	b.n	8005bce <__swhatbuf_r+0x1e>
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	b016      	add	sp, #88	; 0x58
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bfc <__smakebuf_r>:
 8005bfc:	898b      	ldrh	r3, [r1, #12]
 8005bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c00:	079d      	lsls	r5, r3, #30
 8005c02:	4606      	mov	r6, r0
 8005c04:	460c      	mov	r4, r1
 8005c06:	d507      	bpl.n	8005c18 <__smakebuf_r+0x1c>
 8005c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	6123      	str	r3, [r4, #16]
 8005c10:	2301      	movs	r3, #1
 8005c12:	6163      	str	r3, [r4, #20]
 8005c14:	b002      	add	sp, #8
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	ab01      	add	r3, sp, #4
 8005c1a:	466a      	mov	r2, sp
 8005c1c:	f7ff ffc8 	bl	8005bb0 <__swhatbuf_r>
 8005c20:	9900      	ldr	r1, [sp, #0]
 8005c22:	4605      	mov	r5, r0
 8005c24:	4630      	mov	r0, r6
 8005c26:	f000 f89d 	bl	8005d64 <_malloc_r>
 8005c2a:	b948      	cbnz	r0, 8005c40 <__smakebuf_r+0x44>
 8005c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c30:	059a      	lsls	r2, r3, #22
 8005c32:	d4ef      	bmi.n	8005c14 <__smakebuf_r+0x18>
 8005c34:	f023 0303 	bic.w	r3, r3, #3
 8005c38:	f043 0302 	orr.w	r3, r3, #2
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	e7e3      	b.n	8005c08 <__smakebuf_r+0xc>
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <__smakebuf_r+0x7c>)
 8005c42:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	6020      	str	r0, [r4, #0]
 8005c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	9b00      	ldr	r3, [sp, #0]
 8005c50:	6163      	str	r3, [r4, #20]
 8005c52:	9b01      	ldr	r3, [sp, #4]
 8005c54:	6120      	str	r0, [r4, #16]
 8005c56:	b15b      	cbz	r3, 8005c70 <__smakebuf_r+0x74>
 8005c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 fc73 	bl	8006548 <_isatty_r>
 8005c62:	b128      	cbz	r0, 8005c70 <__smakebuf_r+0x74>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	89a0      	ldrh	r0, [r4, #12]
 8005c72:	4305      	orrs	r5, r0
 8005c74:	81a5      	strh	r5, [r4, #12]
 8005c76:	e7cd      	b.n	8005c14 <__smakebuf_r+0x18>
 8005c78:	080059e5 	.word	0x080059e5

08005c7c <malloc>:
 8005c7c:	4b02      	ldr	r3, [pc, #8]	; (8005c88 <malloc+0xc>)
 8005c7e:	4601      	mov	r1, r0
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	f000 b86f 	b.w	8005d64 <_malloc_r>
 8005c86:	bf00      	nop
 8005c88:	20000024 	.word	0x20000024

08005c8c <_free_r>:
 8005c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	d044      	beq.n	8005d1c <_free_r+0x90>
 8005c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c96:	9001      	str	r0, [sp, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c9e:	bfb8      	it	lt
 8005ca0:	18e4      	addlt	r4, r4, r3
 8005ca2:	f000 fc73 	bl	800658c <__malloc_lock>
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <_free_r+0x94>)
 8005ca8:	9801      	ldr	r0, [sp, #4]
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	b933      	cbnz	r3, 8005cbc <_free_r+0x30>
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	6014      	str	r4, [r2, #0]
 8005cb2:	b003      	add	sp, #12
 8005cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cb8:	f000 bc6e 	b.w	8006598 <__malloc_unlock>
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	d908      	bls.n	8005cd2 <_free_r+0x46>
 8005cc0:	6825      	ldr	r5, [r4, #0]
 8005cc2:	1961      	adds	r1, r4, r5
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	bf01      	itttt	eq
 8005cc8:	6819      	ldreq	r1, [r3, #0]
 8005cca:	685b      	ldreq	r3, [r3, #4]
 8005ccc:	1949      	addeq	r1, r1, r5
 8005cce:	6021      	streq	r1, [r4, #0]
 8005cd0:	e7ed      	b.n	8005cae <_free_r+0x22>
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b10b      	cbz	r3, 8005cdc <_free_r+0x50>
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d9fa      	bls.n	8005cd2 <_free_r+0x46>
 8005cdc:	6811      	ldr	r1, [r2, #0]
 8005cde:	1855      	adds	r5, r2, r1
 8005ce0:	42a5      	cmp	r5, r4
 8005ce2:	d10b      	bne.n	8005cfc <_free_r+0x70>
 8005ce4:	6824      	ldr	r4, [r4, #0]
 8005ce6:	4421      	add	r1, r4
 8005ce8:	1854      	adds	r4, r2, r1
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	d1e0      	bne.n	8005cb2 <_free_r+0x26>
 8005cf0:	681c      	ldr	r4, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	6053      	str	r3, [r2, #4]
 8005cf6:	4421      	add	r1, r4
 8005cf8:	6011      	str	r1, [r2, #0]
 8005cfa:	e7da      	b.n	8005cb2 <_free_r+0x26>
 8005cfc:	d902      	bls.n	8005d04 <_free_r+0x78>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	6003      	str	r3, [r0, #0]
 8005d02:	e7d6      	b.n	8005cb2 <_free_r+0x26>
 8005d04:	6825      	ldr	r5, [r4, #0]
 8005d06:	1961      	adds	r1, r4, r5
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	bf04      	itt	eq
 8005d0c:	6819      	ldreq	r1, [r3, #0]
 8005d0e:	685b      	ldreq	r3, [r3, #4]
 8005d10:	6063      	str	r3, [r4, #4]
 8005d12:	bf04      	itt	eq
 8005d14:	1949      	addeq	r1, r1, r5
 8005d16:	6021      	streq	r1, [r4, #0]
 8005d18:	6054      	str	r4, [r2, #4]
 8005d1a:	e7ca      	b.n	8005cb2 <_free_r+0x26>
 8005d1c:	b003      	add	sp, #12
 8005d1e:	bd30      	pop	{r4, r5, pc}
 8005d20:	200002e0 	.word	0x200002e0

08005d24 <sbrk_aligned>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4e0e      	ldr	r6, [pc, #56]	; (8005d60 <sbrk_aligned+0x3c>)
 8005d28:	460c      	mov	r4, r1
 8005d2a:	6831      	ldr	r1, [r6, #0]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	b911      	cbnz	r1, 8005d36 <sbrk_aligned+0x12>
 8005d30:	f000 fb7a 	bl	8006428 <_sbrk_r>
 8005d34:	6030      	str	r0, [r6, #0]
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 fb75 	bl	8006428 <_sbrk_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d00a      	beq.n	8005d58 <sbrk_aligned+0x34>
 8005d42:	1cc4      	adds	r4, r0, #3
 8005d44:	f024 0403 	bic.w	r4, r4, #3
 8005d48:	42a0      	cmp	r0, r4
 8005d4a:	d007      	beq.n	8005d5c <sbrk_aligned+0x38>
 8005d4c:	1a21      	subs	r1, r4, r0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 fb6a 	bl	8006428 <_sbrk_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d101      	bne.n	8005d5c <sbrk_aligned+0x38>
 8005d58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	200002e4 	.word	0x200002e4

08005d64 <_malloc_r>:
 8005d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d68:	1ccd      	adds	r5, r1, #3
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	4607      	mov	r7, r0
 8005d7a:	db01      	blt.n	8005d80 <_malloc_r+0x1c>
 8005d7c:	42a9      	cmp	r1, r5
 8005d7e:	d905      	bls.n	8005d8c <_malloc_r+0x28>
 8005d80:	230c      	movs	r3, #12
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	2600      	movs	r6, #0
 8005d86:	4630      	mov	r0, r6
 8005d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d8c:	4e2e      	ldr	r6, [pc, #184]	; (8005e48 <_malloc_r+0xe4>)
 8005d8e:	f000 fbfd 	bl	800658c <__malloc_lock>
 8005d92:	6833      	ldr	r3, [r6, #0]
 8005d94:	461c      	mov	r4, r3
 8005d96:	bb34      	cbnz	r4, 8005de6 <_malloc_r+0x82>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	f7ff ffc2 	bl	8005d24 <sbrk_aligned>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	4604      	mov	r4, r0
 8005da4:	d14d      	bne.n	8005e42 <_malloc_r+0xde>
 8005da6:	6834      	ldr	r4, [r6, #0]
 8005da8:	4626      	mov	r6, r4
 8005daa:	2e00      	cmp	r6, #0
 8005dac:	d140      	bne.n	8005e30 <_malloc_r+0xcc>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	4631      	mov	r1, r6
 8005db2:	4638      	mov	r0, r7
 8005db4:	eb04 0803 	add.w	r8, r4, r3
 8005db8:	f000 fb36 	bl	8006428 <_sbrk_r>
 8005dbc:	4580      	cmp	r8, r0
 8005dbe:	d13a      	bne.n	8005e36 <_malloc_r+0xd2>
 8005dc0:	6821      	ldr	r1, [r4, #0]
 8005dc2:	3503      	adds	r5, #3
 8005dc4:	1a6d      	subs	r5, r5, r1
 8005dc6:	f025 0503 	bic.w	r5, r5, #3
 8005dca:	3508      	adds	r5, #8
 8005dcc:	2d0c      	cmp	r5, #12
 8005dce:	bf38      	it	cc
 8005dd0:	250c      	movcc	r5, #12
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f7ff ffa5 	bl	8005d24 <sbrk_aligned>
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d02b      	beq.n	8005e36 <_malloc_r+0xd2>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	442b      	add	r3, r5
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	e00e      	b.n	8005e04 <_malloc_r+0xa0>
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	1b52      	subs	r2, r2, r5
 8005dea:	d41e      	bmi.n	8005e2a <_malloc_r+0xc6>
 8005dec:	2a0b      	cmp	r2, #11
 8005dee:	d916      	bls.n	8005e1e <_malloc_r+0xba>
 8005df0:	1961      	adds	r1, r4, r5
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	6025      	str	r5, [r4, #0]
 8005df6:	bf18      	it	ne
 8005df8:	6059      	strne	r1, [r3, #4]
 8005dfa:	6863      	ldr	r3, [r4, #4]
 8005dfc:	bf08      	it	eq
 8005dfe:	6031      	streq	r1, [r6, #0]
 8005e00:	5162      	str	r2, [r4, r5]
 8005e02:	604b      	str	r3, [r1, #4]
 8005e04:	4638      	mov	r0, r7
 8005e06:	f104 060b 	add.w	r6, r4, #11
 8005e0a:	f000 fbc5 	bl	8006598 <__malloc_unlock>
 8005e0e:	f026 0607 	bic.w	r6, r6, #7
 8005e12:	1d23      	adds	r3, r4, #4
 8005e14:	1af2      	subs	r2, r6, r3
 8005e16:	d0b6      	beq.n	8005d86 <_malloc_r+0x22>
 8005e18:	1b9b      	subs	r3, r3, r6
 8005e1a:	50a3      	str	r3, [r4, r2]
 8005e1c:	e7b3      	b.n	8005d86 <_malloc_r+0x22>
 8005e1e:	6862      	ldr	r2, [r4, #4]
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	bf0c      	ite	eq
 8005e24:	6032      	streq	r2, [r6, #0]
 8005e26:	605a      	strne	r2, [r3, #4]
 8005e28:	e7ec      	b.n	8005e04 <_malloc_r+0xa0>
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	6864      	ldr	r4, [r4, #4]
 8005e2e:	e7b2      	b.n	8005d96 <_malloc_r+0x32>
 8005e30:	4634      	mov	r4, r6
 8005e32:	6876      	ldr	r6, [r6, #4]
 8005e34:	e7b9      	b.n	8005daa <_malloc_r+0x46>
 8005e36:	230c      	movs	r3, #12
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f000 fbac 	bl	8006598 <__malloc_unlock>
 8005e40:	e7a1      	b.n	8005d86 <_malloc_r+0x22>
 8005e42:	6025      	str	r5, [r4, #0]
 8005e44:	e7de      	b.n	8005e04 <_malloc_r+0xa0>
 8005e46:	bf00      	nop
 8005e48:	200002e0 	.word	0x200002e0

08005e4c <__sfputc_r>:
 8005e4c:	6893      	ldr	r3, [r2, #8]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	b410      	push	{r4}
 8005e54:	6093      	str	r3, [r2, #8]
 8005e56:	da08      	bge.n	8005e6a <__sfputc_r+0x1e>
 8005e58:	6994      	ldr	r4, [r2, #24]
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	db01      	blt.n	8005e62 <__sfputc_r+0x16>
 8005e5e:	290a      	cmp	r1, #10
 8005e60:	d103      	bne.n	8005e6a <__sfputc_r+0x1e>
 8005e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e66:	f7ff bbf9 	b.w	800565c <__swbuf_r>
 8005e6a:	6813      	ldr	r3, [r2, #0]
 8005e6c:	1c58      	adds	r0, r3, #1
 8005e6e:	6010      	str	r0, [r2, #0]
 8005e70:	7019      	strb	r1, [r3, #0]
 8005e72:	4608      	mov	r0, r1
 8005e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <__sfputs_r>:
 8005e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	460f      	mov	r7, r1
 8005e80:	4614      	mov	r4, r2
 8005e82:	18d5      	adds	r5, r2, r3
 8005e84:	42ac      	cmp	r4, r5
 8005e86:	d101      	bne.n	8005e8c <__sfputs_r+0x12>
 8005e88:	2000      	movs	r0, #0
 8005e8a:	e007      	b.n	8005e9c <__sfputs_r+0x22>
 8005e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e90:	463a      	mov	r2, r7
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff ffda 	bl	8005e4c <__sfputc_r>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d1f3      	bne.n	8005e84 <__sfputs_r+0xa>
 8005e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea0 <_vfiprintf_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	460d      	mov	r5, r1
 8005ea6:	b09d      	sub	sp, #116	; 0x74
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	4698      	mov	r8, r3
 8005eac:	4606      	mov	r6, r0
 8005eae:	b118      	cbz	r0, 8005eb8 <_vfiprintf_r+0x18>
 8005eb0:	6983      	ldr	r3, [r0, #24]
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <_vfiprintf_r+0x18>
 8005eb4:	f7ff fdca 	bl	8005a4c <__sinit>
 8005eb8:	4b89      	ldr	r3, [pc, #548]	; (80060e0 <_vfiprintf_r+0x240>)
 8005eba:	429d      	cmp	r5, r3
 8005ebc:	d11b      	bne.n	8005ef6 <_vfiprintf_r+0x56>
 8005ebe:	6875      	ldr	r5, [r6, #4]
 8005ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_vfiprintf_r+0x32>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	059a      	lsls	r2, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_vfiprintf_r+0x32>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ece:	f7ff fe6d 	bl	8005bac <__retarget_lock_acquire_recursive>
 8005ed2:	89ab      	ldrh	r3, [r5, #12]
 8005ed4:	071b      	lsls	r3, r3, #28
 8005ed6:	d501      	bpl.n	8005edc <_vfiprintf_r+0x3c>
 8005ed8:	692b      	ldr	r3, [r5, #16]
 8005eda:	b9eb      	cbnz	r3, 8005f18 <_vfiprintf_r+0x78>
 8005edc:	4629      	mov	r1, r5
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7ff fc0e 	bl	8005700 <__swsetup_r>
 8005ee4:	b1c0      	cbz	r0, 8005f18 <_vfiprintf_r+0x78>
 8005ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ee8:	07dc      	lsls	r4, r3, #31
 8005eea:	d50e      	bpl.n	8005f0a <_vfiprintf_r+0x6a>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef0:	b01d      	add	sp, #116	; 0x74
 8005ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef6:	4b7b      	ldr	r3, [pc, #492]	; (80060e4 <_vfiprintf_r+0x244>)
 8005ef8:	429d      	cmp	r5, r3
 8005efa:	d101      	bne.n	8005f00 <_vfiprintf_r+0x60>
 8005efc:	68b5      	ldr	r5, [r6, #8]
 8005efe:	e7df      	b.n	8005ec0 <_vfiprintf_r+0x20>
 8005f00:	4b79      	ldr	r3, [pc, #484]	; (80060e8 <_vfiprintf_r+0x248>)
 8005f02:	429d      	cmp	r5, r3
 8005f04:	bf08      	it	eq
 8005f06:	68f5      	ldreq	r5, [r6, #12]
 8005f08:	e7da      	b.n	8005ec0 <_vfiprintf_r+0x20>
 8005f0a:	89ab      	ldrh	r3, [r5, #12]
 8005f0c:	0598      	lsls	r0, r3, #22
 8005f0e:	d4ed      	bmi.n	8005eec <_vfiprintf_r+0x4c>
 8005f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f12:	f7ff fe4c 	bl	8005bae <__retarget_lock_release_recursive>
 8005f16:	e7e9      	b.n	8005eec <_vfiprintf_r+0x4c>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f26:	2330      	movs	r3, #48	; 0x30
 8005f28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060ec <_vfiprintf_r+0x24c>
 8005f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f30:	f04f 0901 	mov.w	r9, #1
 8005f34:	4623      	mov	r3, r4
 8005f36:	469a      	mov	sl, r3
 8005f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f3c:	b10a      	cbz	r2, 8005f42 <_vfiprintf_r+0xa2>
 8005f3e:	2a25      	cmp	r2, #37	; 0x25
 8005f40:	d1f9      	bne.n	8005f36 <_vfiprintf_r+0x96>
 8005f42:	ebba 0b04 	subs.w	fp, sl, r4
 8005f46:	d00b      	beq.n	8005f60 <_vfiprintf_r+0xc0>
 8005f48:	465b      	mov	r3, fp
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f7ff ff93 	bl	8005e7a <__sfputs_r>
 8005f54:	3001      	adds	r0, #1
 8005f56:	f000 80aa 	beq.w	80060ae <_vfiprintf_r+0x20e>
 8005f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5c:	445a      	add	r2, fp
 8005f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f60:	f89a 3000 	ldrb.w	r3, [sl]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80a2 	beq.w	80060ae <_vfiprintf_r+0x20e>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f74:	f10a 0a01 	add.w	sl, sl, #1
 8005f78:	9304      	str	r3, [sp, #16]
 8005f7a:	9307      	str	r3, [sp, #28]
 8005f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f80:	931a      	str	r3, [sp, #104]	; 0x68
 8005f82:	4654      	mov	r4, sl
 8005f84:	2205      	movs	r2, #5
 8005f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8a:	4858      	ldr	r0, [pc, #352]	; (80060ec <_vfiprintf_r+0x24c>)
 8005f8c:	f7fa f920 	bl	80001d0 <memchr>
 8005f90:	9a04      	ldr	r2, [sp, #16]
 8005f92:	b9d8      	cbnz	r0, 8005fcc <_vfiprintf_r+0x12c>
 8005f94:	06d1      	lsls	r1, r2, #27
 8005f96:	bf44      	itt	mi
 8005f98:	2320      	movmi	r3, #32
 8005f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f9e:	0713      	lsls	r3, r2, #28
 8005fa0:	bf44      	itt	mi
 8005fa2:	232b      	movmi	r3, #43	; 0x2b
 8005fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fac:	2b2a      	cmp	r3, #42	; 0x2a
 8005fae:	d015      	beq.n	8005fdc <_vfiprintf_r+0x13c>
 8005fb0:	9a07      	ldr	r2, [sp, #28]
 8005fb2:	4654      	mov	r4, sl
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f04f 0c0a 	mov.w	ip, #10
 8005fba:	4621      	mov	r1, r4
 8005fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc0:	3b30      	subs	r3, #48	; 0x30
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d94e      	bls.n	8006064 <_vfiprintf_r+0x1c4>
 8005fc6:	b1b0      	cbz	r0, 8005ff6 <_vfiprintf_r+0x156>
 8005fc8:	9207      	str	r2, [sp, #28]
 8005fca:	e014      	b.n	8005ff6 <_vfiprintf_r+0x156>
 8005fcc:	eba0 0308 	sub.w	r3, r0, r8
 8005fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	46a2      	mov	sl, r4
 8005fda:	e7d2      	b.n	8005f82 <_vfiprintf_r+0xe2>
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	1d19      	adds	r1, r3, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	9103      	str	r1, [sp, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bfbb      	ittet	lt
 8005fe8:	425b      	neglt	r3, r3
 8005fea:	f042 0202 	orrlt.w	r2, r2, #2
 8005fee:	9307      	strge	r3, [sp, #28]
 8005ff0:	9307      	strlt	r3, [sp, #28]
 8005ff2:	bfb8      	it	lt
 8005ff4:	9204      	strlt	r2, [sp, #16]
 8005ff6:	7823      	ldrb	r3, [r4, #0]
 8005ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8005ffa:	d10c      	bne.n	8006016 <_vfiprintf_r+0x176>
 8005ffc:	7863      	ldrb	r3, [r4, #1]
 8005ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8006000:	d135      	bne.n	800606e <_vfiprintf_r+0x1ce>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	9203      	str	r2, [sp, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfb8      	it	lt
 800600e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006012:	3402      	adds	r4, #2
 8006014:	9305      	str	r3, [sp, #20]
 8006016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060fc <_vfiprintf_r+0x25c>
 800601a:	7821      	ldrb	r1, [r4, #0]
 800601c:	2203      	movs	r2, #3
 800601e:	4650      	mov	r0, sl
 8006020:	f7fa f8d6 	bl	80001d0 <memchr>
 8006024:	b140      	cbz	r0, 8006038 <_vfiprintf_r+0x198>
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	eba0 000a 	sub.w	r0, r0, sl
 800602c:	fa03 f000 	lsl.w	r0, r3, r0
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	4303      	orrs	r3, r0
 8006034:	3401      	adds	r4, #1
 8006036:	9304      	str	r3, [sp, #16]
 8006038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603c:	482c      	ldr	r0, [pc, #176]	; (80060f0 <_vfiprintf_r+0x250>)
 800603e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006042:	2206      	movs	r2, #6
 8006044:	f7fa f8c4 	bl	80001d0 <memchr>
 8006048:	2800      	cmp	r0, #0
 800604a:	d03f      	beq.n	80060cc <_vfiprintf_r+0x22c>
 800604c:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <_vfiprintf_r+0x254>)
 800604e:	bb1b      	cbnz	r3, 8006098 <_vfiprintf_r+0x1f8>
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	3307      	adds	r3, #7
 8006054:	f023 0307 	bic.w	r3, r3, #7
 8006058:	3308      	adds	r3, #8
 800605a:	9303      	str	r3, [sp, #12]
 800605c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605e:	443b      	add	r3, r7
 8006060:	9309      	str	r3, [sp, #36]	; 0x24
 8006062:	e767      	b.n	8005f34 <_vfiprintf_r+0x94>
 8006064:	fb0c 3202 	mla	r2, ip, r2, r3
 8006068:	460c      	mov	r4, r1
 800606a:	2001      	movs	r0, #1
 800606c:	e7a5      	b.n	8005fba <_vfiprintf_r+0x11a>
 800606e:	2300      	movs	r3, #0
 8006070:	3401      	adds	r4, #1
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	4619      	mov	r1, r3
 8006076:	f04f 0c0a 	mov.w	ip, #10
 800607a:	4620      	mov	r0, r4
 800607c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006080:	3a30      	subs	r2, #48	; 0x30
 8006082:	2a09      	cmp	r2, #9
 8006084:	d903      	bls.n	800608e <_vfiprintf_r+0x1ee>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0c5      	beq.n	8006016 <_vfiprintf_r+0x176>
 800608a:	9105      	str	r1, [sp, #20]
 800608c:	e7c3      	b.n	8006016 <_vfiprintf_r+0x176>
 800608e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006092:	4604      	mov	r4, r0
 8006094:	2301      	movs	r3, #1
 8006096:	e7f0      	b.n	800607a <_vfiprintf_r+0x1da>
 8006098:	ab03      	add	r3, sp, #12
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	462a      	mov	r2, r5
 800609e:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <_vfiprintf_r+0x258>)
 80060a0:	a904      	add	r1, sp, #16
 80060a2:	4630      	mov	r0, r6
 80060a4:	f3af 8000 	nop.w
 80060a8:	4607      	mov	r7, r0
 80060aa:	1c78      	adds	r0, r7, #1
 80060ac:	d1d6      	bne.n	800605c <_vfiprintf_r+0x1bc>
 80060ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b0:	07d9      	lsls	r1, r3, #31
 80060b2:	d405      	bmi.n	80060c0 <_vfiprintf_r+0x220>
 80060b4:	89ab      	ldrh	r3, [r5, #12]
 80060b6:	059a      	lsls	r2, r3, #22
 80060b8:	d402      	bmi.n	80060c0 <_vfiprintf_r+0x220>
 80060ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060bc:	f7ff fd77 	bl	8005bae <__retarget_lock_release_recursive>
 80060c0:	89ab      	ldrh	r3, [r5, #12]
 80060c2:	065b      	lsls	r3, r3, #25
 80060c4:	f53f af12 	bmi.w	8005eec <_vfiprintf_r+0x4c>
 80060c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ca:	e711      	b.n	8005ef0 <_vfiprintf_r+0x50>
 80060cc:	ab03      	add	r3, sp, #12
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	462a      	mov	r2, r5
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <_vfiprintf_r+0x258>)
 80060d4:	a904      	add	r1, sp, #16
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 f880 	bl	80061dc <_printf_i>
 80060dc:	e7e4      	b.n	80060a8 <_vfiprintf_r+0x208>
 80060de:	bf00      	nop
 80060e0:	080068e0 	.word	0x080068e0
 80060e4:	08006900 	.word	0x08006900
 80060e8:	080068c0 	.word	0x080068c0
 80060ec:	08006920 	.word	0x08006920
 80060f0:	0800692a 	.word	0x0800692a
 80060f4:	00000000 	.word	0x00000000
 80060f8:	08005e7b 	.word	0x08005e7b
 80060fc:	08006926 	.word	0x08006926

08006100 <_printf_common>:
 8006100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	4616      	mov	r6, r2
 8006106:	4699      	mov	r9, r3
 8006108:	688a      	ldr	r2, [r1, #8]
 800610a:	690b      	ldr	r3, [r1, #16]
 800610c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006110:	4293      	cmp	r3, r2
 8006112:	bfb8      	it	lt
 8006114:	4613      	movlt	r3, r2
 8006116:	6033      	str	r3, [r6, #0]
 8006118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800611c:	4607      	mov	r7, r0
 800611e:	460c      	mov	r4, r1
 8006120:	b10a      	cbz	r2, 8006126 <_printf_common+0x26>
 8006122:	3301      	adds	r3, #1
 8006124:	6033      	str	r3, [r6, #0]
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	0699      	lsls	r1, r3, #26
 800612a:	bf42      	ittt	mi
 800612c:	6833      	ldrmi	r3, [r6, #0]
 800612e:	3302      	addmi	r3, #2
 8006130:	6033      	strmi	r3, [r6, #0]
 8006132:	6825      	ldr	r5, [r4, #0]
 8006134:	f015 0506 	ands.w	r5, r5, #6
 8006138:	d106      	bne.n	8006148 <_printf_common+0x48>
 800613a:	f104 0a19 	add.w	sl, r4, #25
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	6832      	ldr	r2, [r6, #0]
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	42ab      	cmp	r3, r5
 8006146:	dc26      	bgt.n	8006196 <_printf_common+0x96>
 8006148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800614c:	1e13      	subs	r3, r2, #0
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	bf18      	it	ne
 8006152:	2301      	movne	r3, #1
 8006154:	0692      	lsls	r2, r2, #26
 8006156:	d42b      	bmi.n	80061b0 <_printf_common+0xb0>
 8006158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800615c:	4649      	mov	r1, r9
 800615e:	4638      	mov	r0, r7
 8006160:	47c0      	blx	r8
 8006162:	3001      	adds	r0, #1
 8006164:	d01e      	beq.n	80061a4 <_printf_common+0xa4>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	68e5      	ldr	r5, [r4, #12]
 800616a:	6832      	ldr	r2, [r6, #0]
 800616c:	f003 0306 	and.w	r3, r3, #6
 8006170:	2b04      	cmp	r3, #4
 8006172:	bf08      	it	eq
 8006174:	1aad      	subeq	r5, r5, r2
 8006176:	68a3      	ldr	r3, [r4, #8]
 8006178:	6922      	ldr	r2, [r4, #16]
 800617a:	bf0c      	ite	eq
 800617c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006180:	2500      	movne	r5, #0
 8006182:	4293      	cmp	r3, r2
 8006184:	bfc4      	itt	gt
 8006186:	1a9b      	subgt	r3, r3, r2
 8006188:	18ed      	addgt	r5, r5, r3
 800618a:	2600      	movs	r6, #0
 800618c:	341a      	adds	r4, #26
 800618e:	42b5      	cmp	r5, r6
 8006190:	d11a      	bne.n	80061c8 <_printf_common+0xc8>
 8006192:	2000      	movs	r0, #0
 8006194:	e008      	b.n	80061a8 <_printf_common+0xa8>
 8006196:	2301      	movs	r3, #1
 8006198:	4652      	mov	r2, sl
 800619a:	4649      	mov	r1, r9
 800619c:	4638      	mov	r0, r7
 800619e:	47c0      	blx	r8
 80061a0:	3001      	adds	r0, #1
 80061a2:	d103      	bne.n	80061ac <_printf_common+0xac>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ac:	3501      	adds	r5, #1
 80061ae:	e7c6      	b.n	800613e <_printf_common+0x3e>
 80061b0:	18e1      	adds	r1, r4, r3
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	2030      	movs	r0, #48	; 0x30
 80061b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ba:	4422      	add	r2, r4
 80061bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061c4:	3302      	adds	r3, #2
 80061c6:	e7c7      	b.n	8006158 <_printf_common+0x58>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4622      	mov	r2, r4
 80061cc:	4649      	mov	r1, r9
 80061ce:	4638      	mov	r0, r7
 80061d0:	47c0      	blx	r8
 80061d2:	3001      	adds	r0, #1
 80061d4:	d0e6      	beq.n	80061a4 <_printf_common+0xa4>
 80061d6:	3601      	adds	r6, #1
 80061d8:	e7d9      	b.n	800618e <_printf_common+0x8e>
	...

080061dc <_printf_i>:
 80061dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	7e0f      	ldrb	r7, [r1, #24]
 80061e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061e4:	2f78      	cmp	r7, #120	; 0x78
 80061e6:	4691      	mov	r9, r2
 80061e8:	4680      	mov	r8, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	469a      	mov	sl, r3
 80061ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061f2:	d807      	bhi.n	8006204 <_printf_i+0x28>
 80061f4:	2f62      	cmp	r7, #98	; 0x62
 80061f6:	d80a      	bhi.n	800620e <_printf_i+0x32>
 80061f8:	2f00      	cmp	r7, #0
 80061fa:	f000 80d8 	beq.w	80063ae <_printf_i+0x1d2>
 80061fe:	2f58      	cmp	r7, #88	; 0x58
 8006200:	f000 80a3 	beq.w	800634a <_printf_i+0x16e>
 8006204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800620c:	e03a      	b.n	8006284 <_printf_i+0xa8>
 800620e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006212:	2b15      	cmp	r3, #21
 8006214:	d8f6      	bhi.n	8006204 <_printf_i+0x28>
 8006216:	a101      	add	r1, pc, #4	; (adr r1, 800621c <_printf_i+0x40>)
 8006218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800621c:	08006275 	.word	0x08006275
 8006220:	08006289 	.word	0x08006289
 8006224:	08006205 	.word	0x08006205
 8006228:	08006205 	.word	0x08006205
 800622c:	08006205 	.word	0x08006205
 8006230:	08006205 	.word	0x08006205
 8006234:	08006289 	.word	0x08006289
 8006238:	08006205 	.word	0x08006205
 800623c:	08006205 	.word	0x08006205
 8006240:	08006205 	.word	0x08006205
 8006244:	08006205 	.word	0x08006205
 8006248:	08006395 	.word	0x08006395
 800624c:	080062b9 	.word	0x080062b9
 8006250:	08006377 	.word	0x08006377
 8006254:	08006205 	.word	0x08006205
 8006258:	08006205 	.word	0x08006205
 800625c:	080063b7 	.word	0x080063b7
 8006260:	08006205 	.word	0x08006205
 8006264:	080062b9 	.word	0x080062b9
 8006268:	08006205 	.word	0x08006205
 800626c:	08006205 	.word	0x08006205
 8006270:	0800637f 	.word	0x0800637f
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	1d1a      	adds	r2, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	602a      	str	r2, [r5, #0]
 800627c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006284:	2301      	movs	r3, #1
 8006286:	e0a3      	b.n	80063d0 <_printf_i+0x1f4>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	6829      	ldr	r1, [r5, #0]
 800628c:	0606      	lsls	r6, r0, #24
 800628e:	f101 0304 	add.w	r3, r1, #4
 8006292:	d50a      	bpl.n	80062aa <_printf_i+0xce>
 8006294:	680e      	ldr	r6, [r1, #0]
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	2e00      	cmp	r6, #0
 800629a:	da03      	bge.n	80062a4 <_printf_i+0xc8>
 800629c:	232d      	movs	r3, #45	; 0x2d
 800629e:	4276      	negs	r6, r6
 80062a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a4:	485e      	ldr	r0, [pc, #376]	; (8006420 <_printf_i+0x244>)
 80062a6:	230a      	movs	r3, #10
 80062a8:	e019      	b.n	80062de <_printf_i+0x102>
 80062aa:	680e      	ldr	r6, [r1, #0]
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062b2:	bf18      	it	ne
 80062b4:	b236      	sxthne	r6, r6
 80062b6:	e7ef      	b.n	8006298 <_printf_i+0xbc>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	1d19      	adds	r1, r3, #4
 80062be:	6029      	str	r1, [r5, #0]
 80062c0:	0601      	lsls	r1, r0, #24
 80062c2:	d501      	bpl.n	80062c8 <_printf_i+0xec>
 80062c4:	681e      	ldr	r6, [r3, #0]
 80062c6:	e002      	b.n	80062ce <_printf_i+0xf2>
 80062c8:	0646      	lsls	r6, r0, #25
 80062ca:	d5fb      	bpl.n	80062c4 <_printf_i+0xe8>
 80062cc:	881e      	ldrh	r6, [r3, #0]
 80062ce:	4854      	ldr	r0, [pc, #336]	; (8006420 <_printf_i+0x244>)
 80062d0:	2f6f      	cmp	r7, #111	; 0x6f
 80062d2:	bf0c      	ite	eq
 80062d4:	2308      	moveq	r3, #8
 80062d6:	230a      	movne	r3, #10
 80062d8:	2100      	movs	r1, #0
 80062da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062de:	6865      	ldr	r5, [r4, #4]
 80062e0:	60a5      	str	r5, [r4, #8]
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	bfa2      	ittt	ge
 80062e6:	6821      	ldrge	r1, [r4, #0]
 80062e8:	f021 0104 	bicge.w	r1, r1, #4
 80062ec:	6021      	strge	r1, [r4, #0]
 80062ee:	b90e      	cbnz	r6, 80062f4 <_printf_i+0x118>
 80062f0:	2d00      	cmp	r5, #0
 80062f2:	d04d      	beq.n	8006390 <_printf_i+0x1b4>
 80062f4:	4615      	mov	r5, r2
 80062f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80062fa:	fb03 6711 	mls	r7, r3, r1, r6
 80062fe:	5dc7      	ldrb	r7, [r0, r7]
 8006300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006304:	4637      	mov	r7, r6
 8006306:	42bb      	cmp	r3, r7
 8006308:	460e      	mov	r6, r1
 800630a:	d9f4      	bls.n	80062f6 <_printf_i+0x11a>
 800630c:	2b08      	cmp	r3, #8
 800630e:	d10b      	bne.n	8006328 <_printf_i+0x14c>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	07de      	lsls	r6, r3, #31
 8006314:	d508      	bpl.n	8006328 <_printf_i+0x14c>
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	6861      	ldr	r1, [r4, #4]
 800631a:	4299      	cmp	r1, r3
 800631c:	bfde      	ittt	le
 800631e:	2330      	movle	r3, #48	; 0x30
 8006320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006324:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006328:	1b52      	subs	r2, r2, r5
 800632a:	6122      	str	r2, [r4, #16]
 800632c:	f8cd a000 	str.w	sl, [sp]
 8006330:	464b      	mov	r3, r9
 8006332:	aa03      	add	r2, sp, #12
 8006334:	4621      	mov	r1, r4
 8006336:	4640      	mov	r0, r8
 8006338:	f7ff fee2 	bl	8006100 <_printf_common>
 800633c:	3001      	adds	r0, #1
 800633e:	d14c      	bne.n	80063da <_printf_i+0x1fe>
 8006340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006344:	b004      	add	sp, #16
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634a:	4835      	ldr	r0, [pc, #212]	; (8006420 <_printf_i+0x244>)
 800634c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006350:	6829      	ldr	r1, [r5, #0]
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	f851 6b04 	ldr.w	r6, [r1], #4
 8006358:	6029      	str	r1, [r5, #0]
 800635a:	061d      	lsls	r5, r3, #24
 800635c:	d514      	bpl.n	8006388 <_printf_i+0x1ac>
 800635e:	07df      	lsls	r7, r3, #31
 8006360:	bf44      	itt	mi
 8006362:	f043 0320 	orrmi.w	r3, r3, #32
 8006366:	6023      	strmi	r3, [r4, #0]
 8006368:	b91e      	cbnz	r6, 8006372 <_printf_i+0x196>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	f023 0320 	bic.w	r3, r3, #32
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	2310      	movs	r3, #16
 8006374:	e7b0      	b.n	80062d8 <_printf_i+0xfc>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	f043 0320 	orr.w	r3, r3, #32
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	2378      	movs	r3, #120	; 0x78
 8006380:	4828      	ldr	r0, [pc, #160]	; (8006424 <_printf_i+0x248>)
 8006382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006386:	e7e3      	b.n	8006350 <_printf_i+0x174>
 8006388:	0659      	lsls	r1, r3, #25
 800638a:	bf48      	it	mi
 800638c:	b2b6      	uxthmi	r6, r6
 800638e:	e7e6      	b.n	800635e <_printf_i+0x182>
 8006390:	4615      	mov	r5, r2
 8006392:	e7bb      	b.n	800630c <_printf_i+0x130>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	6826      	ldr	r6, [r4, #0]
 8006398:	6961      	ldr	r1, [r4, #20]
 800639a:	1d18      	adds	r0, r3, #4
 800639c:	6028      	str	r0, [r5, #0]
 800639e:	0635      	lsls	r5, r6, #24
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	d501      	bpl.n	80063a8 <_printf_i+0x1cc>
 80063a4:	6019      	str	r1, [r3, #0]
 80063a6:	e002      	b.n	80063ae <_printf_i+0x1d2>
 80063a8:	0670      	lsls	r0, r6, #25
 80063aa:	d5fb      	bpl.n	80063a4 <_printf_i+0x1c8>
 80063ac:	8019      	strh	r1, [r3, #0]
 80063ae:	2300      	movs	r3, #0
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	4615      	mov	r5, r2
 80063b4:	e7ba      	b.n	800632c <_printf_i+0x150>
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	1d1a      	adds	r2, r3, #4
 80063ba:	602a      	str	r2, [r5, #0]
 80063bc:	681d      	ldr	r5, [r3, #0]
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	2100      	movs	r1, #0
 80063c2:	4628      	mov	r0, r5
 80063c4:	f7f9 ff04 	bl	80001d0 <memchr>
 80063c8:	b108      	cbz	r0, 80063ce <_printf_i+0x1f2>
 80063ca:	1b40      	subs	r0, r0, r5
 80063cc:	6060      	str	r0, [r4, #4]
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	2300      	movs	r3, #0
 80063d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d8:	e7a8      	b.n	800632c <_printf_i+0x150>
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	462a      	mov	r2, r5
 80063de:	4649      	mov	r1, r9
 80063e0:	4640      	mov	r0, r8
 80063e2:	47d0      	blx	sl
 80063e4:	3001      	adds	r0, #1
 80063e6:	d0ab      	beq.n	8006340 <_printf_i+0x164>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	079b      	lsls	r3, r3, #30
 80063ec:	d413      	bmi.n	8006416 <_printf_i+0x23a>
 80063ee:	68e0      	ldr	r0, [r4, #12]
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	4298      	cmp	r0, r3
 80063f4:	bfb8      	it	lt
 80063f6:	4618      	movlt	r0, r3
 80063f8:	e7a4      	b.n	8006344 <_printf_i+0x168>
 80063fa:	2301      	movs	r3, #1
 80063fc:	4632      	mov	r2, r6
 80063fe:	4649      	mov	r1, r9
 8006400:	4640      	mov	r0, r8
 8006402:	47d0      	blx	sl
 8006404:	3001      	adds	r0, #1
 8006406:	d09b      	beq.n	8006340 <_printf_i+0x164>
 8006408:	3501      	adds	r5, #1
 800640a:	68e3      	ldr	r3, [r4, #12]
 800640c:	9903      	ldr	r1, [sp, #12]
 800640e:	1a5b      	subs	r3, r3, r1
 8006410:	42ab      	cmp	r3, r5
 8006412:	dcf2      	bgt.n	80063fa <_printf_i+0x21e>
 8006414:	e7eb      	b.n	80063ee <_printf_i+0x212>
 8006416:	2500      	movs	r5, #0
 8006418:	f104 0619 	add.w	r6, r4, #25
 800641c:	e7f5      	b.n	800640a <_printf_i+0x22e>
 800641e:	bf00      	nop
 8006420:	08006931 	.word	0x08006931
 8006424:	08006942 	.word	0x08006942

08006428 <_sbrk_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4d06      	ldr	r5, [pc, #24]	; (8006444 <_sbrk_r+0x1c>)
 800642c:	2300      	movs	r3, #0
 800642e:	4604      	mov	r4, r0
 8006430:	4608      	mov	r0, r1
 8006432:	602b      	str	r3, [r5, #0]
 8006434:	f7fb fc34 	bl	8001ca0 <_sbrk>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_sbrk_r+0x1a>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	b103      	cbz	r3, 8006442 <_sbrk_r+0x1a>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200002e8 	.word	0x200002e8

08006448 <__sread>:
 8006448:	b510      	push	{r4, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006450:	f000 f8a8 	bl	80065a4 <_read_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	bfab      	itete	ge
 8006458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800645a:	89a3      	ldrhlt	r3, [r4, #12]
 800645c:	181b      	addge	r3, r3, r0
 800645e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006462:	bfac      	ite	ge
 8006464:	6563      	strge	r3, [r4, #84]	; 0x54
 8006466:	81a3      	strhlt	r3, [r4, #12]
 8006468:	bd10      	pop	{r4, pc}

0800646a <__swrite>:
 800646a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646e:	461f      	mov	r7, r3
 8006470:	898b      	ldrh	r3, [r1, #12]
 8006472:	05db      	lsls	r3, r3, #23
 8006474:	4605      	mov	r5, r0
 8006476:	460c      	mov	r4, r1
 8006478:	4616      	mov	r6, r2
 800647a:	d505      	bpl.n	8006488 <__swrite+0x1e>
 800647c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006480:	2302      	movs	r3, #2
 8006482:	2200      	movs	r2, #0
 8006484:	f000 f870 	bl	8006568 <_lseek_r>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800648e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	4632      	mov	r2, r6
 8006496:	463b      	mov	r3, r7
 8006498:	4628      	mov	r0, r5
 800649a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800649e:	f000 b817 	b.w	80064d0 <_write_r>

080064a2 <__sseek>:
 80064a2:	b510      	push	{r4, lr}
 80064a4:	460c      	mov	r4, r1
 80064a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064aa:	f000 f85d 	bl	8006568 <_lseek_r>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	bf15      	itete	ne
 80064b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80064b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064be:	81a3      	strheq	r3, [r4, #12]
 80064c0:	bf18      	it	ne
 80064c2:	81a3      	strhne	r3, [r4, #12]
 80064c4:	bd10      	pop	{r4, pc}

080064c6 <__sclose>:
 80064c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ca:	f000 b81b 	b.w	8006504 <_close_r>
	...

080064d0 <_write_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d07      	ldr	r5, [pc, #28]	; (80064f0 <_write_r+0x20>)
 80064d4:	4604      	mov	r4, r0
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	2200      	movs	r2, #0
 80064dc:	602a      	str	r2, [r5, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f7fb fb8d 	bl	8001bfe <_write>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_write_r+0x1e>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_write_r+0x1e>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	200002e8 	.word	0x200002e8

080064f4 <abort>:
 80064f4:	b508      	push	{r3, lr}
 80064f6:	2006      	movs	r0, #6
 80064f8:	f000 f88e 	bl	8006618 <raise>
 80064fc:	2001      	movs	r0, #1
 80064fe:	f7fb fb57 	bl	8001bb0 <_exit>
	...

08006504 <_close_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4d06      	ldr	r5, [pc, #24]	; (8006520 <_close_r+0x1c>)
 8006508:	2300      	movs	r3, #0
 800650a:	4604      	mov	r4, r0
 800650c:	4608      	mov	r0, r1
 800650e:	602b      	str	r3, [r5, #0]
 8006510:	f7fb fb91 	bl	8001c36 <_close>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d102      	bne.n	800651e <_close_r+0x1a>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	b103      	cbz	r3, 800651e <_close_r+0x1a>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	200002e8 	.word	0x200002e8

08006524 <_fstat_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4d07      	ldr	r5, [pc, #28]	; (8006544 <_fstat_r+0x20>)
 8006528:	2300      	movs	r3, #0
 800652a:	4604      	mov	r4, r0
 800652c:	4608      	mov	r0, r1
 800652e:	4611      	mov	r1, r2
 8006530:	602b      	str	r3, [r5, #0]
 8006532:	f7fb fb8c 	bl	8001c4e <_fstat>
 8006536:	1c43      	adds	r3, r0, #1
 8006538:	d102      	bne.n	8006540 <_fstat_r+0x1c>
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	b103      	cbz	r3, 8006540 <_fstat_r+0x1c>
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	bd38      	pop	{r3, r4, r5, pc}
 8006542:	bf00      	nop
 8006544:	200002e8 	.word	0x200002e8

08006548 <_isatty_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d06      	ldr	r5, [pc, #24]	; (8006564 <_isatty_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fb fb8b 	bl	8001c6e <_isatty>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_isatty_r+0x1a>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_isatty_r+0x1a>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	200002e8 	.word	0x200002e8

08006568 <_lseek_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d07      	ldr	r5, [pc, #28]	; (8006588 <_lseek_r+0x20>)
 800656c:	4604      	mov	r4, r0
 800656e:	4608      	mov	r0, r1
 8006570:	4611      	mov	r1, r2
 8006572:	2200      	movs	r2, #0
 8006574:	602a      	str	r2, [r5, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f7fb fb84 	bl	8001c84 <_lseek>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_lseek_r+0x1e>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_lseek_r+0x1e>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	200002e8 	.word	0x200002e8

0800658c <__malloc_lock>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__malloc_lock+0x8>)
 800658e:	f7ff bb0d 	b.w	8005bac <__retarget_lock_acquire_recursive>
 8006592:	bf00      	nop
 8006594:	200002dc 	.word	0x200002dc

08006598 <__malloc_unlock>:
 8006598:	4801      	ldr	r0, [pc, #4]	; (80065a0 <__malloc_unlock+0x8>)
 800659a:	f7ff bb08 	b.w	8005bae <__retarget_lock_release_recursive>
 800659e:	bf00      	nop
 80065a0:	200002dc 	.word	0x200002dc

080065a4 <_read_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d07      	ldr	r5, [pc, #28]	; (80065c4 <_read_r+0x20>)
 80065a8:	4604      	mov	r4, r0
 80065aa:	4608      	mov	r0, r1
 80065ac:	4611      	mov	r1, r2
 80065ae:	2200      	movs	r2, #0
 80065b0:	602a      	str	r2, [r5, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f7fb fb06 	bl	8001bc4 <_read>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_read_r+0x1e>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_read_r+0x1e>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	200002e8 	.word	0x200002e8

080065c8 <_raise_r>:
 80065c8:	291f      	cmp	r1, #31
 80065ca:	b538      	push	{r3, r4, r5, lr}
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	d904      	bls.n	80065dc <_raise_r+0x14>
 80065d2:	2316      	movs	r3, #22
 80065d4:	6003      	str	r3, [r0, #0]
 80065d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065de:	b112      	cbz	r2, 80065e6 <_raise_r+0x1e>
 80065e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065e4:	b94b      	cbnz	r3, 80065fa <_raise_r+0x32>
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 f830 	bl	800664c <_getpid_r>
 80065ec:	462a      	mov	r2, r5
 80065ee:	4601      	mov	r1, r0
 80065f0:	4620      	mov	r0, r4
 80065f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f6:	f000 b817 	b.w	8006628 <_kill_r>
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d00a      	beq.n	8006614 <_raise_r+0x4c>
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	d103      	bne.n	800660a <_raise_r+0x42>
 8006602:	2316      	movs	r3, #22
 8006604:	6003      	str	r3, [r0, #0]
 8006606:	2001      	movs	r0, #1
 8006608:	e7e7      	b.n	80065da <_raise_r+0x12>
 800660a:	2400      	movs	r4, #0
 800660c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006610:	4628      	mov	r0, r5
 8006612:	4798      	blx	r3
 8006614:	2000      	movs	r0, #0
 8006616:	e7e0      	b.n	80065da <_raise_r+0x12>

08006618 <raise>:
 8006618:	4b02      	ldr	r3, [pc, #8]	; (8006624 <raise+0xc>)
 800661a:	4601      	mov	r1, r0
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	f7ff bfd3 	b.w	80065c8 <_raise_r>
 8006622:	bf00      	nop
 8006624:	20000024 	.word	0x20000024

08006628 <_kill_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	; (8006648 <_kill_r+0x20>)
 800662c:	2300      	movs	r3, #0
 800662e:	4604      	mov	r4, r0
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	f7fb faab 	bl	8001b90 <_kill>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d102      	bne.n	8006644 <_kill_r+0x1c>
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	b103      	cbz	r3, 8006644 <_kill_r+0x1c>
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	200002e8 	.word	0x200002e8

0800664c <_getpid_r>:
 800664c:	f7fb ba98 	b.w	8001b80 <_getpid>

08006650 <_init>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr

0800665c <_fini>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr
